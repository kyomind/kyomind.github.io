<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/leaf.svg</icon>
  <subtitle>我的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2024-09-27T06:09:17.726Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>Kyo Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django Ninja 教學 15：回應（三）為何不用 ModelSchema？——相比 DRF，我更偏愛 Django Ninja 的理由</title>
    <link href="https://blog.kyomind.tw/django-ninja-15/"/>
    <id>https://blog.kyomind.tw/django-ninja-15/</id>
    <published>2024-09-27T03:37:59.000Z</published>
    <updated>2024-09-27T06:09:17.726Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>Django API 回應，常常是對 Model 物件（即 db 資料）內容進行一定的<strong>篩選與加工</strong>。</p><p>比如「取得單一文章資訊」API，實際上就是從<code>Post</code>物件挑選欄位，再進行序列化。</p><p>這個過程中，我們需要考慮如何將<strong>模型物件</strong>轉換為 API 的回應結構，同時保持程式碼的可維護性與靈活。</p><p>對此，Django REST Framework（<strong>以下簡稱 DRF</strong>）提供了<strong>非常實用的「特製」序列化器</strong>——<code>ModelSerializer</code>，可說是 DRF 開發者必學的核心功能。</p><p>Django Ninja 雖然也有類似的實踐——<code>ModelSchema</code>，對我而言卻是雞肋般的存在，<strong>我幾乎不曾使用</strong>。</p><p>這樣的差異，無疑是兩者的核心設計理念不同所導致。</p><p>我們曾在第 3 篇中討論過，兩者在功能上的主要區別。本文將透過「<strong>Django 模型物件的序列化</strong>」這個頗具代表性的議題，說明「<strong>為何相比於 DRF，我更喜歡寫 Django Ninja</strong>」。</p><span id="more"></span><hr><h2 id="ModelSerializer-的亮點"><a href="#ModelSerializer-的亮點" class="headerlink" title="ModelSerializer 的亮點"></a>ModelSerializer 的亮點</h2><p>DRF 中的<code>ModelSerializer</code>是個非常強大的工具，它能夠自動將 Django 模型轉換為 API 需要的資料結構——序列化器，大大簡化了「<strong>為序列化器定義欄位</strong>」的過程。</p><p>附帶一提，DRF <a href="https://www.django-rest-framework.org/api-guide/serializers/">序列化器</a>，相當於 Django Ninja 所使用的 Schema，兩者的概念大同小異，都是用於<strong>資料的驗證與序列化</strong>。</p><p>如果我們把「取得單一文章資訊」API 回應用<code>ModelSerializer</code>改寫，它將長這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># Author 序列化器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Post 序列化器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    author = AuthorSerializer()  <span class="comment"># 嵌套的 Author 序列化器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Post</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如你所見，透過<code>ModelSerializer</code>，我們只需要<strong>少少的程式碼</strong>便能定義完序列化器，從而避免了<strong>手動設定的重複與麻煩。</strong></p><hr><h2 id="ModelSerializer-的隱憂"><a href="#ModelSerializer-的隱憂" class="headerlink" title="ModelSerializer 的隱憂"></a>ModelSerializer 的隱憂</h2><p>然而，這樣的方便也帶來<strong>一定的隱憂</strong>。</p><p>因為不用自己定義欄位，所以<code>ModelSerializer</code>幫你做了許多欄位的<strong>隱式轉換</strong>——從 Django Model 欄位轉換為序列化器欄位。</p><p>為何說「<strong>隱式</strong>」呢？因為<strong>自動轉換</strong>後的序列化器欄位，其欄位的型別、特性、是否唯讀（<code>read_only</code>）等細節，你<strong>未必清楚</strong>。</p><p>換言之，自動轉換固然省去了手動設定的麻煩，但當你需要調整某些細節或理解具體的轉換邏輯時，這種隱式行為可能會<strong>讓你感到困惑</strong>。</p><h3 id="魔法的代價"><a href="#魔法的代價" class="headerlink" title="魔法的代價"></a>魔法的代價</h3><p>在實際開發中，這種隱式轉換的「魔法」會讓開發者<strong>失去</strong>對轉換過程的<strong>理解與掌控</strong>。你很可能會發現，序列化的結果和你想的<strong>並不完全一致！</strong></p><p>此時我們往往需要翻閱 DRF 的官方文件來理解內部如何處理這些欄位轉換，但也不是每個細節都寫得清楚明白。</p><p>對開發者而言，特別是在處理複雜 API 時，會明顯增加學習和維護成本。</p><p><strong>以上正是我的經驗！</strong></p><p>即使寫了 2 年 DRF，遇到序列化問題，我還是<strong>很常需要重新查看文件</strong>。</p><hr><h2 id="ModelSchema"><a href="#ModelSchema" class="headerlink" title="ModelSchema"></a>ModelSchema</h2><p>Django Ninja 的 <a href="https://django-ninja.dev/guides/response/django-pydantic/#modelschema">ModelSchema</a> 相較於 ModelSerializer，則顯得「<strong>單純</strong>」許多。</p><p>怎麼說？我們看一下<a href="https://django-ninja.dev/guides/response/django-pydantic/#modelschema">官方文件</a>中的例示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> ModelSchema</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">ModelSchema</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;first_name&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Will create schema like this:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class UserSchema(Schema):</span></span><br><span class="line"><span class="comment">#     id: int</span></span><br><span class="line"><span class="comment">#     username: str</span></span><br><span class="line"><span class="comment">#     first_name: str</span></span><br><span class="line"><span class="comment">#     last_name: str</span></span><br></pre></td></tr></table></figure><p>說它「單純」，因為它<strong>只會</strong>幫你自動轉換、定義欄位的「<strong>型別</strong>」而已。</p><p>而 DRF 的<code>ModelSerializer</code>，如前所述，則是會「<strong>做更多</strong>」。</p><p>既然 ModelSchema 的自動轉換相對單純，那為何<strong>我還是不建議使用</strong>呢？有兩個理由。</p><p>其中<strong>第一個理由</strong>，就是標題所說「<strong>為何我更偏愛 Django Ninja</strong>」的理由。</p><hr><h2 id="理由一：低耦合-明確優於隱晦"><a href="#理由一：低耦合-明確優於隱晦" class="headerlink" title="理由一：低耦合 + 明確優於隱晦"></a>理由一：低耦合 + 明確優於隱晦</h2><p>Django Ninja 更強調開發者對 API 結構的掌握，而 DRF 則偏向於提供高度整合且便利的工具。</p><p>這種差異反映在它們<strong>對待 Django 模型序列化的方式</strong>上，也影響了開發者在使用這兩個框架時的<strong>風格和思維方式</strong>。</p><h3 id="Django-REST-Framework-和-Django-高度耦合"><a href="#Django-REST-Framework-和-Django-高度耦合" class="headerlink" title="Django REST Framework 和 Django 高度耦合"></a>Django REST Framework 和 Django 高度耦合</h3><p>我們可以發現， DRF 幾乎是一個「<strong>為 Django 高度定製</strong>」的 API 開發工具。</p><p>這種<strong>緊密的結合</strong>雖然帶來了便利性，但也意味著 DRF 在很大程度上依賴於 Django 的內部結構和功能。不管是 <a href="https://www.django-rest-framework.org/api-guide/generic-views/#generic-views">Generic views</a>，還是本文的 <a href="https://www.django-rest-framework.org/api-guide/serializers/#modelserializer">ModelSerializer</a>，都是如此。</p><p>高耦合的優點就是<strong>你可以少做很多事</strong>，而代價則是<strong>你要很了解自己在做什麼</strong>。</p><h3 id="明確優於隱晦"><a href="#明確優於隱晦" class="headerlink" title="明確優於隱晦"></a>明確優於隱晦</h3><p>相較於 DRF，Django Ninja 與 Django 的耦合程度則要<strong>低得多</strong>。</p><p>在我看來，Django Ninja 更偏好「<strong>明確優於隱晦</strong>」，Django Ninja 的 Schema 定義是基於 Pydantic，它要求開發者明確定義每個欄位，無論是輸入還是輸出。</p><p>雖然這樣相對繁瑣，但它帶來的好處是<strong>顯而易見</strong>的。</p><h3 id="明確的兩大優點"><a href="#明確的兩大優點" class="headerlink" title="明確的兩大優點"></a>明確的兩大優點</h3><p>首先，手動定義 Schema 讓開發者對資料結構有著<strong>絕對的掌控權</strong>。沒有任何隱藏規則或暗箱操作，一切都清晰可見。</p><p>其次，這種方法<strong>有效地降低了模型層與 API 層之間的耦合</strong>。在實際開發中，模型設計可能會隨著需求變化而更新，但這不應該直接影響到 API。</p><p>總的來說，Django Ninja 強調<strong>以 Schema 為核心的控制</strong>，讓 API 的設計更具穩定性和靈活性，並賦予開發者對資料流的完全掌控。</p><hr><h2 id="理由二：更好、更可讀的-API-文件"><a href="#理由二：更好、更可讀的-API-文件" class="headerlink" title="理由二：更好、更可讀的 API 文件"></a>理由二：更好、更可讀的 API 文件</h2><p>在第 18 篇，我們會詳細討論 Schema 欄位設定對 API 文件的影響。</p><p>簡言之，如果使用 ModelSchema，那麼渲染出來的 API 文件將會<strong>相當陽春</strong>。</p><p>這<strong>並不符合</strong>我對 API 文件清晰與明確性的追求。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>不可否認，Django REST framework 有一些非常方便且貼心的設計，比如上一篇提到的<code>source=</code>參數，它直觀而優雅。</p><p>Django Ninja 則要求開發者，盡可能手動定義每個欄位，減少模型與 API 層的耦合，這更符合 <a href="https://zh.wikipedia.org/zh-tw/Python%E4%B9%8B%E7%A6%85">Python 哲學</a>中的「<strong>明確優於隱晦</strong>」，同時避免隱式行為帶來的潛在問題。</p><p>這正是我更偏愛 Django Ninja 的原因。</p><p>Django Ninja 對明確性的追求，讓我在開發和維護 API 時，<strong>多數時候感覺更加輕鬆</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;Django API 回應，常常是對 Model 物件（即 db 資料）內容進行一定的&lt;strong&gt;篩選與加工&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如「取得單一文章資訊」API，實際上就是從&lt;code&gt;Post&lt;/code&gt;物件挑選欄位，再進行序列化。&lt;/p&gt;
&lt;p&gt;這個過程中，我們需要考慮如何將&lt;strong&gt;模型物件&lt;/strong&gt;轉換為 API 的回應結構，同時保持程式碼的可維護性與靈活。&lt;/p&gt;
&lt;p&gt;對此，Django REST Framework（&lt;strong&gt;以下簡稱 DRF&lt;/strong&gt;）提供了&lt;strong&gt;非常實用的「特製」序列化器&lt;/strong&gt;——&lt;code&gt;ModelSerializer&lt;/code&gt;，可說是 DRF 開發者必學的核心功能。&lt;/p&gt;
&lt;p&gt;Django Ninja 雖然也有類似的實踐——&lt;code&gt;ModelSchema&lt;/code&gt;，對我而言卻是雞肋般的存在，&lt;strong&gt;我幾乎不曾使用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這樣的差異，無疑是兩者的核心設計理念不同所導致。&lt;/p&gt;
&lt;p&gt;我們曾在第 3 篇中討論過，兩者在功能上的主要區別。本文將透過「&lt;strong&gt;Django 模型物件的序列化&lt;/strong&gt;」這個頗具代表性的議題，說明「&lt;strong&gt;為何相比於 DRF，我更喜歡寫 Django Ninja&lt;/strong&gt;」。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 14：回應（二）巢狀結構回應</title>
    <link href="https://blog.kyomind.tw/django-ninja-14/"/>
    <id>https://blog.kyomind.tw/django-ninja-14/</id>
    <published>2024-09-26T02:56:38.000Z</published>
    <updated>2024-09-26T05:20:11.629Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>在 API 開發中，我們經常會遇到<strong>關聯模型</strong>之間的資料需要<strong>同時返回</strong>的情況。</p><p>特別是在處理「一對一」或「一對多」關聯時，<strong>多層結構</strong>往往是常態。</p><p>我們希望以<strong>巢狀結構</strong>（<a href="https://django-ninja.dev/guides/response/#nested-objects">Nested Objects</a>）的方式返回資料，這樣可以讓 API 的使用者<strong>一次取得必要資訊</strong>，而不需要進行多次請求。</p><p>本文將繼續使用並擴充「單一文章資訊」API 這個範例，講述如何在 Django Ninja 中實現<strong>巢狀結構回應</strong>，讓我們的 API 回應更加豐富、有體系。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/6">這個 PR</a>。</p><hr><h2 id="一、問題背景"><a href="#一、問題背景" class="headerlink" title="一、問題背景"></a>一、問題背景</h2><p>在之前的 API 設計中，「取得單一文章資訊」的回應包括了文章資訊及<strong>作者的 id</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    author_id: <span class="built_in">int</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    updated_at: datetime</span><br></pre></td></tr></table></figure><p>有經驗的開發者都知道，無論是<code>id</code>還是<code>author_id</code>，通常<strong>不是</strong>給服務的使用者看的——而是<strong>給前端人員靈活運用</strong>的。</p><p>比如在系統的畫面中，文章可能包括作者的<strong>個人資訊連結</strong>，點進去可以看到作者資訊。此時前端必須<strong>透過 id</strong>，再呼叫另一支 API「取得用戶資訊」來獲得額外的內容。</p><p>如果額外資訊很多，這樣的「<strong>解耦</strong>」設計是非常合理的。但如果我們希望<strong>一併呈現</strong>作者的「<strong>必要資訊</strong>」，那分次呼叫的設計就<strong>略嫌拖沓</strong>。</p><p>所以我們需要<strong>巢狀結構</strong>！</p><p>API 可以直接在回應中，嵌入作者的「必要資訊」，這樣用戶就不必再進行多次請求。這裡我們以一併顯示作者的「<strong>名字</strong>」和「<strong>email</strong>」為例。</p><span id="more"></span><hr><h2 id="二、API-改進：重新定義-Schema"><a href="#二、API-改進：重新定義-Schema" class="headerlink" title="二、API 改進：重新定義 Schema"></a>二、API 改進：重新定義 Schema</h2><p>只需要做一件事，就可以讓回應的內容、結構有所不同——重新定義<code>PostResponse</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> Schema</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_AuthorInfo</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    email: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    author: _AuthorInfo  <span class="comment"># 巢狀結構，包含作者資訊</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    updated_at: datetime</span><br></pre></td></tr></table></figure><p><code>_AuthorInfo</code>包含了作者的<code>id</code>、<code>name</code>和<code>email</code>，並將這個結構<strong>嵌入</strong><code>PostResponse</code>中的<code>author</code>欄位（從<code>author_id</code>易名而來，因為資訊內涵已有所不同）。</p><p>如此一來，我們便可以<strong>同時獲得</strong>文章和作者的必要資訊。</p><h3 id="命名小建議"><a href="#命名小建議" class="headerlink" title="命名小建議"></a>命名小建議</h3><p>你可能留意到我在<code>_AuthorInfo</code>使用了「底線開頭」這個命名原則。在 Python 中，這是一種<strong>慣例</strong>，用來表示這個<strong>屬性、函式、類別</strong>主要是作為<strong>內部使用</strong>。</p><p>所謂的「<strong>內部</strong>」可以有<strong>很多種解讀</strong>，而這裡我的用意是：<strong>它只是某個或多個 Schema 的一部分，不直接供 view 函式調用。</strong></p><p>別小看這個命名細節。隨著你的 Schema 數量增加，在開發新 API 時，你總是需要先瀏覽現有的 Schema，以決定是重新定義還是延用既有的。</p><p>此時有這樣的命名區別就顯得很「<strong>貼心</strong>」了——你不必在大大小小的 Schema 中翻來覆去，看得眼睛要脫窗。</p><p>撰寫巢狀 Schema 的機會不少，所以我認為養成這樣的好習慣是值得的。</p><h3 id="Nested-Response"><a href="#Nested-Response" class="headerlink" title="Nested Response"></a>Nested Response</h3><p>我們來看 API 的回應：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1:8000/posts/2/</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1 content&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alice@example.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>看看新的<code>author</code>欄位內容，巢狀結構，非常完美！</p><p>用戶可以直接到看文章作者的名字與 email，如果想看更多作者資訊，依舊能透過<code>id</code>欄位，再讓前端呼叫另一支 API。</p><p>這是一個理想的<strong>折衷方案</strong>。</p><hr><h2 id="三、「攤平」巢狀資訊"><a href="#三、「攤平」巢狀資訊" class="headerlink" title="三、「攤平」巢狀資訊"></a>三、「攤平」巢狀資訊</h2><p>前面的「折衷方案」確實挺理想。不過，有時我們的需求<strong>更簡單</strong>。</p><p>比如在「取得文章列表」API 中，我們可能也需要顯示作者的資訊——但此時只要<strong>名字</strong>就足夠了。</p><p>不需要作者 id，更不用 email，只要名字即可。</p><p>那麼，為何稱之為「<strong>攤平巢狀資訊</strong>」呢？因為作者的名字並非<code>Post</code>模型的直接屬性，它實際上來自於關聯模型——<code>User</code>。</p><p>我們必須要把有關作者的巢狀資訊進行<strong>化簡</strong>。</p><p>本來是這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;author&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;alice@example.com&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>現在變成這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;author_name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br></pre></td></tr></table></figure><p>從兩層變回一層（但不是作者 id 而是名字了），所以稱為「<strong>攤平</strong>」（flatten）。</p><h3 id="Schema-解耦"><a href="#Schema-解耦" class="headerlink" title="Schema 解耦"></a>Schema 解耦</h3><p>還記得「取得文章列表」API 的回應格式，其實是和「取得單一文章資訊」<strong>共用</strong>的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span>, response=<span class="built_in">list</span>[PostResponse]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params">...</span>) -&gt; QuerySet[Post]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取得文章列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>兩者都使用了<code>PostResponse</code>。</p><p>本文上半部對「取得單一文章資訊」回應的修改，<strong>也會影響到</strong>「取得文章列表」——這通常不是我們想要的結果。</p><p>所以，我們要為「取得文章列表」API 建立一個<strong>屬於自己的回應 Schema</strong>，並依照前面提到的需求，簡化資訊！</p><p>我打算：</p><ol><li>省略文章的內容（<code>content</code>）還有更新時間（<code>updated_at</code>）這兩個欄位，因為在列表中並不需要。</li><li>作者的部分只留下「名字」即可。</li></ol><hr><h2 id="四、實作攤平巢狀資訊——使用-property"><a href="#四、實作攤平巢狀資訊——使用-property" class="headerlink" title="四、實作攤平巢狀資訊——使用@property"></a>四、實作攤平巢狀資訊——使用<code>@property</code></h2><p>我們先看看新 Schema 如何定義：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostListResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    author_name: <span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>你可能覺得奇怪，哪來的<code>author_name</code>屬性？<code>Post</code>模型並沒有啊？</p><p>沒錯！因為那是我們<strong>自己定義</strong>的——使用<code>@property</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post/models.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span>(models.Model):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">author_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.author.username</span><br></pre></td></tr></table></figure><p>如此一來，你的 Post 模型物件，就會有<code>author_name</code>這個屬性了。</p><p>但要注意，呼叫這個屬性通常意味著<strong>觸發第二次查詢</strong>（因為它是<strong>關聯模型</strong>上的屬性），所以 view 函式中要搭配 Django QuerySet 方法<code>select_related</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posts.<span class="built_in">filter</span>(title__icontains=title).select_related(<span class="string">&#x27;author&#x27;</span>)</span><br></pre></td></tr></table></figure><p>這是 Django ORM 中常見的「<a href="https://medium.com/ichef/django-performance-optimization-1-orm-n-1-problem-493ddbfbe07a">N+1</a>」議題，在此先不展開。</p><h3 id="更好的做法"><a href="#更好的做法" class="headerlink" title="更好的做法"></a>更好的做法</h3><p>你可能覺得這個方式好像<strong>不怎麼優雅</strong>（至少我第一次看到時就是這麼想！）——尤其是和 Django REST framework 的做法相比。</p><p>Django REST framework 會在序列化器中這樣寫：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author_name = serializers.CharField(source=<span class="string">&quot;author.name&quot;</span>)</span><br></pre></td></tr></table></figure><p>是不是簡潔很多？</p><p>但這確實是 Django Ninja 作者<strong>早期</strong><a href="https://github.com/vitalik/django-ninja/issues/291#issuecomment-981395267">推薦的方式</a>。</p><p>別擔心，第 16 篇我們會介紹更好、更現代化的做法。不過<code>@property</code>在<strong>某些情況下</strong>，還是很有用的。</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這篇文章中，我們展示了如何在 Django Ninja 中使用 Schema 實現巢狀結構回應。</p><p>接著介紹如何「攤平」這個巢狀結構，把原來的作者 id 替換成名字欄位。</p><p>這些方法大大增加了 API 回應的靈活性。</p><p>下一篇文章，我們將討論 Django Ninja 和 Django REST Framework 在序列化與回應結構處理上的不同設計理念，並比較兩者的優劣。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 API 開發中，我們經常會遇到&lt;strong&gt;關聯模型&lt;/strong&gt;之間的資料需要&lt;strong&gt;同時返回&lt;/strong&gt;的情況。&lt;/p&gt;
&lt;p&gt;特別是在處理「一對一」或「一對多」關聯時，&lt;strong&gt;多層結構&lt;/strong&gt;往往是常態。&lt;/p&gt;
&lt;p&gt;我們希望以&lt;strong&gt;巢狀結構&lt;/strong&gt;（&lt;a href=&quot;https://django-ninja.dev/guides/response/#nested-objects&quot;&gt;Nested Objects&lt;/a&gt;）的方式返回資料，這樣可以讓 API 的使用者&lt;strong&gt;一次取得必要資訊&lt;/strong&gt;，而不需要進行多次請求。&lt;/p&gt;
&lt;p&gt;本文將繼續使用並擴充「單一文章資訊」API 這個範例，講述如何在 Django Ninja 中實現&lt;strong&gt;巢狀結構回應&lt;/strong&gt;，讓我們的 API 回應更加豐富、有體系。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/6&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、問題背景&quot;&gt;&lt;a href=&quot;#一、問題背景&quot; class=&quot;headerlink&quot; title=&quot;一、問題背景&quot;&gt;&lt;/a&gt;一、問題背景&lt;/h2&gt;&lt;p&gt;在之前的 API 設計中，「取得單一文章資訊」的回應包括了文章資訊及&lt;strong&gt;作者的 id&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;PostResponse&lt;/span&gt;(&lt;span class=&quot;title class_ inherited__&quot;&gt;Schema&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title: &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    author_id: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    created_at: datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    updated_at: datetime&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有經驗的開發者都知道，無論是&lt;code&gt;id&lt;/code&gt;還是&lt;code&gt;author_id&lt;/code&gt;，通常&lt;strong&gt;不是&lt;/strong&gt;給服務的使用者看的——而是&lt;strong&gt;給前端人員靈活運用&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;比如在系統的畫面中，文章可能包括作者的&lt;strong&gt;個人資訊連結&lt;/strong&gt;，點進去可以看到作者資訊。此時前端必須&lt;strong&gt;透過 id&lt;/strong&gt;，再呼叫另一支 API「取得用戶資訊」來獲得額外的內容。&lt;/p&gt;
&lt;p&gt;如果額外資訊很多，這樣的「&lt;strong&gt;解耦&lt;/strong&gt;」設計是非常合理的。但如果我們希望&lt;strong&gt;一併呈現&lt;/strong&gt;作者的「&lt;strong&gt;必要資訊&lt;/strong&gt;」，那分次呼叫的設計就&lt;strong&gt;略嫌拖沓&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以我們需要&lt;strong&gt;巢狀結構&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;API 可以直接在回應中，嵌入作者的「必要資訊」，這樣用戶就不必再進行多次請求。這裡我們以一併顯示作者的「&lt;strong&gt;名字&lt;/strong&gt;」和「&lt;strong&gt;email&lt;/strong&gt;」為例。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 13：回應（一）Django Ninja 處理 HTTP 回應概論</title>
    <link href="https://blog.kyomind.tw/django-ninja-13/"/>
    <id>https://blog.kyomind.tw/django-ninja-13/</id>
    <published>2024-09-25T06:37:21.000Z</published>
    <updated>2024-09-26T09:35:38.355Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>這一篇要正式進入「<strong>HTTP 回應</strong>」環節，也就是第三小節。</p><p>本節將透過 4 篇文章，介紹 Django Ninja <strong>如何處理 HTTP 回應</strong>：</p><ul><li>卷 13：回應（一）Django Ninja 處理 HTTP 回應概論</li><li>卷 14：回應（二）Nested Response</li><li>卷 15：回應（三）為什麼不使用 ModelSchema？——相比 DRF，我更偏愛 Django Ninja 的理由</li><li>卷 16：回應（四）Resolver 方法——欄位資料格式化</li></ul><p>我們會講述更多 Schema 用法，透過這些技巧，你能夠精確地控制 API 的輸出格式。無論是<strong>單一物件回應</strong>，還是複雜的<strong>嵌套結構</strong>，接下來都會一一提及。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/5">這個 PR</a>。</p><span id="more"></span><hr><p>本文將一步一步，從簡單到複雜，介紹如何透過 Django Ninja 建立 HTTP 回應。</p><p>並且用既有的 <strong>3 個 API</strong> 進行示範（<strong>會依需求為它們增補不同內容</strong>）：</p><ol><li>新增文章：示範<strong>簡單回應</strong>，加上狀態碼。</li><li>取得單一文章：示範<strong>單一物件回應</strong>，需要 Schema 與定義<code>response=</code>參數。</li><li>取得文章列表：示範<strong>多個物件回應</strong>。</li></ol><p>開始吧！</p><h2 id="一、簡單回應：新增文章"><a href="#一、簡單回應：新增文章" class="headerlink" title="一、簡單回應：新增文章"></a>一、簡單回應：新增文章</h2><p>先來看最簡單的回應格式，這個例子會展示如何<strong>回應一個 Python 字典</strong>，並手動設定 HTTP 回應狀態碼。</p><p>以「新增文章」API 為例：（省略部分程式碼）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_post</span>(<span class="params">...</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;id&#x27;</span>: post.<span class="built_in">id</span>, <span class="string">&#x27;title&#x27;</span>: post.title&#125;</span><br></pre></td></tr></table></figure><p>這裡回應的是一個 Python 字典，事實上，你<strong>可以</strong> return「<strong>任何能夠 JSON 序列化</strong>」的 Python 資料。（所以 Django 模型物件不行，因為它無法直接序列化）</p><p>因此，以下這些都可以 return：</p><ul><li>單純的字串：<code>&quot;Hello World !&quot;</code></li><li>Python list：<code>[1 , 2 , 3]</code></li><li>巢狀的資料結構：<code>&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30, &quot;hobbies&quot;: [&quot;reading&quot;, &quot;swimming&quot;]&#125;</code></li></ul><p>這些都會被 Django Ninja 自動<strong>序列化為 JSON 格式</strong>，並作為 API 的回應。</p><hr><h2 id="為回應加上-HTTP-狀態碼"><a href="#為回應加上-HTTP-狀態碼" class="headerlink" title="為回應加上 HTTP 狀態碼"></a>為回應加上 HTTP 狀態碼</h2><p>View 函式處理回應，往往要<strong>加入 HTTP 狀態碼</strong>。尤其在有<strong>多種回應狀態</strong>的時候，需要透過狀態碼來<strong>區分</strong>。</p><p>做法很簡單，就是在回應的內容前面直接加上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">201</span>, &#123;<span class="string">&#x27;id&#x27;</span>: post.<span class="built_in">id</span>, <span class="string">&#x27;title&#x27;</span>: post.title&#125;</span><br></pre></td></tr></table></figure><p>如此一來，函式的回傳型別就從原來的<code>dict</code>變成<code>tuple</code>了。</p><p>所以我們函式簽名的 type hints 也要跟著修正：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_post</span>(<span class="params">...</span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">dict</span>]:</span><br></pre></td></tr></table></figure><p>如果你沒有加前面這個狀態碼數字，Django Ninja 就將其<strong>預設為 200。</strong></p><p>值得注意的是，當你的 view 函式要 return「<strong>非 200</strong>」回應時，必須在<code>router</code>裝飾器聲明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span>, response=&#123;<span class="number">201</span>: <span class="built_in">dict</span>&#125;</span>)  </span><span class="comment"># 這裡</span></span><br></pre></td></tr></table></figure><p><code>response=&#123;201: dict&#125;</code>就是聲明的方式，採用 Python 字典來一一對應<strong>狀態碼</strong>與<strong>回傳內容格式</strong>。</p><blockquote><p>創作當時，這部分的範例專案程式碼還未補上，所以這個 API 無法正常回應😅，特此提醒。</p></blockquote><hr><p>上述第一種回應很簡單，不過大部分 API 回應都<strong>沒這麼單純</strong>。</p><p>我們來看第二種回應。</p><h2 id="二、單一模型物件回應：取得單一文章"><a href="#二、單一模型物件回應：取得單一文章" class="headerlink" title="二、單一模型物件回應：取得單一文章"></a>二、單一模型物件回應：取得單一文章</h2><p>開發 Django API，回應中的資料，有很大部分是<strong>從 Django 模型物件序列化</strong>而來。</p><p>但通常我們不會直接將資料庫中的所有資訊傳送給前端。相反，我們會進行<strong>欄位篩選、驗證或格式轉換</strong>。</p><p>這樣不僅能夠精確控制 API 的輸出，還能確保資料的正確與安全性。</p><p>Django Ninja 中，這些「篩選、驗證、格式轉換」等需求，都是透過 Schema 實現。</p><p>我們來為「單得取一文章」API 設計一個回應格式，<strong>使用 Schema</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post/schemas.py</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    author_id: <span class="built_in">int</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    updated_at: datetime</span><br></pre></td></tr></table></figure><p>這個<code>PostResponse</code> Schema 包含了<code>Post</code>幾乎所有的欄位。</p><p>注意，<strong>Schema 定義將決定輸出的欄位</strong>。如果 Schema 中只有<code>id</code>一欄，那輸出結果就只會有該欄的資料。</p><p>接著，我們在 view 函式中使用這個 Schema：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#123;int:post_id&#125;/&#x27;</span>, response=PostResponse</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_post</span>(<span class="params">request: HttpRequest, post_id: <span class="built_in">int</span></span>) -&gt; Post:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取得單一文章</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    post = Post.objects.get(<span class="built_in">id</span>=post_id)</span><br><span class="line">    <span class="keyword">return</span> post</span><br></pre></td></tr></table></figure><p>只有改一行！——在<code>router</code>裝飾器加上<code>response=PostSchema</code>。</p><p>有了<code>response=PostSchema</code>設定，Django Ninja 會將函式回傳的<code>Post</code>模型物件，丟給<code>PostSchema</code>進行驗證，成功之後直接轉為 JSON 格式並送回前端。</p><p>看看回應結果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1:8000/posts/2/</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1 content&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>非常好！</p><hr><h2 id="三、多個模型物件回應：取得文章列表"><a href="#三、多個模型物件回應：取得文章列表" class="headerlink" title="三、多個模型物件回應：取得文章列表"></a>三、多個模型物件回應：取得文章列表</h2><p>「<strong>清單、列表</strong>」也是 API 的常見回應形態，包含<strong>多筆資料</strong>。</p><p>我們繼續使用剛剛的<code>PostSchema</code>，不作任何更動，直接套用在「取得文章列表」這個 API。</p><p>一樣，只要更改一行即可，但與前面<strong>略有不同</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span>, response=<span class="built_in">list</span>[PostResponse]</span>)</span></span><br></pre></td></tr></table></figure><p>我們使用了<code>list[PostSchema]</code>，表示回應會是一個<code>PostSchema</code>物件的 list。</p><h3 id="Django-Ninja-自動處理-Iterable"><a href="#Django-Ninja-自動處理-Iterable" class="headerlink" title="Django Ninja 自動處理 Iterable"></a>Django Ninja 自動處理 Iterable</h3><p>然而實際上，此時你<strong>不需要</strong>「真的」return 一個 Python list，<strong>可以直接回傳 QuerySet</strong> 就好，Django Ninja 會自行處理物件的<strong>迭代與序列化</strong>。</p><p>甚至，只要你 return 的是一個 <a href="https://myapollo.com.tw/blog/python-iterable-iterator-generator/#iterable-%e6%98%af%e4%bb%80%e9%ba%bc">iterable</a>，而且 iterable 中的每一個元素，<strong>都能夠通過</strong><code>PostSchema</code>驗證（符合格式），那就足夠了！</p><p>來看看結果，因為列表太長了，我改用截圖呈現：</p><p><img src="https://i.imgur.com/vwh3t3R.png" alt="API 回應：取得文章列表"><span class="cap">API 回應：取得文章列表</span></p><hr><h2 id="多重狀態碼回應"><a href="#多重狀態碼回應" class="headerlink" title="多重狀態碼回應"></a>多重狀態碼回應</h2><p>上面提到的回應，不是 200 就是 201，但通常 API 往往還會有 400、401、403 甚至 500 等回應，如何處理它們之間的<strong>對應關係</strong>？</p><p>沒錯，就是擴大<code>response=</code>中的字典！我們直接看<a href="https://django-ninja.dev/guides/response/#multiple-response-schemas">官方文件</a>的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Token</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    token: <span class="built_in">str</span></span><br><span class="line">    expires: date</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    message: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.post(<span class="params"><span class="string">&#x27;/login&#x27;</span>, response=&#123;<span class="number">200</span>: Token, <span class="number">401</span>: Message, <span class="number">402</span>: Message&#125;</span>)</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>值得留意的是，字典的 key 不可重複，但值可以！——<code>Message</code>出現了兩次。</p><p>但我覺得這個「多重狀態碼回應」設定在實務上沒有很實用，為何？我們後續再談。</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>本文中，我們從最簡單的回應開始，逐步介紹了如何在回應中返回單一和多筆資料，並提到了 Django Ninja 如何設定多重狀態碼回應。</p><p>下一篇將探討，如何處理回應中複雜的<strong>巢狀結構</strong>，讓我們的 API 愈來愈健全。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;這一篇要正式進入「&lt;strong&gt;HTTP 回應&lt;/strong&gt;」環節，也就是第三小節。&lt;/p&gt;
&lt;p&gt;本節將透過 4 篇文章，介紹 Django Ninja &lt;strong&gt;如何處理 HTTP 回應&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷 13：回應（一）Django Ninja 處理 HTTP 回應概論&lt;/li&gt;
&lt;li&gt;卷 14：回應（二）Nested Response&lt;/li&gt;
&lt;li&gt;卷 15：回應（三）為什麼不使用 ModelSchema？——相比 DRF，我更偏愛 Django Ninja 的理由&lt;/li&gt;
&lt;li&gt;卷 16：回應（四）Resolver 方法——欄位資料格式化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們會講述更多 Schema 用法，透過這些技巧，你能夠精確地控制 API 的輸出格式。無論是&lt;strong&gt;單一物件回應&lt;/strong&gt;，還是複雜的&lt;strong&gt;嵌套結構&lt;/strong&gt;，接下來都會一一提及。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/5&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 12：請求（四）Request Body 與 Schema 介紹</title>
    <link href="https://blog.kyomind.tw/django-ninja-12/"/>
    <id>https://blog.kyomind.tw/django-ninja-12/</id>
    <published>2024-09-24T06:22:23.000Z</published>
    <updated>2024-09-24T07:18:21.402Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>經過前幾篇的介紹，我們已經學習了如何處理路徑與查詢參數。但在現實世界中，我們往往還需要處理<strong>更複雜的請求資料</strong>。</p><p>比如用戶提交的表單、上傳的檔案等等。對於 API 而言，最常見的就是 JSON 格式的 <strong>request body</strong>。</p><p>這一篇將探討 Django Ninja 如何處理 request body，並介紹如何透過 Schema 來定義與驗證資料。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/4">這個 PR</a>。</p><hr><h2 id="一、什麼是-Request-Body？"><a href="#一、什麼是-Request-Body？" class="headerlink" title="一、什麼是 Request Body？"></a>一、什麼是 Request Body？</h2><p><strong>Request body</strong> 指的是隨著 HTTP 請求一同傳送的資料，通常用於<code>POST</code>、<code>PUT</code>等<strong>需要建立或更新「資源」的請求。</strong></p><p>這些資料不會出現在 URL 中，而是以 JSON 或其他格式（如 XML、form-data）作為請求的主體。</p><p>例如，當用戶要發表一篇新文章時，可能會傳送以下 JSON 格式的 request body：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我的第一篇文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;這是我在忍者論壇的第一篇文章，希望大家喜歡！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>這個 request body 包含了<code>title</code>和<code>content</code>兩個欄位，Django Ninja 將協助我們處理這些資料並進行驗證。</p><span id="more"></span><hr><h2 id="二、範例專案改動"><a href="#二、範例專案改動" class="headerlink" title="二、範例專案改動"></a>二、範例專案改動</h2><p>我們要在<a href="https://github.com/kyomind/Django-Ninja-Tutorial">範例專案</a>中建立一個<strong>接收 request body</strong> 的 API——「新增文章」。</p><p>此外，還要在 Django post app 目錄下，新增一個 Python 模組：<code>schemas.py</code>。這是用來放置 API 中<strong>所有用到的 Schema</strong> 的地方。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── NinjaForum</span><br><span class="line">│   ├── ...</span><br><span class="line">├── post</span><br><span class="line">│   ├── api.py</span><br><span class="line">│   ├── schemas.py <span class="comment"># 新增這個模組</span></span><br><span class="line">│   ├── ...</span><br></pre></td></tr></table></figure><p>具體程式碼，我們會在接下來的說明中介紹。</p><p>從本篇開始，分支名稱不再使用中文，因為中文分支名稱會<strong>一直被 GitHub 提醒：</strong></p><blockquote><p>The head ref <strong>may contain hidden characters</strong>: “11-\u8ACB\u6C42\uFF08\u4E09\uFF09Query-Parameters”</p></blockquote><p>而且應該也很少人使用中文來命名 git 分支！當初用中文是為了讀者比較好讀🥹</p><p>所以從這個分支開始，改成<code>數字+英文</code>，比如本篇的「<code>12-request-body</code>」。但 PR 的標題仍維持中文。</p><hr><h2 id="三、使用-Schema-定義與驗證-Request-Body"><a href="#三、使用-Schema-定義與驗證-Request-Body" class="headerlink" title="三、使用 Schema 定義與驗證 Request Body"></a>三、使用 Schema 定義與驗證 Request Body</h2><p>與 FastAPI 相同，Django Ninja 使用 <a href="https://docs.pydantic.dev/latest/api/base_model/">Pydantic BaseModel</a> 來處理請求 body。</p><p>不過因為 BaseModel 這個名稱容易和 Django 的 Models 混淆，所以 Django Ninja 將其重新命名為 Schema。</p><p>Schema 繼承自 BaseModel，因此兩者的<strong>實際內涵非常接近</strong>（Django Ninja 有自己加一點料）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Django Ninja 原始碼</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Schema</span>(BaseModel, metaclass=ResolverMetaclass):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>回到專案，讓我們來看專案中的例子，這是定義「新增文章」API 的 request body 的 Schema：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post/schemas.py</span></span><br><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> Schema</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreatePostRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    user_id: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>這個 Schema 要求 body 資料<strong>必須包含</strong>這三個欄位：<code>title</code>、<code>content</code>和<code>user_id</code>，而且<strong>資料的型別也要相符</strong>。</p><h3 id="在-View-函式中使用-Schema"><a href="#在-View-函式中使用-Schema" class="headerlink" title="在 View 函式中使用 Schema"></a>在 View 函式中使用 Schema</h3><p>定義好了「請求」Schema，就可以在 view 函式中以「<strong>函式參數</strong>」的形式使用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> post.schemas <span class="keyword">import</span> CreatePostRequest</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.post(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_post</span>(<span class="params">..., payload: CreatePostRequest</span>):  <span class="comment"># 這裡</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>我們將函式<code>payload</code>參數的 type hint 設定為我們剛剛定義的<code>CreatePostRequest</code>。</p><p>當請求發送到這個 API 時，Django Ninja 會透過<code>CreatePostRequest</code>這個 Schema 來<strong>解析</strong>（<strong>parsing</strong>）並<strong>驗證</strong> body 中的資料。</p><p>驗證成功後，再將資料傳入 view 函式的<code>payload</code>。此時<strong>函式內部</strong>的<code>payload</code>參數，本質上是一個 Schema（即 Pydantic BaseModel）物件。</p><h3 id="自動資料驗證與錯誤處理"><a href="#自動資料驗證與錯誤處理" class="headerlink" title="自動資料驗證與錯誤處理"></a>自動資料驗證與錯誤處理</h3><p>如果請求 body 中有欄位缺少，或者資料的型別不對，Django Ninja 會自動返回 <strong>422 回應</strong>，並提供<strong>具體的錯誤資訊</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;missing&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;body&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;payload&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;content&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Field required&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>錯誤訊息表示：body 中缺少了<code>content</code>這個 field。</p><hr><h2 id="四、可選的（Optional）欄位與預設值"><a href="#四、可選的（Optional）欄位與預設值" class="headerlink" title="四、可選的（Optional）欄位與預設值"></a>四、可選的（Optional）欄位與預設值</h2><p>在實際 API 開發中，<strong>並不是</strong>所有請求欄位都是必須的。</p><p>我們可以透過 Pydantic 與 type hints 來定義<strong>可選欄位</strong>。假設，現在文章的內容是完全可選的：（留意<code>content</code>欄位）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreatePostRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    user_id: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>使用<code>=</code>運算子，將<code>content</code>欄位的<strong>預設值</strong>設定為<code>None</code>，該欄位<strong>就會變成可選欄位</strong>。此時<code>content</code>的 type hints 也要改為<code>str | None</code>。</p><p>值得一提的是，如果 Schema 用在<strong>請求</strong>，這樣設定即使<strong>能通過驗證</strong>，你也要注意後續對應的 Django Model 欄位（也就是 db 欄位）<strong>是否允許 NULL</strong>。不然還是會出錯：</p><blockquote><p>django.db.utils.IntegrityError: NOT NULL constraint failed: post_post.content</p></blockquote><p>除了將欄位設為可選，也可以直接<strong>給定預設值</strong>，比如這裡的空字串。在使用者未輸入時，就會直接填入預設值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreatePostRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    user_id: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>然而，除了預設值為<code>None</code>，在 Schema 中<strong>給定預設值</strong>的行為要「<strong>非常慎用</strong>」。這部分我們在〈卷 18：用 Pydantic Field 設定範例與預設值〉還會再次討論。</p><hr><h2 id="五、Django-Ninja-判斷參數的順序"><a href="#五、Django-Ninja-判斷參數的順序" class="headerlink" title="五、Django Ninja 判斷參數的順序"></a>五、Django Ninja 判斷參數的順序</h2><p>你是否想過，一個 view 函式參數這麼多種，Django Ninja 怎麼知道<strong>誰要對應誰</strong>？</p><p>事實上，Django Ninja 確實會根據 view 函式的<strong>參數簽名</strong>，自動判斷參數的來源（究竟是路徑參數、查詢參數或請求 body）。其<a href="https://django-ninja.dev/guides/input/body/#request-body-path-query-parameters">判斷順序</a>如下：</p><ol><li><strong>路徑參數</strong>：任何定義在 URL path 中的變數（比如<code>/items/&#123;id&#125;</code>中的<code>id</code>）會<strong>優先被識別為路徑參數</strong>。</li><li><strong>查詢參數</strong>：函式中的其他<strong>單數類型</strong>參數（比如<code>int</code>、<code>float</code>、<code>bool</code>、<code>str</code>，而不是<code>list</code>、<code>dict</code>），若<strong>未標註為路徑參數</strong>，則會被識別為查詢參數。</li><li><strong>Request body</strong>：Schema 型別參數，才會被視為請求 body。</li></ol><p>原則上，view 函式<strong>只能有一個</strong> Schema 參數。畢竟一個請求就只有一個 body 而已。</p><hr><h2 id="第二節尾聲"><a href="#第二節尾聲" class="headerlink" title="第二節尾聲"></a>第二節尾聲</h2><p>本節的內容已差不多結束。</p><p>在這一節中，我們學習了如何使用 Django Ninja 處理 HTTP 請求，並介紹了 Schema 的基本用法。</p><p>Schema 的用法與變化還很多，這裡只是「牛刀小試」而已。在第三節「HTTP 回應」中，你將看到更多關於 Schema 的設定。</p><p>進入下一節之前，我們先進行中場休息——和<strong>一些準備</strong>。</p><hr><h2 id="中場休息與準備"><a href="#中場休息與準備" class="headerlink" title="中場休息與準備"></a>中場休息與準備</h2><p>下一節，我們要讓專案的 API <strong>真正運作起來</strong>，還記得前面提到為何目前無法使用嗎？</p><ol><li>沒有 db 資料。</li><li>沒有建立 Schema。</li></ol><p>我們已經學到怎麼使用 Schema 了——雖然<strong>還不全面</strong>。那「db 資料」問題也需要獲得解決。</p><h3 id="Django-Fixtures"><a href="#Django-Fixtures" class="headerlink" title="Django Fixtures"></a>Django Fixtures</h3><p>我們固然可以透過呼叫 POST API 去<strong>手動新增</strong>用戶與文章資料，但太麻煩了！更別說，專案目前<strong>還沒有</strong>「新增使用者」這個 API。</p><p>所以，不用麻煩了。</p><p>我們直接透過 <a href="https://docs.djangoproject.com/en/5.1/topics/db/fixtures/">Django fixtures</a> 來匯入由我預先定義好的<strong>假資料</strong>。</p><p>有關 Django fixtures 的介紹，可參考文章〈<a href="https://blog.kyomind.tw/django-fixtures/">用 Django Fixture 匯入與導出資料</a>〉。</p><p>在下一篇<code>13-response</code>分支進度底下，你已經可以看到我<strong>導出</strong>的 fixtures 資料：</p><ol><li><code>users.json</code>。</li><li><code>posts.json</code>。</li></ol><p>想要使用它們，直接<strong>依序匯入</strong>即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py loaddata users.json</span><br><span class="line">python manage.py loaddata posts.json</span><br></pre></td></tr></table></figure><p>一定要<strong>先匯入</strong> users，否則文章沒有作者會<strong>關聯失敗</strong>。</p><p>匯入完成後，你會獲得 2 個使用者——Alice 和 Bob，還有他們各發表的 30 篇文章。</p><p><img src="https://i.imgur.com/dHCBf4T.png"></p><p>呃，夾雜了第一篇我的測試文章，請多包涵😅</p><p>成功匯入後，我們就可以繼續了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;經過前幾篇的介紹，我們已經學習了如何處理路徑與查詢參數。但在現實世界中，我們往往還需要處理&lt;strong&gt;更複雜的請求資料&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如用戶提交的表單、上傳的檔案等等。對於 API 而言，最常見的就是 JSON 格式的 &lt;strong&gt;request body&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這一篇將探討 Django Ninja 如何處理 request body，並介紹如何透過 Schema 來定義與驗證資料。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/4&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、什麼是-Request-Body？&quot;&gt;&lt;a href=&quot;#一、什麼是-Request-Body？&quot; class=&quot;headerlink&quot; title=&quot;一、什麼是 Request Body？&quot;&gt;&lt;/a&gt;一、什麼是 Request Body？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Request body&lt;/strong&gt; 指的是隨著 HTTP 請求一同傳送的資料，通常用於&lt;code&gt;POST&lt;/code&gt;、&lt;code&gt;PUT&lt;/code&gt;等&lt;strong&gt;需要建立或更新「資源」的請求。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這些資料不會出現在 URL 中，而是以 JSON 或其他格式（如 XML、form-data）作為請求的主體。&lt;/p&gt;
&lt;p&gt;例如，當用戶要發表一篇新文章時，可能會傳送以下 JSON 格式的 request body：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;我的第一篇文章&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;這是我在忍者論壇的第一篇文章，希望大家喜歡！&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;這個 request body 包含了&lt;code&gt;title&lt;/code&gt;和&lt;code&gt;content&lt;/code&gt;兩個欄位，Django Ninja 將協助我們處理這些資料並進行驗證。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 11：請求（三）查詢參數（Query Parameters）</title>
    <link href="https://blog.kyomind.tw/django-ninja-11/"/>
    <id>https://blog.kyomind.tw/django-ninja-11/</id>
    <published>2024-09-23T03:03:49.000Z</published>
    <updated>2024-09-23T04:09:31.550Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>上一篇我們討論了，請求 URL 中關於<strong>路徑參數</strong>的處理方式。</p><p>本文將介紹<strong>查詢參數（query parameters）</strong>，這是 RESTful API 中用來傳遞<strong>過濾條件</strong>等<strong>額外資訊</strong>的重要部分。</p><p>處理查詢參數在 Django Ninja 中非常簡單直觀，我們可以透過多種方式來達成。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/3">這個 PR</a>。</p><hr><h2 id="一、什麼是查詢參數？"><a href="#一、什麼是查詢參數？" class="headerlink" title="一、什麼是查詢參數？"></a>一、什麼是查詢參數？</h2><p>查詢參數是 URL 中的可選參數，通常位於 path 的後方，以<code>?key=value</code>的形式出現，用來傳遞<strong>額外的資訊</strong>。</p><p>例如，當我們需要過濾某位作者的文章時，URL 的 path 可能會這樣寫：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/posts/?author=john</span><br></pre></td></tr></table></figure><p>URL 傳遞了一個查詢參數<code>author=john</code>，表示我們希望過濾出由 John 撰寫的文章。</p><span id="more"></span><h2 id="二、範例專案改動"><a href="#二、範例專案改動" class="headerlink" title="二、範例專案改動"></a>二、範例專案改動</h2><p>為了更真實地介紹<strong>查詢參數</strong>，我們需要修改原先的「取得所有文章」API，加入簡單的「<strong>過濾</strong>」功能。</p><p>附帶一提，複雜的過濾功能，我們會在〈卷 23：過濾（Filtering）〉進行介紹。</p><p>修改後，當請求帶有查詢參數時，API 就能透過這些參數來<strong>限制查詢結果</strong>。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params">request: HttpRequest, title: <span class="literal">None</span> | <span class="built_in">str</span> = <span class="literal">None</span></span>):</span><br><span class="line">    posts = Post.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">if</span> title:</span><br><span class="line">        posts = posts.<span class="built_in">filter</span>(title__icontains=title)  <span class="comment"># 實現過濾邏輯</span></span><br><span class="line">    <span class="keyword">return</span> posts</span><br></pre></td></tr></table></figure><p>這裡我們以「<strong>文章標題</strong>」來進行過濾。</p><blockquote><p>小提醒：專案 API <strong>目前還無法使用</strong>，一來 db 沒有資料，二來我們還沒有撰寫相關的 Schema。現階段僅作為閱讀理解上的參考。不過別擔心，我們很快會讓它 work ☺️</p></blockquote><p>好，改完程式碼，接下來進行講解。</p><hr><h2 id="三、在-Django-Ninja-中使用-Query-Parameters"><a href="#三、在-Django-Ninja-中使用-Query-Parameters" class="headerlink" title="三、在 Django Ninja 中使用 Query Parameters"></a>三、在 Django Ninja 中使用 Query Parameters</h2><p>在 Django Ninja 中，處理<strong>查詢參數</strong>的最簡單方式，是直接將它們作為 view 函式的<strong>可選參數——透過參數預設值</strong><code>None</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params">request: HttpRequest, title: <span class="literal">None</span> | <span class="built_in">str</span> = <span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>在這個例子中，<code>title</code>參數被定義為一個<strong>可選的字串</strong>（<code>None | str = None</code>）。</p><ul><li>如果 URL 中<strong>包含</strong><code>title</code>查詢參數，Django Ninja 會自動將其值作為引數，並傳遞給<code>get_posts</code>函式。</li><li>如果 URL 中<strong>沒有</strong>這個查詢參數，則函式<strong>不會收到引數</strong>，此時<code>title</code>在函式中的值將會是<code>None</code>——因為它有<strong>預設值</strong>。</li></ul><p>關於這個例子，我們<strong>還需要留意</strong>以下這些地方：</p><ol><li>查詢參數<strong>不需要</strong>寫在<code>router</code>裝飾器的<code>path</code>參數路徑中。</li><li>查詢參數<strong>通常有預設值</strong>，無論是具體的值還是上述的<code>None</code>。如果<strong>缺少預設值</strong>，當查詢參數不存在時，Django Ninja 會返回 422 回應。</li><li>當預設值為<code>None</code>時，需留意 type hints 的寫法：<code>None | str = None</code>。（相當於<code>Optional[str] = None</code>）</li><li>查詢參數和路徑參數一樣，都會依照函式的 type hints 進行型別轉換。如果沒有標記型別，那兩者的<strong>預設型別皆為</strong><code>str</code>——因為 URL 本質都是<strong>字串</strong>。</li></ol><p>以上寫法簡單直接，適用於大多數情況。</p><p>然而，當我們需要對查詢參數進行<strong>更複雜的驗證或限制</strong>時，就需要使用進階的技巧——<code>Query</code>。</p><hr><h2 id="四、使用-Query-物件"><a href="#四、使用-Query-物件" class="headerlink" title="四、使用 Query 物件"></a>四、使用 Query 物件</h2><p>當我們需要進行更詳細的控制，例如限制查詢參數的長度、範圍，或為 API 文件加上額外資訊時，可以使用<code>Query</code>來設定、處理查詢參數。</p><p>必須承認，我之前開發其實也很少用到<code>Query</code>，但了解它 <strong>20% 最重要的特性</strong>，肯定會很有幫助。</p><h3 id="Query類別介紹"><a href="#Query類別介紹" class="headerlink" title="Query類別介紹"></a><code>Query</code>類別介紹</h3><p>透過<code>Query</code>物件，我們可以對查詢參數進行更精細的定義與驗證。</p><p>事實上，如果你看過 Django Ninja 的<a href="https://github.com/vitalik/django-ninja/blob/master/ninja/params/functions.py#L50">原始碼</a>，你會發現：它其實是一個<strong>函式</strong>。只不過會<strong>返回相同名稱的類別物件</strong>。為了解說方便，我們暫且當它是類別吧！</p><p>參考這個修改後的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> Query, Router</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params">request: HttpRequest, title: <span class="literal">None</span> | <span class="built_in">str</span> = Query(<span class="params"><span class="literal">None</span></span>)</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>它和原來的寫法是「<strong>等價</strong>」的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params">request: HttpRequest, title: <span class="literal">None</span> | <span class="built_in">str</span> = <span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>你可能會覺得奇怪，那我沒事幹嘛要換一個更複雜的寫法，卻沒有額外的好處？</p><p>這當然是因為，更複雜的寫法，能做的事情也更多。</p><h3 id="限制查詢字串的長度"><a href="#限制查詢字串的長度" class="headerlink" title="限制查詢字串的長度"></a>限制查詢字串的長度</h3><p>比如我們想要限制<code>title</code>這個查詢字串，不可以太長也不可以太短。</p><p>假設要求長度在 2 到 10 個字元好了。</p><p>此時你就可以這樣寫：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params"></span></span><br><span class="line"><span class="params">    request: HttpRequest,</span></span><br><span class="line"><span class="params">    title: <span class="literal">None</span> | <span class="built_in">str</span> = Query(<span class="params"><span class="literal">None</span>, min_length=<span class="number">2</span>, max_length=<span class="number">10</span></span>),</span></span><br><span class="line"><span class="params"></span>):</span><br></pre></td></tr></table></figure><p>這個範例中，我們使用了<code>Query</code>來定義<code>title</code>查詢參數，並額外給予了<code>min_length</code>和<code>max_length</code>這兩個初始化<code>Query</code>的參數設定。</p><p>這樣做可以確保<code>title</code>查詢參數的長度在 2 到 10 個字元之間。</p><p>如果用戶輸入的<code>title</code>不符合這個長度要求，如之前所述，Django Ninja 會自動返回一個<strong>狀態碼為 422 的回應</strong>，無需我們手動處理這些驗證邏輯與相關回應。</p><h3 id="Query的其他常用參數"><a href="#Query的其他常用參數" class="headerlink" title="Query的其他常用參數"></a><code>Query</code>的其他常用參數</h3><p>除了<code>min_length</code>和<code>max_length</code>，<code>Query</code>還提供了許多實用的參數，供你限制查詢條件、為 API 文件補充額外資訊，常見的有：</p><ul><li><code>gt</code>、<code>ge</code>：查詢參數的值必須大於或大於等於某個數字。</li><li><code>lt</code>、<code>le</code>：查詢參數的值必須小於或小於等於某個數字。</li><li><code>example</code>、<code>examples</code>：為 API 文件提供查詢<strong>參數的範例值</strong>，讓用戶更容易理解參數用法。</li></ul><p>這部分我們就不示範了。</p><hr><h2 id="小結與下一步"><a href="#小結與下一步" class="headerlink" title="小結與下一步"></a>小結與下一步</h2><p>查詢參數是 RESTful API 常見且重要的組成部分。Django Ninja 中，我們可以透過簡單的方式來處理查詢參數，也可以使用<code>Query</code>進行更高級的驗證和控制。</p><p>了解了 Django Ninja 如何處理 URL 的相關參數後，接下來則是<strong>重頭戲</strong>。</p><p>下一步，我們將探討如何在 Django Ninja 中處理 HTTP <strong>request body</strong>，介紹如何使用 Schema 來進行<strong>資料驗證與反序列化</strong>，讓我們能夠靈活地處理複雜的請求資訊。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇我們討論了，請求 URL 中關於&lt;strong&gt;路徑參數&lt;/strong&gt;的處理方式。&lt;/p&gt;
&lt;p&gt;本文將介紹&lt;strong&gt;查詢參數（query parameters）&lt;/strong&gt;，這是 RESTful API 中用來傳遞&lt;strong&gt;過濾條件&lt;/strong&gt;等&lt;strong&gt;額外資訊&lt;/strong&gt;的重要部分。&lt;/p&gt;
&lt;p&gt;處理查詢參數在 Django Ninja 中非常簡單直觀，我們可以透過多種方式來達成。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/3&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、什麼是查詢參數？&quot;&gt;&lt;a href=&quot;#一、什麼是查詢參數？&quot; class=&quot;headerlink&quot; title=&quot;一、什麼是查詢參數？&quot;&gt;&lt;/a&gt;一、什麼是查詢參數？&lt;/h2&gt;&lt;p&gt;查詢參數是 URL 中的可選參數，通常位於 path 的後方，以&lt;code&gt;?key=value&lt;/code&gt;的形式出現，用來傳遞&lt;strong&gt;額外的資訊&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;例如，當我們需要過濾某位作者的文章時，URL 的 path 可能會這樣寫：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/posts/?author=john&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;URL 傳遞了一個查詢參數&lt;code&gt;author=john&lt;/code&gt;，表示我們希望過濾出由 John 撰寫的文章。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 10：請求（二）路徑參數（Path Parameters）</title>
    <link href="https://blog.kyomind.tw/django-ninja-10/"/>
    <id>https://blog.kyomind.tw/django-ninja-10/</id>
    <published>2024-09-22T03:11:34.000Z</published>
    <updated>2024-09-23T06:45:24.366Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>上一篇文章中，我們介紹了 Django Ninja 如何處理 HTTP 請求，並強調了它與 Python type hints 之間的緊密結合。</p><p>本篇將探討 Django Ninja 中，<strong>路徑參數（<a href="https://django-ninja.dev/guides/input/path-params/">path parameters</a>）</strong>的應用與細節，這在處理 HTTP 請求時<strong>極為常見</strong>，尤其是在 RESTful API 中。</p><p>本文對範例專案的程式碼改動，都集中在<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/2">這個 PR</a>。</p><hr><h2 id="一、什麼是-Path-Parameters？"><a href="#一、什麼是-Path-Parameters？" class="headerlink" title="一、什麼是 Path Parameters？"></a>一、什麼是 Path Parameters？</h2><p>Path parameters 是構成 URL 的一部分，它們位於網址路徑（path）中的<strong>特定</strong>位置，<strong>根據不同的值（參數）</strong>來決定傳入的內容，用來<strong>動態指定資源</strong>。</p><p>我們不妨先了解一下，<strong>path</strong> 在整個 URL 中的位置：（圖片取自<a href="https://en.wikipedia.org/wiki/URL">維基百科</a>）</p><p><img src="https://i.imgur.com/o2JxS9I.png" alt="點圖可放大"><span class="cap">點圖可放大</span></p><p>從圖中可以看出，路徑（path）是 URL 的一部分——而且是<strong>必要部分</strong>。</p><p>不過請注意，path parameters 只是 Django、Django Ninja 這類框架所提供的一種「<strong>功能</strong>」。對 URL 本身而言，path 就是 path，也就是<strong>單純的字串</strong>而已。</p><h3 id="路徑參數例子"><a href="#路徑參數例子" class="headerlink" title="路徑參數例子"></a>路徑參數例子</h3><p>舉一個簡單的例子，讓我們可以更好地理解 path parameters 的概念。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#123;post_id&#125;/&#x27;</span></span>)  </span><span class="comment"># &#123;post_id&#125; 就是路徑參數</span></span><br></pre></td></tr></table></figure><p>實際請求時，<code>123</code>就是<strong>透過</strong>路徑參數，代表特定文章的 id：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /posts/123</span><br></pre></td></tr></table></figure><p>可想而知，如果是<code>456</code>或<code>789</code>，你會得到不同的結果。</p><p>這使得 API 具有<strong>彈性</strong>，可以針對不同的資源進行操作，而<strong>不必為每一個資源建立不同的路由</strong>——它們的端點與路由<strong>都是相同的</strong>，只是「<strong>參數</strong>」不同。</p><span id="more"></span><hr><h2 id="二、範例專案改動"><a href="#二、範例專案改動" class="headerlink" title="二、範例專案改動"></a>二、範例專案改動</h2><p>接下來，讓我們透過<a href="https://github.com/kyomind/Django-Ninja-Tutorial">範例專案</a>的程式碼，一邊講解一邊演示本文內容。</p><p>但我們要先進行兩個改動。</p><h3 id="改動一：取消一級路由前綴"><a href="#改動一：取消一級路由前綴" class="headerlink" title="改動一：取消一級路由前綴"></a>改動一：取消一級路由前綴</h3><p>取消一級路由前綴<code>/posts/</code>和<code>/user/</code>，讓 view 函式的 router 裝飾器上的路徑，更加完整、好讀。</p><p>本來是這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/&#123;post_id&#125;/&#x27;</span></span>)  </span><span class="comment"># 前綴路由在專案一級路由定義了</span></span><br></pre></td></tr></table></figure><p>現在是這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#123;post_id&#125;/&#x27;</span></span>)  </span><span class="comment"># 全部改在 app 的二級路由定義</span></span><br></pre></td></tr></table></figure><p>注意，這是為了<strong>提升教學體驗</strong>，工作中我們通常不會這麼做，不然就失去了<strong>模組化路由</strong>的優勢。</p><h3 id="改動二：新增-API"><a href="#改動二：新增-API" class="headerlink" title="改動二：新增 API"></a>改動二：新增 API</h3><p>為了示範 path parameters，我們必須有一個實踐這個功能的 API。</p><p>我們新增一個「<strong>取得單一文章資訊</strong>」API。</p><hr><p>好，先這樣，我們可以開始了解 path parameters 了。</p><p>以下程式碼皆取自於範例專案。</p><h2 id="三、在-Django-Ninja-中使用-Path-Parameters"><a href="#三、在-Django-Ninja-中使用-Path-Parameters" class="headerlink" title="三、在 Django Ninja 中使用 Path Parameters"></a>三、在 Django Ninja 中使用 Path Parameters</h2><p>在 Django Ninja 中，<strong>定義路徑參數</strong>非常簡單。透過 router 裝飾器與 type hints，我們可以輕鬆處理這些參數，自動進行類型轉換。</p><h3 id="定義「帶有路徑參數」的-API"><a href="#定義「帶有路徑參數」的-API" class="headerlink" title="定義「帶有路徑參數」的 API"></a>定義「帶有路徑參數」的 API</h3><p>讓我們看看如何在 Django Ninja 中定義一個帶有路徑參數的 API：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#123;post_id&#125;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_post</span>(<span class="params">request: HttpRequest, post_id: <span class="built_in">int</span></span>) -&gt; Post:</span><br><span class="line">    post = Post.objects.get(<span class="built_in">id</span>=post_id)</span><br><span class="line">    <span class="keyword">return</span> post</span><br></pre></td></tr></table></figure><p>範例中，<code>&#123;post_id&#125;</code>是一個路徑參數，<strong>整個 path 字串</strong>將被<strong>解析</strong>（parsing）並傳遞給<code>get_post</code><strong>函式中</strong>的<code>post_id</code>參數。</p><p>Django Ninja 會依照<strong>函式簽名</strong>中定義的類型，自動進行型別轉換。</p><p>例如，我們在 view 函式中標記了 <code>post_id: int</code>，Django Ninja 會自動將<strong>來自 URL 的字串參數</strong>轉換成<code>int</code>。</p><p>換言之，處理 path parameters 的流程，同時具有<strong>兩種效果</strong>：</p><ol><li><strong>參數型別驗證</strong>：避免前端傳來<code>post_id</code>內容是<strong>錯誤的型別</strong>，而在 view 函式內部<strong>還繼續嘗試處理這個值</strong>，直到發生錯誤。</li><li><strong>View 函式內部的自動型別轉換</strong>：省下在函式內自行轉換的功夫。</li></ol><hr><h2 id="四、與-Django-原生-Path-Converters-兼容"><a href="#四、與-Django-原生-Path-Converters-兼容" class="headerlink" title="四、與 Django 原生 Path Converters 兼容"></a>四、與 Django 原生 Path Converters 兼容</h2><p>Django 在處理 URL 時，本來就提供了「<a href="https://docs.djangoproject.com/en/5.1/topics/http/urls/#path-converters">path converters</a>」來讓你對請求路徑進行「嚴格配對」。</p><p><strong>配對成功，才會把 HTTP 請求「轉發」給特定的 view 函式</strong>。</p><p>這裡的「嚴格」，指的是<strong>型別</strong>要<strong>與 path converter 所定義的相符</strong>，才能夠<strong>配對成功</strong>。</p><p>常見的 converters 類型包括<code>str</code>、<code>int</code>和<code>slug</code>，它們能夠限制 URL 中參數的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">&#x27;posts/&lt;int:post_id&gt;/&#x27;</span>, views.get_post),</span><br></pre></td></tr></table></figure><p><code>&lt;int:post_id&gt;</code>就是一個 path converter，它要求<code>post_id</code>必須是一個整數。</p><p>值得強調的是，path converters 的主要目的<strong>不是</strong>為了型別轉換——這只是附帶的。而是為了端點路徑的「<strong>模式比對</strong>」（pattern matching）。</p><p>在模式不符合的情況下，<strong>根本不會配對成功</strong>，當然也不會進行轉型。</p><h3 id="Django-Ninja-中的-Path-Converters"><a href="#Django-Ninja-中的-Path-Converters" class="headerlink" title="Django Ninja 中的 Path Converters"></a>Django Ninja 中的 Path Converters</h3><p>在 Django Ninja 中，這些原生的 path converters <strong>仍然可以使用</strong>，而且<strong>進一步簡化</strong>了。</p><p>直接寫在<code>router</code>裝飾器的路徑字串中即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#123;int:post_id&#125;/&#x27;</span></span>)</span></span><br></pre></td></tr></table></figure><p>如前所述，有了 path converter 後，如果<code>post_id</code>不是有效的<code>int</code> ，<strong>則 URL 模式配對將直接失敗</strong>——請求<strong>不會進入 view 函式</strong>，更不會有型別轉換。</p><p>如果沒有其他路徑被成功配對，<strong>Django 將直接返回「404 Not Found」。</strong></p><p>個人認為，在 Django Ninja 中，path converters 的功能已部分被 type hints 所取代。如果要同時使用 path converters，須留意兩者的<strong>判斷順序</strong>（path converters 先判斷）與兩者設定的型別一定要相同。</p><hr><h2 id="五、請求的基本錯誤處理"><a href="#五、請求的基本錯誤處理" class="headerlink" title="五、請求的基本錯誤處理"></a>五、請求的基本錯誤處理</h2><p>當請求中的路徑參數不符合 type hints 定義的型別時，Django Ninja 會自動返回一個<strong>帶有錯誤訊息與提示內容</strong>的 HTTP 回應，狀態碼為 422。</p><p>比如說，如果用戶請求的路徑是 <code>/posts/abc/</code>（<code>post_id</code>參數沒有給數字），將得到下列回應：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1:8000/posts/abc/</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int_parsing&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;path&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;post_id&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Input should be a valid integer, unable to parse string as an integer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>這樣的自動錯誤處理機制，不僅提高了 API 的穩定性，同時<strong>簡化了開發者的錯誤處理邏輯</strong>。</p><p>內建的 422 回應在 Django Ninja 中極為常見，省下了我們不少時間。</p><hr><h2 id="小結與下一步"><a href="#小結與下一步" class="headerlink" title="小結與下一步"></a>小結與下一步</h2><p>路徑參數是 RESTful API 中的<strong>重要組成部分</strong>，Django Ninja 透過 type hints 和自動化的錯誤處理，讓我們能夠輕鬆處理路徑中的動態參數。</p><p>此外，它與 Django 原生的 path converters 保持了<strong>良好的相容性</strong>，提供高效、簡潔的開發體驗。</p><p>下一篇，我們將深入探討<strong>查詢參數</strong>（<strong>query parameters</strong>），說明如何在 Django Ninja 中處理這些參數，進一步提升 API 的靈活性與功能。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇文章中，我們介紹了 Django Ninja 如何處理 HTTP 請求，並強調了它與 Python type hints 之間的緊密結合。&lt;/p&gt;
&lt;p&gt;本篇將探討 Django Ninja 中，&lt;strong&gt;路徑參數（&lt;a href=&quot;https://django-ninja.dev/guides/input/path-params/&quot;&gt;path parameters&lt;/a&gt;）&lt;/strong&gt;的應用與細節，這在處理 HTTP 請求時&lt;strong&gt;極為常見&lt;/strong&gt;，尤其是在 RESTful API 中。&lt;/p&gt;
&lt;p&gt;本文對範例專案的程式碼改動，都集中在&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/2&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、什麼是-Path-Parameters？&quot;&gt;&lt;a href=&quot;#一、什麼是-Path-Parameters？&quot; class=&quot;headerlink&quot; title=&quot;一、什麼是 Path Parameters？&quot;&gt;&lt;/a&gt;一、什麼是 Path Parameters？&lt;/h2&gt;&lt;p&gt;Path parameters 是構成 URL 的一部分，它們位於網址路徑（path）中的&lt;strong&gt;特定&lt;/strong&gt;位置，&lt;strong&gt;根據不同的值（參數）&lt;/strong&gt;來決定傳入的內容，用來&lt;strong&gt;動態指定資源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我們不妨先了解一下，&lt;strong&gt;path&lt;/strong&gt; 在整個 URL 中的位置：（圖片取自&lt;a href=&quot;https://en.wikipedia.org/wiki/URL&quot;&gt;維基百科&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/o2JxS9I.png&quot; alt=&quot;點圖可放大&quot;&gt;&lt;/p&gt;
&lt;p&gt;從圖中可以看出，路徑（path）是 URL 的一部分——而且是&lt;strong&gt;必要部分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不過請注意，path parameters 只是 Django、Django Ninja 這類框架所提供的一種「&lt;strong&gt;功能&lt;/strong&gt;」。對 URL 本身而言，path 就是 path，也就是&lt;strong&gt;單純的字串&lt;/strong&gt;而已。&lt;/p&gt;
&lt;h3 id=&quot;路徑參數例子&quot;&gt;&lt;a href=&quot;#路徑參數例子&quot; class=&quot;headerlink&quot; title=&quot;路徑參數例子&quot;&gt;&lt;/a&gt;路徑參數例子&lt;/h3&gt;&lt;p&gt;舉一個簡單的例子，讓我們可以更好地理解 path parameters 的概念。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@router.get(&lt;span class=&quot;params&quot;&gt;path=&lt;span class=&quot;string&quot;&gt;&amp;#x27;/posts/&amp;#123;post_id&amp;#125;/&amp;#x27;&lt;/span&gt;&lt;/span&gt;)  &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;# &amp;#123;post_id&amp;#125; 就是路徑參數&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;實際請求時，&lt;code&gt;123&lt;/code&gt;就是&lt;strong&gt;透過&lt;/strong&gt;路徑參數，代表特定文章的 id：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET /posts/123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可想而知，如果是&lt;code&gt;456&lt;/code&gt;或&lt;code&gt;789&lt;/code&gt;，你會得到不同的結果。&lt;/p&gt;
&lt;p&gt;這使得 API 具有&lt;strong&gt;彈性&lt;/strong&gt;，可以針對不同的資源進行操作，而&lt;strong&gt;不必為每一個資源建立不同的路由&lt;/strong&gt;——它們的端點與路由&lt;strong&gt;都是相同的&lt;/strong&gt;，只是「&lt;strong&gt;參數&lt;/strong&gt;」不同。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 09：請求（一）Django Ninja 處理 HTTP 請求概論（兼論 FBVs）</title>
    <link href="https://blog.kyomind.tw/django-ninja-09/"/>
    <id>https://blog.kyomind.tw/django-ninja-09/</id>
    <published>2024-09-21T02:28:23.000Z</published>
    <updated>2024-09-26T09:35:18.834Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>歡迎來到第三章第二節！</p><p>作為 API 的核心邏輯實現，<strong>view 函式</strong>無疑是 Django Ninja API 的靈魂所在。</p><p>Django Ninja 和 FastAPI、Flask 一樣，都是以 Function-Based Views（<strong>以下簡稱 FBVs</strong>）為主。所以它的學習重點，<strong>幾乎都繞圍在 view 函式的 input 和 output。</strong></p><p>換句話說，整個 Django Ninja 框架的能力，<strong>構成了 view 函式的這些關鍵部分</strong>，包括但不限於：</p><ol><li>處理 HTTP 請求的參數與 body。</li><li>處理 HTTP 回應內容的序列化與格式化。</li><li>資料驗證與錯誤處理。</li></ol><p>它們共同構成了 Django Ninja 的主要功能。</p><p>本節和下一節，將集中討論上述 3 點中的前兩點——請求與回應。至於第三點，將留到第五章再行介紹。</p><span id="more"></span><hr><h2 id="本節導覽"><a href="#本節導覽" class="headerlink" title="本節導覽"></a>本節導覽</h2><p>繼上一節的「路由」後，本節將探討 Django Ninja <strong>如何處理 HTTP 請求</strong>——如何解析 path、URL 查詢參數和 body。</p><p>本節一共有 4 篇：</p><ul><li>卷 9：請求（一）Django Ninja 處理 HTTP 請求概論（兼論 FBVs）</li><li>卷 10：請求（二）Path Parameters</li><li>卷 11：請求（三）Query Parameters</li><li>卷 12：請求（四）Request Body 與 Schema 介紹</li></ul><p>此外，因為 view 函式處理請求功能，已涉及 Django Ninja 如何使用 type hints 來驗證請求資料。我們的範例程式碼會<strong>開始加上 Python 型別提示</strong>。</p><p>Type hints 的語法以 Python 3.12 為準。</p><h2 id="官方文件"><a href="#官方文件" class="headerlink" title="官方文件"></a>官方文件</h2><p>本系列的寫作不時會參考「<a href="https://django-ninja.dev/">Django Ninja 官方文件</a>」，尤其是架構的呈現。</p><p>但文件畢竟是給<strong>全體</strong>開發者看的，<strong>並沒有充分考慮到學習的順序。</strong></p><p>而本列系主要面向<strong>入門者</strong>，所以我們會更加注重實際操作與入門者的需求，並適時補充一些背景知識，<strong>確保學習曲線能相對平緩</strong>。</p><p>此外，就框架本身，我們也會提供更多實例和解釋，讓新概念更好理解和掌握。</p><p>但無論如何，官方文件仍是你在使用 Django Ninja 時，需要時時參考的內容——雖然它寫得比 Django 或 Django REST framework 的文件，相對「簡單」很多！</p><hr><h2 id="本文主旨"><a href="#本文主旨" class="headerlink" title="本文主旨"></a>本文主旨</h2><p>本文作為第二節的概論，目標是讓你對 Django Ninja 的 view 函式與它如何處理 HTTP 請求<strong>有基本的認識</strong>。</p><p>我們將透過以下三個重點來讓你逐步熟悉：</p><ol><li>FBVs 的優點。</li><li>Django Ninja 對 HTTP 請求的處理流程。</li><li>Django Ninja 與 Type Hints 的緊密結合。</li></ol><p>話不說多，我們直接開始。</p><hr><p>Class-based views (CBVs) 和 FBVs 都是實現 <a href="https://zoejoyuliao.medium.com/%E6%AF%94%E8%BC%83-mvc-%E8%88%87-django-%E7%9A%84-mtv-6c93ea9484fc">Django MTV 架構</a> 中的 <strong>Views</strong> 手段，各有其適用場景。</p><p>CBVs 有<strong>重用程式碼</strong>優勢，適合大型專案。而 FBVs 則以<strong>簡單、直接</strong>為賣點，方便快速開發中小型專案。</p><p>兩者的比較，可參考這篇〈<a href="https://ithelp.ithome.com.tw/articles/10205779">Day27 : CBV vs. FBV</a>〉。</p><p>因為 Django Ninja 採 FBVs，本文只探討 FBVs 的優點。</p><h2 id="一、FBV-的優點"><a href="#一、FBV-的優點" class="headerlink" title="一、FBV 的優點"></a>一、FBV 的優點</h2><p>FBVs 是 Django Ninja 採用的 view 形式。與 CBVs 相比，FBVs 更加簡潔、靈活，能夠讓開發者輕鬆編寫出 API 邏輯而<strong>不需要了解太多背景知識</strong>，比如「如何正確覆寫某個 CBV 屬性」。</p><h3 id="簡潔與靈活"><a href="#簡潔與靈活" class="headerlink" title="簡潔與靈活"></a>簡潔與靈活</h3><p>FBVs <strong>不需要繼承或覆寫</strong>類別方法，所有的邏輯都集中在一個函式中。</p><p>這使得寫作和維護程式碼更加直觀。</p><p>由於 FBVs 本質是個函式，它可以更靈活地應用各種邏輯和條件，開發者能<strong>在單一函式中完全控制整個請求的處理流程</strong>，而<strong>不需要考慮類別的結構或繼承關係</strong>。</p><h3 id="容易-Debug"><a href="#容易-Debug" class="headerlink" title="容易 Debug"></a>容易 Debug</h3><p>FBVs 的程式碼相對直觀，對於初學者來說，閱讀、理解起來更加容易。發生錯誤時，你可以<strong>快速定位問題</strong>，這是 CBVs 不易達到的便利性。</p><h3 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h3><p>Django 是個功能全面的框架，但也常被批評為「笨重」。<strong>FBVs 在一定程度上緩解了這種笨重感</strong>。</p><p>試想，一個剛接觸 Django 的新手，在理解完各種框架的環境設定後，還要深入 CBVs 的世界，是否太過沉重？</p><p>總之，如果你問我，我絕對更偏好 FBVs——而且「<strong>輕量化</strong>」是現代開發的趨勢。</p><hr><h2 id="二、Django-Ninja-對-HTTP-請求的處理流程"><a href="#二、Django-Ninja-對-HTTP-請求的處理流程" class="headerlink" title="二、Django Ninja 對 HTTP 請求的處理流程"></a>二、Django Ninja 對 HTTP 請求的處理流程</h2><p>Django Ninja 對「請求」的處理可以分為幾個關鍵步驟：</p><ol><li><strong>路由配對</strong>：當請求進來時，框架首先會將來源 URL 與定義的路徑規則（端點）進行配對。若配對成功，則將 HTTP 請求與相關參數傳遞給 view 函式。</li><li><strong>參數解析</strong>：從 URL 中提取<strong>路徑參數</strong>（<strong>path parameters</strong>）和<strong>查詢參數</strong>（<strong>query parameters</strong>），將它們轉換為 view 函式的「<strong>引數</strong>」（arguments）。根據函式的 type hints 自動進行型別轉換和驗證。</li><li><strong>Request body 處理</strong>：對於 POST 或 PUT 等帶有 body 的請求，Django Ninja 讓開發者使用 Schema（Pydantic BaseModel）定義 body 資料模型，並自動將傳入的資料對應到這些模型。</li></ol><p>上述第 1 點已在本章第一節詳細解說。</p><p>第 2 和第 3 點則是本節共 4 篇文章的主要內容。</p><hr><h2 id="三、Django-Ninja-與-Type-Hints-的緊密結合"><a href="#三、Django-Ninja-與-Type-Hints-的緊密結合" class="headerlink" title="三、Django Ninja 與 Type Hints 的緊密結合"></a>三、Django Ninja 與 Type Hints 的緊密結合</h2><p>Django Ninja 非常依賴 Python 的 type hints 來處理 HTTP 請求中的資料。</p><p>並透過 Pydantic 實現了<strong>自動資料驗證</strong>和<strong>類別轉換</strong>，減少了開發者手動檢查和轉換資料的負擔。</p><p>例如以下程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params"><span class="string">&quot;/posts/&#123;post_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_post</span>(<span class="params">request, post_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;post_id&quot;</span>: post_id&#125;</span><br></pre></td></tr></table></figure><p>當<code>post_id</code>參數被標記為<code>int</code>時，Django Ninja 會進行型別檢查。如果傳入的參數無法轉換為<code>int</code>，框架會直接返回狀態碼為 422 的 HTTP 回應。</p><p>換言之，如果你將<code>post_id</code>標記為<code>str</code>，則 Django Ninja 會自動將<code>post_id</code>轉換為字串。</p><p>還記得剛開始接觸 Django Ninja時，我非常驚嘆竟然可以充分運用 Python type hints 到這般程度，讓它<strong>不僅僅是為了型別安全而服務，而是融入到整個 API 開發流程中</strong>。</p><h2 id="View-函式中的-request-參數"><a href="#View-函式中的-request-參數" class="headerlink" title="View 函式中的 request 參數"></a>View 函式中的 request 參數</h2><p>上面的例子中，有個值得注意的細節，就是 view 函式的<strong>第一參數</strong>——<code>request</code>。</p><p>在 Django 中，view 函式的第一個參數必定為 request。這個參數名稱<strong>可以自行定義</strong>，但通常會命名為<code>request</code>。</p><p>收到 HTTP 請求時，Django 會將整個請求打包成一個<code>HttpRequest</code>物件，並<strong>將它作為第一個參數傳給 view 函式</strong>，所以它<strong>必不可少</strong>。</p><blockquote><p>相關文章：<a href="/django-request/">Django HttpRequest 常用屬性介紹</a></p></blockquote><p><code>request</code>參數在 Django 和 Django REST framework 中非常重要，因為它常用來取得<strong>請求的查詢參數、body</strong> 等內容。</p><p>在 Django Ninja 中，這些資料會<strong>直接透過函式參數來取得</strong>，因此<code>request</code>雖然仍不可少，但<strong>使用頻率較低</strong>。</p><hr><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><p>接下來，我們將深入探討 Django Ninja 處理請求的<strong>具體細節</strong>。</p><p>下一篇將聚焦於<strong>路徑參數</strong>（<strong>path parameters</strong>），並探討如何與 Django 原生的 <strong>path converters</strong> 搭配使用。敬請期待！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;歡迎來到第三章第二節！&lt;/p&gt;
&lt;p&gt;作為 API 的核心邏輯實現，&lt;strong&gt;view 函式&lt;/strong&gt;無疑是 Django Ninja API 的靈魂所在。&lt;/p&gt;
&lt;p&gt;Django Ninja 和 FastAPI、Flask 一樣，都是以 Function-Based Views（&lt;strong&gt;以下簡稱 FBVs&lt;/strong&gt;）為主。所以它的學習重點，&lt;strong&gt;幾乎都繞圍在 view 函式的 input 和 output。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;換句話說，整個 Django Ninja 框架的能力，&lt;strong&gt;構成了 view 函式的這些關鍵部分&lt;/strong&gt;，包括但不限於：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;處理 HTTP 請求的參數與 body。&lt;/li&gt;
&lt;li&gt;處理 HTTP 回應內容的序列化與格式化。&lt;/li&gt;
&lt;li&gt;資料驗證與錯誤處理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;它們共同構成了 Django Ninja 的主要功能。&lt;/p&gt;
&lt;p&gt;本節和下一節，將集中討論上述 3 點中的前兩點——請求與回應。至於第三點，將留到第五章再行介紹。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 08：路由（下）Django Ninja 路由</title>
    <link href="https://blog.kyomind.tw/django-ninja-08/"/>
    <id>https://blog.kyomind.tw/django-ninja-08/</id>
    <published>2024-09-20T00:54:07.000Z</published>
    <updated>2024-09-23T06:45:08.237Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>上一篇文章中，我們介紹了 Django 傳統的路由設定方式。</p><p>如前所述，雖然有一個「路由清單」確實不錯。但隨著專案規模的擴大，<strong>不斷來回切換</strong><code>urls.py</code>和<code>views.py</code>將大幅增加開發者的認知負擔——不僅增加開發時間，還容易導致錯誤。</p><p>Django Ninja 採用了一種<strong>更現代化</strong>的路由設計，結合了 Flask 和 FastAPI 的設計理念。不僅簡化了路由的定義，還提升了程式碼的可讀性，讓路由與 view 函式<strong>緊密結合</strong>。</p><h2 id="範例專案動態"><a href="#範例專案動態" class="headerlink" title="範例專案動態"></a>範例專案動態</h2><p>本文關於路由設定的程式碼改動，可以參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/1">這個 PR</a>（<strong>Pull Request</strong>）。</p><p>範例專案合併了本文的 PR 後，已經正式成為一個「<strong>API 專案</strong>」，不過它<strong>目前（指這個 <a href="https://github.com/kyomind/Django-Ninja-Tutorial/commit/396e06338d615d3ec74e7c5bf871b85c9a06f0ec">commit</a> 狀態）尚無法正常運作</strong>，因為我們還沒有完善 view 函式的基本功能。</p><p>你可以一步步地跟著每一篇的 PR，來學習當次的新內容。這也是我為文章建立 PR 的用意所在。</p><span id="more"></span><hr><p>現在，我們開始介紹 Django Ninja 的路由設定。</p><h2 id="Django-Ninja-路由概述"><a href="#Django-Ninja-路由概述" class="headerlink" title="Django Ninja 路由概述"></a>Django Ninja 路由概述</h2><p>Django Ninja 使用 Python 裝飾器（<a href="https://myapollo.com.tw/blog/python-decorator-tutorial/">decorator</a>）來定義路由和 HTTP 方法。這種方式將路由與 view 函式緊密結合，大大提高了程式碼的可讀性。</p><p>熟悉 Python 的都知道，其實這種「<strong>使用裝飾器定義路由</strong>」的方式，最早來自 <a href="https://flask.palletsprojects.com/en/3.0.x/">Flask</a>。作為一個輕量級框架，Flask 率先引入了這種<strong>簡潔優雅的設計</strong>，堪稱<strong>典範級的創舉</strong>。</p><p>這個設計後續被其他框架採用，比如 FastAPI 和本文的 Django Ninja，都繼承了這種靈活的路由定義模式。</p><p>在 Flask 中，開發者可以這樣定義路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, Flask!&#x27;</span></span><br></pre></td></tr></table></figure><p>Django Ninja 也採用了<strong>類似的概念</strong>，只是在語法上更融入 Django 生態，並結合了型別提示（type hint）和 Pydantic 的資料驗證功能，讓 API 開發變得更加現代化。</p><p>以下是 Django Ninja 的一個簡單範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> NinjaAPI</span><br><span class="line"></span><br><span class="line">api = NinjaAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.get(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello, Django Ninja!&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>Flask 與 Django Ninja 這兩種寫法，與其說非常相似，不如說一模一樣😎</p><hr><h2 id="更有組織的做法：使用-Router-物件"><a href="#更有組織的做法：使用-Router-物件" class="headerlink" title="更有組織的做法：使用 Router 物件"></a>更有組織的做法：使用 Router 物件</h2><p>雖然直接使用上述範例中的<code>NinjaAPI</code>來定義路由簡單而直觀。但實際工作中，我們更推薦使用<code>Router</code>物件（<a href="https://django-ninja.dev/guides/routers/">官方文件</a>）來管理不同 Django app 的路由。</p><p>這和 Django 傳統做法中「區分一級與二級路由」的基本精神相符。不僅讓專案的架構保持清晰，還能讓每個 app 的邏輯獨立。</p><p>在 Django Ninja 中，<code>Router</code>物件提供了一種<strong>模組化的路由設定方式</strong>，讓每個 Django app 可以管理自己的路由，並在專案層級的<code>api.py</code><strong>統一整合起來</strong>——也就是取代傳統的<code>urls.py</code>功能。</p><p>以下程式碼範例，我們都會以<code>Router</code>物件來實作。</p><hr><h2 id="專案架構變化"><a href="#專案架構變化" class="headerlink" title="專案架構變化"></a>專案架構變化</h2><p>先來看看採用 Django Ninja 以後，傳統 Django 專案的結構會有<strong>怎麼樣的變化</strong>。</p><h3 id="Django-傳統路由結構"><a href="#Django-傳統路由結構" class="headerlink" title="Django 傳統路由結構"></a>Django 傳統路由結構</h3><p>以範例專案為例，這是傳統 Django 的典型結構：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── NinjaForum</span><br><span class="line">│   ├── urls.py  <span class="comment"># 專案一級路由</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── post</span><br><span class="line">│   ├── urls.py  <span class="comment"># app 二級路由</span></span><br><span class="line">│   ├── view.py  <span class="comment"># 放置 app 所屬 view 函式的地方</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── user</span><br><span class="line">│   ├── urls.py  <span class="comment"># app 二級路由</span></span><br><span class="line">│   ├── view.py  <span class="comment"># 放置 app 所屬 view 函式的地方</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure><p>Django app 層級的<code>urls.py</code>負責定義所有 app 內的路由，然後再由專案的<code>urls.py</code>進行統合。井然有序，權責分明。</p><h3 id="Django-Ninja-路由結構"><a href="#Django-Ninja-路由結構" class="headerlink" title="Django Ninja 路由結構"></a>Django Ninja 路由結構</h3><p>在採用 Django Ninja 後，專案結構會有一些變化。以下是一個典型的 Django Ninja 專案結構：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── NinjaForum</span><br><span class="line">│   ├── urls.py  <span class="comment"># 專案「零級」路由</span></span><br><span class="line">│   ├── api.py   <span class="comment"># 專案一級路由</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── post</span><br><span class="line">│   ├── api.py   <span class="comment"># post app 的路由 + view 函式</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── user</span><br><span class="line">│   ├── api.py   <span class="comment"># user app 的路由 + view 函式</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure><p>在這個結構中，每個 Django app 都有一個<code>api.py</code>，用於<strong>定義該 app 的所有 API 路由和 view 函式</strong>，取代了傳統 Django 中的<code>urls.py</code>和<code>views.py</code>的功能。</p><p>專案級別的<code>api.py</code>則負責整合所有 Django app 的 API。</p><p>此外，專案的<code>urls.py</code><strong>仍然是必要的</strong>，它負責將 Django Ninja 的 API 路由<strong>再整合</strong>到 Django 的 URL 設定中。同時，還可以化身為「零級」路由，為所有 API 加上<strong>全專案統一的路由前綴</strong>，比如<code>/api/</code>。</p><hr><h2 id="Django-Ninja-路由實作"><a href="#Django-Ninja-路由實作" class="headerlink" title="Django Ninja 路由實作"></a>Django Ninja 路由實作</h2><p>了解了 Django Ninja 的路由結構，我們直接在範例專案的兩個 Django app 分別實作「取得所有使用者」和「取得文章列表」兩個 API。</p><p>我們會在接下來的數篇文章中，循序漸進地完善這些 API。<strong>目前只是雛形</strong>，先把焦點放在路由設定上。</p><h3 id="一、建立二級路由"><a href="#一、建立二級路由" class="headerlink" title="一、建立二級路由"></a>一、建立二級路由</h3><p>在 user app 中建立一個<code>api.py</code>， 內容為：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user/api.py</span></span><br><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> Router</span><br><span class="line"></span><br><span class="line">router = Router()</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_users</span>(<span class="params">request</span>):</span><br><span class="line">    users = User.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> users</span><br></pre></td></tr></table></figure><p>同理，我們在<code>post/api.py</code>中建立類似的路由與 view 函式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post/api.py</span></span><br><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> Router</span><br><span class="line"></span><br><span class="line">router = Router()</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params">request</span>):</span><br><span class="line">    posts = Post.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> posts</span><br></pre></td></tr></table></figure><p>這樣，我們就為 user 和 post 兩個 app 分別建立了 API。接下來，我們需要將這些路由整合到<strong>專案級別</strong>的 API 路由中。</p><h3 id="二、建立一級路由"><a href="#二、建立一級路由" class="headerlink" title="二、建立一級路由"></a>二、建立一級路由</h3><p>在 Django 專案目錄（指 NinjaForum 目錄）底下，我們也需要建立一個<code>api.py</code>。它將作為我們的<strong>一級路由</strong>，整合所有 app 的 API。以下是這個<code>api.py</code>的內容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NinjaForum/api.py</span></span><br><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> NinjaAPI</span><br><span class="line"></span><br><span class="line">api = NinjaAPI()</span><br><span class="line"></span><br><span class="line">api.add_router(prefix=<span class="string">&#x27;/users/&#x27;</span>, router=<span class="string">&#x27;user.api.router&#x27;</span>)</span><br><span class="line">api.add_router(prefix=<span class="string">&#x27;/posts/&#x27;</span>, router=<span class="string">&#x27;post.api.router&#x27;</span>)</span><br></pre></td></tr></table></figure><p>值得留意的是，這裡的路由整合有<strong>兩種寫法</strong>，上面我習慣使用的。</p><p>另一種寫法是直接 import <code>router</code>物件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> user.api <span class="keyword">import</span> router <span class="keyword">as</span> user_router</span><br><span class="line"><span class="keyword">from</span> post.api <span class="keyword">import</span> router <span class="keyword">as</span> post_router</span><br><span class="line"></span><br><span class="line">api.add_router(prefix=<span class="string">&#x27;/users/&#x27;</span>, router=user_router)</span><br><span class="line">api.add_router(prefix=<span class="string">&#x27;/posts/&#x27;</span>, router=post_router)</span><br></pre></td></tr></table></figure><p>這兩種方法在功能上是等效的，選擇哪種主要取決於個人偏好和專案的組織方式。</p><h3 id="三、專案-urls-py"><a href="#三、專案-urls-py" class="headerlink" title="三、專案 urls.py"></a>三、專案 <code>urls.py</code></h3><p>在 Django Ninja 中，專案層級的<code>urls.py</code>化身為連接 Django 和 Django Ninja API 的<strong>橋梁</strong>。</p><p>在專案<code>urls.py</code>中，我們還能再定義<strong>全專案共用的路由前綴</strong>。長這樣：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from NinjaForum.api import api</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;api/&#x27;</span>, api.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>這裡定義了一個專案路由前綴——<code>/api/</code>。</p><p>如此一來，「取得所有文章」的 API 端點將會是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/posts/</span><br></pre></td></tr></table></figure><p>當然，如果你不需要額外的路由前綴，也可以直接省略：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, api.urls),  <span class="comment"># 省略前綴</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>至此，我們完成了 Django Ninja 的路由設定。</p><p>這樣的結構不僅保持了 Django 原有的模組化設計，還為我們的 API 開發提供了更大的靈活性。</p><hr><h2 id="本節收尾與下一步"><a href="#本節收尾與下一步" class="headerlink" title="本節收尾與下一步"></a>本節收尾與下一步</h2><p>在第一節中，我們學習了如何使用 Django Ninja 定義路由，並了解 Django 傳統路由與 Django Ninja 路由的差異。</p><p>Django Ninja 的路由做法不僅讓程式碼更具可讀性，還保持了專案的清晰結構，改善了 Django 傳統路由的一些缺點。</p><p>下一篇，我們將進入 Django Ninja API 的核心部分——view 函式。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇文章中，我們介紹了 Django 傳統的路由設定方式。&lt;/p&gt;
&lt;p&gt;如前所述，雖然有一個「路由清單」確實不錯。但隨著專案規模的擴大，&lt;strong&gt;不斷來回切換&lt;/strong&gt;&lt;code&gt;urls.py&lt;/code&gt;和&lt;code&gt;views.py&lt;/code&gt;將大幅增加開發者的認知負擔——不僅增加開發時間，還容易導致錯誤。&lt;/p&gt;
&lt;p&gt;Django Ninja 採用了一種&lt;strong&gt;更現代化&lt;/strong&gt;的路由設計，結合了 Flask 和 FastAPI 的設計理念。不僅簡化了路由的定義，還提升了程式碼的可讀性，讓路由與 view 函式&lt;strong&gt;緊密結合&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;範例專案動態&quot;&gt;&lt;a href=&quot;#範例專案動態&quot; class=&quot;headerlink&quot; title=&quot;範例專案動態&quot;&gt;&lt;/a&gt;範例專案動態&lt;/h2&gt;&lt;p&gt;本文關於路由設定的程式碼改動，可以參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/1&quot;&gt;這個 PR&lt;/a&gt;（&lt;strong&gt;Pull Request&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;範例專案合併了本文的 PR 後，已經正式成為一個「&lt;strong&gt;API 專案&lt;/strong&gt;」，不過它&lt;strong&gt;目前（指這個 &lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/commit/396e06338d615d3ec74e7c5bf871b85c9a06f0ec&quot;&gt;commit&lt;/a&gt; 狀態）尚無法正常運作&lt;/strong&gt;，因為我們還沒有完善 view 函式的基本功能。&lt;/p&gt;
&lt;p&gt;你可以一步步地跟著每一篇的 PR，來學習當次的新內容。這也是我為文章建立 PR 的用意所在。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 07：路由（上）傳統 Django 路由做法（兼章節概論）</title>
    <link href="https://blog.kyomind.tw/django-ninja-07/"/>
    <id>https://blog.kyomind.tw/django-ninja-07/</id>
    <published>2024-09-19T03:04:07.000Z</published>
    <updated>2024-09-20T05:34:00.021Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>第三章是全系列的重頭戲，因為我們要介紹 Django Ninja 的<strong>核心部分——API</strong>。</p><p>我把本章分成了三個小節：</p><ol><li><strong>第一節：路由（Router）</strong></li><li><strong>第二節：請求（Request）</strong></li><li><strong>第三節：回應（Response）</strong></li></ol><p>第三章也是<strong>唯一</strong>有區分小節的篇章。</p><p>現在我們進入第一節——<strong>路由</strong>。讓我們先了解一下本節的學習重點。</p><hr><h2 id="本節導覽"><a href="#本節導覽" class="headerlink" title="本節導覽"></a>本節導覽</h2><p>本節一共有兩篇，分別是：</p><ul><li>卷 7：路由（上）傳統 Django 路由做法（兼章節概論）</li><li>卷 8：路由（下）Django Ninja 路由設定</li></ul><p>為什麼要這樣安排呢？因為<strong>端點與路由是 API 請求的起點</strong>。</p><p>沒有它們，你的 view 函式根本無法接收請求，更不用說回應了。因此，路由設定必須放在第一位，作為 API 開發的學習入口。</p><p>所謂的「<strong>端點</strong>」（endpoints），你就簡單想成 <strong>API 所在的 URL</strong> 就可以了。</p><h3 id="本文主旨"><a href="#本文主旨" class="headerlink" title="本文主旨"></a>本文主旨</h3><p>其次，Django Ninja 的路由設定與傳統 Django 或 Django REST Framework（<strong>以下簡稱 DRF</strong>）的路由設定有<strong>很大的不同</strong>，反而更接近 FastAPI 或 Flask 風格。</p><p>這是我在學習 Django Ninja 時遇到的<strong>第一個門檻</strong>（畢竟我寫了 2 年的 DRF😅），所以決定分成上下兩篇文章詳細解說，幫助你打好基礎、減少混淆。</p><p>本文的重點是<strong>介紹 Django 傳統路由</strong>的設定方式。讓我們開始吧！</p><span id="more"></span><hr><h2 id="什麼是路由（Routers）"><a href="#什麼是路由（Routers）" class="headerlink" title="什麼是路由（Routers）"></a>什麼是路由（Routers）</h2><p><strong>路由（Router）</strong>是 Web 服務的<strong>重要元件</strong>之一，它負責將<strong>客戶端</strong>（通常是瀏覽器）發送的 HTTP 請求，<strong>對應到正確的處理邏輯</strong>。</p><p>在 Django 中，路由就是決定「<strong>哪個請求應該由哪個 View 來處理</strong>」的機制。</p><p>當客戶端訪問<strong>特定的 URL</strong>（我們稱為「<strong>端點</strong>」）時，Django 伺服器會根據這個 URL，找到對應的處理函式來執行特定邏輯。</p><p>這個「<strong>對應（mapping）</strong>」的過程，就是路由的核心職責。</p><hr><h2 id="Django-路由介紹"><a href="#Django-路由介紹" class="headerlink" title="Django 路由介紹"></a>Django 路由介紹</h2><p>Django 的路由機制主要透過<code>urls.py</code>中的設定，來管理不同層級的路由結構，並通過一級路由和二級路由，加以整合、組織所有端點。</p><p>至此，我們已經提到了 Django 路由的<strong>三個關鍵元素</strong>：</p><ul><li><strong>一級路由</strong></li><li><strong>二級路由</strong></li><li><code>urls.py</code></li></ul><p>以下是對它們的介紹。</p><h3 id="一級路由"><a href="#一級路由" class="headerlink" title="一級路由"></a>一級路由</h3><p><strong>一級路由</strong>是「<strong>專案級別</strong>」的路由，通常位於 Django 專案目錄底下（即範例專案中的<code>NinjaForum</code>目錄）的<code>urls.py</code>中。</p><p>一級路由主要用來為每一個 Django app <strong>分別加上全 app 統一的「路由前綴」</strong>，並<strong>整合來自所有 app 的路由</strong>。</p><p>以本專案為例，它可能會長這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NinjaForum/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;posts/&#x27;</span>, include(<span class="string">&#x27;post.urls&#x27;</span>)),  <span class="comment"># 處理 post app 的路由</span></span><br><span class="line">    path(<span class="string">&#x27;users/&#x27;</span>, include(<span class="string">&#x27;user.urls&#x27;</span>)),  <span class="comment"># 處理 user app 的路由</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>這裡的<code>urlpatterns</code>是 Django 的一級路由。它將<code>/posts/</code>和<code>/users/</code>路徑分別指向 post 和 user app 的二級路由，作為各 app 二級路由的統一前綴。</p><h3 id="二級路由"><a href="#二級路由" class="headerlink" title="二級路由"></a>二級路由</h3><p><strong>二級路由</strong>是各 Django app 自行管理的路由。<strong>直接對應</strong> app 本身的 view 函式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post/urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> post <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.get_posts)</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:post_id&gt;/&#x27;</span>, views.post_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>將一級與二級路由的邏輯<strong>重新組合</strong>後，上述兩個 app 級路由，實際的端點是：</p><ol><li><code>/posts/</code> ：取得所有文章。</li><li><code>/posts/&lt;int:post_id&gt;/</code>：取得特定文章細節。</li></ol><p>這種<strong>層級式的路由結構</strong>不僅使 URL 更有組織，也讓不同 app 的功能<strong>更加模組化</strong>。</p><p>舉例而言，如果我們想要為 user app 新增一個「獲取用戶資料」API，我們只需要在 user app 的<code>urls.py</code>中建立相對應的路由即可，不需修改專案級別的路由設定。</p><hr><h2 id="專案架構圖"><a href="#專案架構圖" class="headerlink" title="專案架構圖"></a>專案架構圖</h2><p>用<strong>鳥瞰</strong>的角度可能會更清楚。</p><p>就 Django 傳統路由部分，整個範例專案的目錄與檔案結構如下（已省略無關部分）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── NinjaForum</span><br><span class="line">│   ├── urls.py  <span class="comment"># 專案一級路由</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── post</span><br><span class="line">│   ├── urls.py  <span class="comment"># app 二級路由</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── user</span><br><span class="line">│   ├── urls.py  <span class="comment"># app 二級路由</span></span><br><span class="line">│   ├── ...</span><br><span class="line">├── ...</span><br></pre></td></tr></table></figure><p>這樣的結構在 Django 專案中十分常見，同時也是 DRF 的標準做法。</p><p>專案一級路由負責<strong>全域的入口</strong>，二級路由負責 app 中 <strong>view 函式的配對</strong>。這樣的設計，使得專案架構更具模組化與擴展性。</p><hr><h2 id="Django-傳統路由的優點與缺點"><a href="#Django-傳統路由的優點與缺點" class="headerlink" title="Django 傳統路由的優點與缺點"></a>Django 傳統路由的優點與缺點</h2><p>Django 傳統的路由機制藉由專案與 app 層級的<code>urls.py</code>，來組織並定義完整的 URL 路徑（端點），這樣的設計<strong>有好有壞</strong>，讓我們來探討<strong>其中的利弊</strong>。</p><h3 id="優點：清晰的端點清單"><a href="#優點：清晰的端點清單" class="headerlink" title="優點：清晰的端點清單"></a>優點：清晰的端點清單</h3><p>Django 傳統路由的一大優點就是<strong>所有的端點、路由都集中在 <code>urls.py</code> 中</strong>。這意味著開發者可以<strong>一眼看出</strong>目前所有的 API 端點（app 部分），例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app 層級 urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;home/&#x27;</span>, views.home, name=<span class="string">&#x27;home&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, views.about, name=<span class="string">&#x27;about&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;contact/&#x27;</span>, views.contact, name=<span class="string">&#x27;contact&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>urls.py</code>就像<strong>路由目錄</strong>一樣，一目了然。</p><h3 id="缺點：對照端點與-view-函式需要來回跳轉"><a href="#缺點：對照端點與-view-函式需要來回跳轉" class="headerlink" title="缺點：對照端點與 view 函式需要來回跳轉"></a>缺點：對照端點與 view 函式需要來回跳轉</h3><p>如前所述，路由負責<strong>連接</strong>端點與 view 函式。</p><p>由於<strong>每個端點都需要對應一個 view 函式</strong>，而對應的 view 函式通常放在<code>views.py</code>。</p><p>這帶來了一個問題：開發者需要在<code>urls.py</code>和<code>views.py</code>之間<strong>來回切換</strong>，<strong>才能完整理解一個端點與背後的實現邏輯。</strong></p><p>這樣的「不直觀」不僅增加了開發時的<strong>認知負擔</strong>，也容易在修改 API 時發生錯誤。</p><p>此外，隨著專案規模不斷擴大，<code>urls.py</code>中的端點清單會<strong>越來越長</strong>——要找到對應的 view 函式<strong>變得耗時且繁瑣</strong>，進一步增加了出錯的可能。</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>本文中，我們深入了解了傳統 Django 的路由設計，並探討了其優缺點。</p><p>這種結構化的設計讓路由的管理更加模組化，但也引發了在大型專案中維護和閱讀困難的問題。</p><p>接下來，我們將探索 Django Ninja 如何提供更簡潔的路由機制，並與傳統 Django 路由進行比較。</p><h3 id="The-Django-Ninja-Way"><a href="#The-Django-Ninja-Way" class="headerlink" title="The Django Ninja Way"></a>The Django Ninja Way</h3><p>Django Ninja 採用了一種<strong>更現代化</strong>的方式，來處理路由和 view 函式——它將兩者<strong>緊密結合</strong>，提供了一種更直觀的手段來定義 API 端點。（其實大家都是學 Flask 的☺️）</p><p>不僅大幅減少了在不同檔案間切換的需求，還提高了程式碼的可讀性和維護性。</p><p>下一篇，就讓我們來了解 Django Ninja 的路由機制，看看它是如何改善這些問題的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;第三章是全系列的重頭戲，因為我們要介紹 Django Ninja 的&lt;strong&gt;核心部分——API&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我把本章分成了三個小節：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;第一節：路由（Router）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二節：請求（Request）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第三節：回應（Response）&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第三章也是&lt;strong&gt;唯一&lt;/strong&gt;有區分小節的篇章。&lt;/p&gt;
&lt;p&gt;現在我們進入第一節——&lt;strong&gt;路由&lt;/strong&gt;。讓我們先了解一下本節的學習重點。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;本節導覽&quot;&gt;&lt;a href=&quot;#本節導覽&quot; class=&quot;headerlink&quot; title=&quot;本節導覽&quot;&gt;&lt;/a&gt;本節導覽&lt;/h2&gt;&lt;p&gt;本節一共有兩篇，分別是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷 7：路由（上）傳統 Django 路由做法（兼章節概論）&lt;/li&gt;
&lt;li&gt;卷 8：路由（下）Django Ninja 路由設定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;為什麼要這樣安排呢？因為&lt;strong&gt;端點與路由是 API 請求的起點&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;沒有它們，你的 view 函式根本無法接收請求，更不用說回應了。因此，路由設定必須放在第一位，作為 API 開發的學習入口。&lt;/p&gt;
&lt;p&gt;所謂的「&lt;strong&gt;端點&lt;/strong&gt;」（endpoints），你就簡單想成 &lt;strong&gt;API 所在的 URL&lt;/strong&gt; 就可以了。&lt;/p&gt;
&lt;h3 id=&quot;本文主旨&quot;&gt;&lt;a href=&quot;#本文主旨&quot; class=&quot;headerlink&quot; title=&quot;本文主旨&quot;&gt;&lt;/a&gt;本文主旨&lt;/h3&gt;&lt;p&gt;其次，Django Ninja 的路由設定與傳統 Django 或 Django REST Framework（&lt;strong&gt;以下簡稱 DRF&lt;/strong&gt;）的路由設定有&lt;strong&gt;很大的不同&lt;/strong&gt;，反而更接近 FastAPI 或 Flask 風格。&lt;/p&gt;
&lt;p&gt;這是我在學習 Django Ninja 時遇到的&lt;strong&gt;第一個門檻&lt;/strong&gt;（畢竟我寫了 2 年的 DRF😅），所以決定分成上下兩篇文章詳細解說，幫助你打好基礎、減少混淆。&lt;/p&gt;
&lt;p&gt;本文的重點是&lt;strong&gt;介紹 Django 傳統路由&lt;/strong&gt;的設定方式。讓我們開始吧！&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 06：環境設定 × 如何使用本專案</title>
    <link href="https://blog.kyomind.tw/django-ninja-06/"/>
    <id>https://blog.kyomind.tw/django-ninja-06/</id>
    <published>2024-09-18T04:17:02.000Z</published>
    <updated>2024-09-18T05:00:48.591Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>前一篇我們了解了整個專案所使用的 Python 開發工具。</p><p>本文將帶領你一步步完成，有關範例專案的環境設定：<strong>從安裝 Python、Poetry、clone 專案至本地、建立 Python 虛擬環境，到成功啟動 Django</strong>。</p><p>即使你從未接觸過這些工具，按著本文的指南，應該也能順利完成環境設定並運行。</p><p>值得一提的是，我已經使用 Mac 很長一段時間，對 Windows 環境不甚熟悉，但我會盡可能提供相關的替代方案或指引。</p><p>好，我們開始吧！</p><span id="more"></span><hr><h2 id="一、安裝-Python-3-12"><a href="#一、安裝-Python-3-12" class="headerlink" title="一、安裝 Python 3.12"></a>一、安裝 Python 3.12</h2><p>因為不是每個人的環境都方便安裝 pyenv（尤其它<strong>不支援 Windows</strong>）， 這裡只講沒有 pyenv 的替代方案。</p><p>如果想透過 pyenv 安裝 Python， 可以參考上一篇提到的教學文章。</p><p>我們直接從 <a href="https://www.python.org/">Python 官方網站</a>下載並安裝 Python 3.12。</p><h3 id="Windows-使用者"><a href="#Windows-使用者" class="headerlink" title="Windows 使用者"></a>Windows 使用者</h3><ol><li>前往 Python 官方的<a href="https://www.python.org/downloads/">下載頁面</a>，下載 Python 3.12 的 Windows 安裝程式。</li><li>執行下載的安裝檔，記得勾選「<strong>Add Python 3.12 to PATH</strong>」選項。</li><li>完成安裝後，開啟<strong>命令提示字元</strong>並輸入<code>python --version</code>來確認是否安裝成功。</li></ol><h3 id="macOS-使用者"><a href="#macOS-使用者" class="headerlink" title="macOS 使用者"></a>macOS 使用者</h3><p>對於 macOS 使用者，我們有幾種安裝 Python 3.12 的方法：</p><ol><li>一樣使用官方安裝程式：前往 Python 官方網站下載 macOS 版本的安裝程式，並按照指示完成安裝。</li><li>使用 Homebrew：如果你已經安裝了 Homebrew，可以在終端中執行 <code>brew install python@3.12</code> 來安裝 Python 3.12。</li><li>安裝完成後，在終端中輸入 <code>python3 --version</code> 來確認安裝是否成功。</li></ol><p>不管用哪一種方式安裝，請務必透過上述指令確認 Python 版本正確。<strong>只要是 3.12.x 即可</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ python3 --version</span><br><span class="line">Python 3.12.5</span><br></pre></td></tr></table></figure><hr><h2 id="二、安裝與設定-Poetry"><a href="#二、安裝與設定-Poetry" class="headerlink" title="二、安裝與設定 Poetry"></a>二、安裝與設定 Poetry</h2><p>專案中的所有 Python 套件都由 <a href="https://python-poetry.org/">Poetry</a> 管理，首先要安裝 Poetry。可以直接通過官方指令安裝：（<strong>以下指令適用 macOS 和 Linux 用戶</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL &lt;https://install.python-poetry.org&gt; | python3 -</span><br></pre></td></tr></table></figure><p>安裝完成後，將 Poetry 執行檔路徑，新增到系統的 PATH 中：（<strong>Zsh 用戶</strong>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p><strong>Bash 用戶</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>檢查是否安裝成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ poetry --version</span><br><span class="line">Poetry (version 1.4.0)</span><br></pre></td></tr></table></figure><h3 id="Windows-安裝與設定-Poetry"><a href="#Windows-安裝與設定-Poetry" class="headerlink" title="Windows 安裝與設定 Poetry"></a>Windows 安裝與設定 Poetry</h3><p>Windows 用戶可參考 JetBrains 的 <a href="https://www.jetbrains.com/help/dataspell/poetry.html">Poetry 設定教學</a>，我覺得寫得很清楚。</p><h3 id="修改-Poetry-config，改用-venv虛擬環境"><a href="#修改-Poetry-config，改用-venv虛擬環境" class="headerlink" title="修改 Poetry config，改用.venv虛擬環境"></a>修改 Poetry <code>config</code>，改用<code>.venv</code>虛擬環境</h3><p>預設為<code>false</code>，Poetry 會在獨立目錄下建立虛擬環境，而名稱很冗長！</p><p>改成<code>true</code>以後，<strong>則直接在專案根目錄下建立虛擬環境，且名稱固定為</strong><code>.venv</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry config virtualenvs.<span class="keyword">in</span>-project true</span><br></pre></td></tr></table></figure><p>把虛擬環境放在專案中，這是我個人更偏好的做法。</p><h2 id="不使用-Poetry-的方案"><a href="#不使用-Poetry-的方案" class="headerlink" title="不使用 Poetry 的方案"></a>不使用 Poetry 的方案</h2><p>專案中準備了一份<code>requirements.txt</code>，給習慣用 pip 的讀者。省去安裝與設定 Poetry 的麻煩。</p><hr><h2 id="三、從-GitHub-下載專案、建立虛擬環境"><a href="#三、從-GitHub-下載專案、建立虛擬環境" class="headerlink" title="三、從 GitHub 下載專案、建立虛擬環境"></a>三、從 GitHub 下載專案、建立虛擬環境</h2><p>接下來是專案本身的設定。</p><h3 id="一、Clone-專案"><a href="#一、Clone-專案" class="headerlink" title="一、Clone 專案"></a>一、Clone 專案</h3><p>這是<a href="https://github.com/kyomind/Django-Ninja-Tutorial">專案連結</a>。使用<code>git clone</code>指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kyomind/Django-Ninja-Tutorial.git</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:kyomind/Django-Ninja-Tutorial.git</span><br></pre></td></tr></table></figure><h3 id="二、建立虛擬環境並安裝套件"><a href="#二、建立虛擬環境並安裝套件" class="headerlink" title="二、建立虛擬環境並安裝套件"></a>二、建立虛擬環境並安裝套件</h3><p>進入專案目錄，使用 Poetry 建立虛擬環境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry <span class="built_in">env</span> use 3.12</span><br></pre></td></tr></table></figure><p>此時在專案根目錄應該會建立一個<code>.venv</code>資料夾，即專案的虛擬環境，<strong>目前是空的</strong>。</p><p>使用<code>poetry shell</code>啟動虛擬環境。</p><p>透過<code>poetry install</code>安裝套件：Poetry 會根據<code>pyproject.toml</code>和<code>poetry.lock</code>內容，自動下載並安裝專案需要的所有套件。</p><h3 id="pip-使用者"><a href="#pip-使用者" class="headerlink" title="pip 使用者"></a>pip 使用者</h3><p>pip 用戶可以透過以下步驟建立虛擬環境：（全程在<strong>專案根目錄</strong>下進行）</p><ol><li>使用 Python 內建的 venv 模組建立虛擬環境：<code>python -m venv .venv</code></li><li>啟動虛擬環境：<ul><li>Windows: <code>.venv\Scripts\activate</code></li><li>macOS&#x2F;Linux: <code>source .venv/bin/activate</code></li></ul></li><li>安裝套件：<code>pip install -r requirements.txt</code></li></ol><hr><h2 id="四、初始化-pre-commit"><a href="#四、初始化-pre-commit" class="headerlink" title="四、初始化 pre-commit"></a>四、初始化 pre-commit</h2><p>建立虛擬環境並使用<code>poetry install</code>後，pre-commit 套件已被安裝到虛擬環境中。</p><p>如你所見，專案中有一個<code>.pre-commit-config.yaml</code>檔。這個檔案定義了每次提交前要執行的檢查項目（Git Hooks）。</p><p>我們只需要透過下列指令，安裝 Git Hooks：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pre-commit install</span><br></pre></td></tr></table></figure><p>這個指令會在專案的 Git 目錄中建立 Git Hooks，<strong>每個專案只要執行一次即可</strong>。</p><hr><h2 id="五、安裝-VS-Code-套件"><a href="#五、安裝-VS-Code-套件" class="headerlink" title="五、安裝 VS Code 套件"></a>五、安裝 VS Code 套件</h2><p>如果你的 IDE 是 VS Code，我強烈建議安裝 <a href="https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff">Ruff</a> 和 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker">Mypy</a> 這兩個 VS Code 套件。讓你可以在第一時間知曉目前的程式碼狀態（是否有問題）。</p><p>兩者在安裝後，原則上都無須設定，因為專案內<strong>已經有了相關的設定檔</strong>：</p><ol><li>Ruff：<code>pyproject.toml</code></li><li>Mypy：<code>mypy.ini</code></li></ol><p>此外，它們都是 CLI 工具，所以你也可以<strong>手動執行</strong>它們，比如執行 Ruff 檢查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ruff check</span><br><span class="line">ruff format</span><br></pre></td></tr></table></figure><p>或執行 Mypy 檢查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mypy .</span><br></pre></td></tr></table></figure><p>但還是 VS Code 套件最方便。</p><hr><h2 id="六、啟動-Django-專案"><a href="#六、啟動-Django-專案" class="headerlink" title="六、啟動 Django 專案"></a>六、啟動 Django 專案</h2><p>我們已經完成了所有必要的工具設定，接下來就可以啟動 Django 伺服器了。</p><h3 id="一、進行資料庫遷移"><a href="#一、進行資料庫遷移" class="headerlink" title="一、進行資料庫遷移"></a>一、進行資料庫遷移</h3><p>這是一開始一定要的步驟：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><p>事實上，專案也準備了 Makefile，所以你也可以透過以下指令執行遷移：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make migrate</span><br></pre></td></tr></table></figure><p>有關 Makefile 的介紹與教學，可以參考小克這篇〈<a href="https://blog.goodjack.tw/2023/01/use-makefile-to-manage-workflows-for-web-projects.html">寫 Web 也可以用 Makefile：好好管理你的環境流程</a>〉。</p><h3 id="二、啟動開發伺服器"><a href="#二、啟動開發伺服器" class="headerlink" title="二、啟動開發伺服器"></a>二、啟動開發伺服器</h3><p>執行以下命令來<strong>啟動 Django 開發伺服器</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">make run</span><br></pre></td></tr></table></figure><p>接著，打開瀏覽器並訪問 <code>http://127.0.0.1:8000/</code>，你應該可以看到 Django 預設的歡迎頁面，表示專案成功啟動！</p><p><img src="https://i.imgur.com/Qb9ZeIu.png" alt="Django 預設歡迎頁面"><span class="cap">Django 預設歡迎頁面</span></p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>通過上述步驟，你已經成功完成了專案的開發環境設定，並啟動了範例 Django 專案。</p><p>如果在設定過程中遇到問題，可查閱工具的官方文件或參考我的部落格教學，這些資源能幫助你解決常見問題，或進一步理解它們的功能。</p><h2 id="最後的最後"><a href="#最後的最後" class="headerlink" title="最後的最後"></a>最後的最後</h2><p>在專案的開發過程中，我們會使用 Git 分支和 <strong>GitHub 的 PR（<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pulls">Pull requests</a>）</strong>來管理<strong>不同章節的範例程式碼改動</strong>。</p><p>這樣可以<strong>保持學習脈絡清晰有條理</strong>，避免因不同功能的程式碼混在一起而影響理解。</p><p>需要注意的是，<strong>不是</strong>每一篇文章都有自己的分支與 PR，因為有些篇章只涉及概念說明而沒有程式碼改動。</p><h2 id="CodeGPT-推薦"><a href="#CodeGPT-推薦" class="headerlink" title="CodeGPT 推薦"></a>CodeGPT 推薦</h2><p>此外，本專案<strong>幾乎所有的 commit 訊息</strong>，都是透過吳大開發的 <a href="https://github.com/appleboy/CodeGPT">CodeGPT</a> 加上 GPT-4o mini API <strong>自動生成</strong>。</p><p>畢竟，即使只是範例專案，要思考每一個 commit 訊息的內容也是不輕鬆。有了這樣的自動化工具，真的方便很多！而且風格一致性高，很適合偏執狂如我☺️</p><p>關於 CodeGPT，除了 GitHub 頁面介紹，還可以參考吳大的這篇〈<a href="https://blog.wu-boy.com/2023/11/codegpt-in-modernweb/">生成式 AI CodeGPT 開發經驗談 - 台北 ModernWeb</a>〉，內有投影片分享。</p><p>使用教學則可參考保哥的〈<a href="https://blog.miniasp.com/post/2023/12/05/Useful-tool-CodeGPT">介紹好用工具：CodeGPT (使用 GPT 自動化產生 Git 的 Commit Log 訊息)</a>〉。</p><hr><p>現在，一切準備就緒，讓我們正式進入 Django Ninja 的世界。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;前一篇我們了解了整個專案所使用的 Python 開發工具。&lt;/p&gt;
&lt;p&gt;本文將帶領你一步步完成，有關範例專案的環境設定：&lt;strong&gt;從安裝 Python、Poetry、clone 專案至本地、建立 Python 虛擬環境，到成功啟動 Django&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;即使你從未接觸過這些工具，按著本文的指南，應該也能順利完成環境設定並運行。&lt;/p&gt;
&lt;p&gt;值得一提的是，我已經使用 Mac 很長一段時間，對 Windows 環境不甚熟悉，但我會盡可能提供相關的替代方案或指引。&lt;/p&gt;
&lt;p&gt;好，我們開始吧！&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
</feed>
