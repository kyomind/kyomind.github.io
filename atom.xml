<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/favicon-32x32.png</icon>
  <subtitle>Kyo 的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2025-05-03T02:10:21.028Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>Kyo Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寫好 Python Docstring 的 4 個層次——從簡單到詳細</title>
    <link href="https://blog.kyomind.tw/python-docstring/"/>
    <id>https://blog.kyomind.tw/python-docstring/</id>
    <published>2025-05-03T00:06:20.000Z</published>
    <updated>2025-05-03T02:10:21.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/8qdJkr4.png"></p><p>在〈<a href="https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-03/">Docstring 的重要性——《Python 功力提升的樂趣》</a>〉一文中，我提到了：</p><blockquote><p>Docstring 也不是有寫就行，還需要從「<strong>讀者</strong>（也就是你的同事）」的角度去思考與表達。不然看起來會很像開發者的自言自語——沒人看得懂。</p></blockquote><p>在工作上使用 Python 多年，即便是經驗豐富的 Python 工程師，很多人也未必養成了寫 Docstring 的習慣。</p><p>畢竟在日常趕專案的場景下，一段程式碼能 work，比「好讀、好理解」更重要——至少更急迫。</p><p>然而，當專案逐漸擴大、團隊成員增加時，沒有良好的 Docstring，協作的痛苦就會慢慢浮現。</p><p>Docstring 不是單純寫給自己的備忘，而是寫給「下一個會看這份程式的人」。</p><p>當你開始用這個角度思考，你會發現，寫好 Docstring 並不是加分項，而是基本功。</p><p>那到底要怎麼樣才能寫好 Python Docstring 呢？作為 Docstring 的信奉者，本文將分享我在過去工作經驗中所累積的 Docstring 寫作心得，或者說教學指南吧！</p><span id="more"></span><hr><h2 id="什麼是-Docstring？"><a href="#什麼是-Docstring？" class="headerlink" title="什麼是 Docstring？"></a>什麼是 Docstring？</h2><p>Docstring（Documentation String）是 Python 程式碼中用來描述模組、類別、函式或方法用途的字串。它通常放在定義語法（比如<code>def xxx</code>）之後，由三個雙引號（<code>&quot;&quot;&quot;</code>）包覆，方便工具或 IDE 自動擷取，生成文件或顯示說明。</p><p>良好的 Docstring 不僅可以幫助他人快速理解程式碼，也能在開發、維護、協作中扮演關鍵角色。它是「程式碼即文件」理念的具體實踐方式之一。</p><p>Docstring 這種設計在許多語言中都有（例如 Java 的 JavaDoc、C# 的 XML Comments 等），Python 版本因為簡單好用，更成為日常開發不可或缺的一環。</p><hr><h2 id="本文主旨與目標讀者"><a href="#本文主旨與目標讀者" class="headerlink" title="本文主旨與目標讀者"></a>本文主旨與目標讀者</h2><p>我將透過具體的案例來闡述如何寫好 Docstring。</p><p>本文的主要目標讀者，是那些已經在用 Python 開發專案、參與團隊協作的工程師們——在團隊協作的場景下，Docstring 的重要性會遠超過個人開發。</p><p>換言之，Docstring 象徵的是「<strong>溝通的藝術</strong>」XD</p><p>當專案愈來愈複雜，或有新成員加入團隊時，Docstring 會真正展現它的價值：</p><ul><li>協助他人快速理解你的函式用途與用法</li><li>減少口頭或書面文件的補充說明成本</li><li>提升程式碼自我解釋（self-explanatory）的能力</li><li>幫助自己未來回頭維護時快速理解程式</li></ul><p>本文將從「實用角度」出發，分享如何根據不同情境，靈活且有效地撰寫（或選擇不寫）Docstring。</p><h2 id="Docstring-的基本格式與風格"><a href="#Docstring-的基本格式與風格" class="headerlink" title="Docstring 的基本格式與風格"></a>Docstring 的基本格式與風格</h2><p>Python Docstring 的格式與風格並沒有固定的規範，但有一些通用的慣例與建議。</p><p>按照〈<a href="https://peps.python.org/pep-0257/">PEP 257 – Docstring Conventions</a>〉的建議，Docstring 必須用三個雙引號（<code>&quot;&quot;&quot;</code>）包起來。</p><p>以下是 Python 社群中常見的 Docstring 風格：</p><ul><li>Google Style</li><li>Numpy Style</li><li>reStructuredText (Sphinx)</li></ul><p>本文範例皆採用 Google Style，這是我過去工作中使用的風格，它簡潔且容易閱讀。</p><p>不過，我覺得風格不是重點，清楚與一致才是關鍵。</p><p>下一篇文章會介紹如何用 VS Code 的套件快速生成各種風格的 Docstring，這裡就先不深入。</p><hr><h2 id="不是每個函式都需要-Docstring"><a href="#不是每個函式都需要-Docstring" class="headerlink" title="不是每個函式都需要 Docstring"></a><strong>不是每個函式都需要 Docstring</strong></h2><p>Docstring 可以寫在模組、類別與函式的開頭，我們在這裡主要討論函式的 Docstring 撰寫，因為它是最常用，同時也是最需要說明的程式碼元件。</p><p>在開始介紹四個層次之前，有一個觀念必須先釐清：<strong>不是每個函式都需要 Docstring</strong>。</p><p>有些函式，一看就知道用途，例如簡單的資料轉換、資料初始化，或是完全沒有參數。</p><p>這些函式若硬要寫 Docstring，反而可能造成資訊噪音，讓程式難以快速掃描與閱讀。</p><p>簡單來說：</p><blockquote><p>如果一個函式真的「一望即知」，那就不要為寫而寫。</p></blockquote><p>Docstring 的重點在於補充「<strong>別人不容易一眼看懂的東西</strong>」，它是一種基於「同理心」的實踐，而非教條。</p><hr><h2 id="Docstring-的四個層次"><a href="#Docstring-的四個層次" class="headerlink" title="Docstring 的四個層次"></a>Docstring 的四個層次</h2><p>根據不同的情境與複雜度，決定 Docstring 撰寫的詳細程度很重要。</p><p>不過，我也必須承認，在大多數情況下，我們都是透過工具輔助。因此，即使你想把每一個 Docstring 的情境都寫到第三層次，我也不會反對。</p><p>無論如何，在實務情境中，有寫通常比沒寫好☺️ </p><h2 id="一、只有主旨的-Docstring"><a href="#一、只有主旨的-Docstring" class="headerlink" title="一、只有主旨的 Docstring"></a>一、只有主旨的 Docstring</h2><p>有些簡單但<strong>具有意圖</strong>的函式，只需要一句話就足夠。像是以下這種「具有專案情境的基礎函式」，就適合這樣的寫法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_internal_user</span>(<span class="params">email</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;判斷電子郵件是否為內部使用者&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> email.endswith(<span class="string">&quot;@company.com&quot;</span>)</span><br></pre></td></tr></table></figure><p>這樣的 Docstring 雖然簡單，卻仍比沒有好。</p><p>這段主旨的文眼在於「判斷」二字，它直接說明了程式的行為與意圖，別人一眼就能「確信」這個函式<strong>打算做什麼</strong>。</p><h3 id="錯誤示範"><a href="#錯誤示範" class="headerlink" title="錯誤示範"></a><strong>錯誤示範</strong></h3><p>要寫好一行式的 Docstring 有時並不容易，我們偶爾會陷入<strong>過於細節的描述</strong>，以下就是一個不太好的示範：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;透過 SQL 查詢比對用戶的電子郵件是否為內部使用者&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>這種寫法就太底層了，提到了那些不必要的細節（SQL 查詢），容易讓人摸不著頭緒。Docstring 應描述高階意圖，而非內部細節。</p><hr><h2 id="二、主旨-說明（加上-context，讓人看得懂用在什麼情境）"><a href="#二、主旨-說明（加上-context，讓人看得懂用在什麼情境）" class="headerlink" title="二、主旨 + 說明（加上 context，讓人看得懂用在什麼情境）"></a>二、主旨 + 說明（加上 context，讓人看得懂用在什麼情境）</h2><p>當函式稍微複雜，或有特定使用情境時，就不適合只寫一句話。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clear_user_session</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    清除使用者的登入狀態</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    此操作會立即登出使用者，需要重新登入</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>注意這裡，主旨和說明中間有<strong>一行空白</strong>。這不僅格式美觀，也是許多 IDE 或文件生成工具提取摘要的重要依據。</p><p>清除登入狀態後需要重新登入，直接在 Docstring 說明能<strong>避免不必要的推測</strong>，這樣的補充既實用又貼心。</p><h3 id="說明的變化與彈性"><a href="#說明的變化與彈性" class="headerlink" title="說明的變化與彈性"></a>說明的變化與彈性</h3><p>說明沒有一定規則，重點在於補充那些「使用者不容易自行推測」的資訊。</p><p>你覺得<strong>最需要提醒使用者（開發者）什麼</strong>，你就寫下這些內容。我們下面「第四層次」時會再舉例。</p><p>只要能幫助他人更好理解，怎麼寫都可以。</p><hr><h2 id="3-主旨-參數與-return"><a href="#3-主旨-參數與-return" class="headerlink" title="3. 主旨 + 參數與 return"></a>3. 主旨 + 參數與 return</h2><p>若函式有多個參數，清楚列出參數與回傳型態與說明，能大幅降低理解門檻。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_discounted_price</span>(<span class="params">original_price, discount_rate</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    計算折扣後的價格</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        original_price (float): 原價</span></span><br><span class="line"><span class="string">        discount_rate (float): 折扣率，介於 0 到 1 之間</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        float: 折扣後的價格</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> original_price * (<span class="number">1</span> - discount_rate)</span><br></pre></td></tr></table></figure><p>這個第三層次，大概是我們寫 Docstring 時<strong>最常使用的格式</strong>！</p><p>因為函式往往都有參數、回傳值，而參數與回傳是最容易讓人感到困惑的地方。</p><p>我們可以想像：同事寫了一個共用函式，現在你要去調用它，那你肯定需要知道，它應該有什麼樣的 input，以及調用之後會得到<strong>什麼樣的結果</strong>。</p><p>如果你不清楚這些，就根本無法正常使用。</p><p>因此，在有參數的函式裡，每個參數代表什麼，包括參數型別，都很重要。</p><p>Docstring 的價值在這裡得到了充分發揮。</p><h3 id="說明的轉換"><a href="#說明的轉換" class="headerlink" title="說明的轉換"></a>說明的轉換</h3><p>細心的你可能發現了，這個例子沒有一段獨立的說明。</p><p>原因很簡單，在這個地方的說明，<strong>已經化為了對 input 跟 output 的闡釋。</strong></p><p>通常再寫一段說明，可能會有些冗餘。</p><p>不過，你一樣可以在這裡寫說明。我們在下一個層次的例子中會展示這一點。</p><p>只是要提醒，在這種有參數的情境下，說明落段往往會被省略。 </p><hr><h2 id="四、主旨-說明-參數與回傳-範例"><a href="#四、主旨-說明-參數與回傳-範例" class="headerlink" title="四、主旨 + 說明 + 參數與回傳 + 範例"></a>四、主旨 + 說明 + 參數與回傳 + 範例</h2><p>有了舉例，就算不清楚函式細節，也能迅速理解它的用途與結果。</p><p>這個場景中，資料庫裡面有一個欄位已經儲存了格式化過的 Mac 地址，長這樣：<code>1234567890AB</code>。</p><p>我們要從 API 回傳給前端的時候，需要做一些處理，它讓變成這樣：<code>12 34 56 78 90 AB</code>。</p><p>它真正的邏輯只有這一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; &quot;</span>.join(mac_address[i : i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">12</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>但如果你看程式碼，應該不太可能一眼就看出它處理的結果啦！——除非你是 AI。</p><p>但加上舉例之後就一目了然了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">format_output_mac_address</span>(<span class="params">mac_address: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    對要輸出至 UI 的 MAC address 格式化</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    注意：僅供「序列化」時提高可讀性使用，不是對進入資料庫的資料做處理</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        mac_address (str): MAC address，來源為資料庫</span></span><br><span class="line"><span class="string">        格式:</span></span><br><span class="line"><span class="string">            1. 12 位數字(含英文)，不含冒號</span></span><br><span class="line"><span class="string">            2. 英文必為大寫</span></span><br><span class="line"><span class="string">        範例: 1234567890AB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: 格式化後的 MAC address</span></span><br><span class="line"><span class="string">        範例: 1234567890AB -&gt; 12 34 56 78 90 AB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        ValueError: MAC address 長度不為 12</span></span><br><span class="line"><span class="string">        TypeError: MAC address 不是字串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(mac_address) != <span class="number">12</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(_(<span class="string">&quot;MAC address must be 12 digits&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(mac_address, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(_(<span class="string">&quot;MAC address must be string&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot; &quot;</span>.join(mac_address[i : i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">12</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>使用範例能讓讀者一秒理解「怎麼用」與「會拿到什麼結果」。這是許多 Docstring 被忽略的超級關鍵。</p><h3 id="舉例的重要性"><a href="#舉例的重要性" class="headerlink" title="舉例的重要性"></a>舉例的重要性</h3><p>這個例子的 output 其實算是很單純的了。</p><p>很多時候，函式的 output 可能是一個字典，究竟有哪些 key、value？一言難盡！</p><p>這種情況的舉例就會變得特別重要：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_summary</span>(<span class="params">user_id: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    (略)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    範例:</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;name&quot;: &quot;Alice&quot;,</span></span><br><span class="line"><span class="string">            &quot;last_login&quot;: datetime.datetime(2025, 5, 3, 12, 30),</span></span><br><span class="line"><span class="string">            &quot;quota&quot;: (520, 1000)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>作為函式的調用方，我很可能需要直接使用回傳值裡面的元素，所以我希望能一眼就看出這個 output 到底是什麼、<strong>長得什麼樣</strong>——舉例真的很重要。</p><p>在我看來，舉例幾乎是最關鍵的 context 補充方式。</p><hr><h2 id="結語：寫給「下一個開發者」的情書"><a href="#結語：寫給「下一個開發者」的情書" class="headerlink" title="結語：寫給「下一個開發者」的情書"></a>結語：寫給「下一個開發者」的情書</h2><p>Docstring 就像一封情書，寫給未來的自己、同事或其他開發者。</p><p>我打從心底認為，Docstring 有著<strong>十分務實</strong>的一面。</p><p>從本文的例子中，你能夠感受到在<strong>有和沒有</strong> Docstring 的情況下，理解這些程式碼所需要的<strong>時間與認知負擔差距</strong>。</p><p>而這正是 Docstring 的價值所在。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8qdJkr4.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在〈&lt;a href=&quot;https://blog.kyomind.tw/beyond-the-basic-stuff-with-python-03/&quot;&gt;Docstring 的重要性——《Python 功力提升的樂趣》&lt;/a&gt;〉一文中，我提到了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docstring 也不是有寫就行，還需要從「&lt;strong&gt;讀者&lt;/strong&gt;（也就是你的同事）」的角度去思考與表達。不然看起來會很像開發者的自言自語——沒人看得懂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在工作上使用 Python 多年，即便是經驗豐富的 Python 工程師，很多人也未必養成了寫 Docstring 的習慣。&lt;/p&gt;
&lt;p&gt;畢竟在日常趕專案的場景下，一段程式碼能 work，比「好讀、好理解」更重要——至少更急迫。&lt;/p&gt;
&lt;p&gt;然而，當專案逐漸擴大、團隊成員增加時，沒有良好的 Docstring，協作的痛苦就會慢慢浮現。&lt;/p&gt;
&lt;p&gt;Docstring 不是單純寫給自己的備忘，而是寫給「下一個會看這份程式的人」。&lt;/p&gt;
&lt;p&gt;當你開始用這個角度思考，你會發現，寫好 Docstring 並不是加分項，而是基本功。&lt;/p&gt;
&lt;p&gt;那到底要怎麼樣才能寫好 Python Docstring 呢？作為 Docstring 的信奉者，本文將分享我在過去工作經驗中所累積的 Docstring 寫作心得，或者說教學指南吧！&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/8qdJkr4.png" type="image"/>
    
    
    <category term="軟體開發" scheme="https://blog.kyomind.tw/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
    <category term="Python" scheme="https://blog.kyomind.tw/tags/Python/"/>
    
    <category term="Code Formatting" scheme="https://blog.kyomind.tw/tags/Code-Formatting/"/>
    
    <category term="Clean Code" scheme="https://blog.kyomind.tw/tags/Clean-Code/"/>
    
  </entry>
  
  <entry>
    <title>從 DigitalOcean 到 Hetzner：我為何轉向這家德國 VPS 供應商</title>
    <link href="https://blog.kyomind.tw/hetzner/"/>
    <id>https://blog.kyomind.tw/hetzner/</id>
    <published>2025-04-26T10:21:02.000Z</published>
    <updated>2025-04-27T16:01:24.573Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/GhElIMy.jpeg" alt="from Pixabay"><span class="cap">from Pixabay</span>  </p><p>很長一段時間裡，當我需要使用<strong>虛擬機器</strong>（Virtual Machine）來部署自己的個人專案時，來自美國的 <a href="https://www.digitalocean.com/">DigitalOcean</a> 一直是我的首選。</p><p>可能是因為這個「海洋」的意象讓人覺得很舒服吧！價格也還過得去。</p><p>我曾在這篇〈<a href="https://blog.kyomind.tw/update-my-droplet/">計畫更新我的 DigitalOcean VM</a> 〉提過它。</p><p>然而，最近決定在 VM 上部署 Memos 時，我的選擇就不再是 DigitalOcean 了。</p><blockquote><p>相關文章：<a href="https://blog.kyomind.tw/memos/">開源工具 Memos：寫日記的好選擇</a></p></blockquote><p>原因無他，我們有了<strong>更便宜、更強大</strong>的選擇——也就是本文要介紹的 Hetzner。</p><p>在這篇文章中，我將分享我從 DigitalOcean 轉向 Hetzner 的原因，以及這個德國 VPS 供應商的優勢和劣勢。</p><p>我們開始吧！</p><span id="more"></span><hr><h2 id="偶然遇見-Hetzner"><a href="#偶然遇見-Hetzner" class="headerlink" title="偶然遇見 Hetzner"></a>偶然遇見 Hetzner</h2><p>如前所述，我使用 DigitalOcean 的 VM 很長一段時間。</p><p>基本款從最初的每月 5 美元，到後來漲到了 6、7 美元，儘管覺得有些小貴，但因為 DigitalOcean 在新加坡有機房，從台灣連過去延遲較低，大約 100 多毫秒，而且已經習慣，所以也沒想過另尋「新歡」。</p><p>直到有一天，我在 Twitter 上偶然看到有人提到 Hetzner——這才意識到，原來世界上還有這麼這麼「便宜」的 VPS 選擇 ！</p><p>不過在此之前，我們還是先來介紹一下，本文前面說到的 VM 或者是 VPS 究竟是什麼東西呢？ </p><h2 id="VPS-是什麼？為什麼需要-VPS？"><a href="#VPS-是什麼？為什麼需要-VPS？" class="headerlink" title="VPS 是什麼？為什麼需要 VPS？"></a>VPS 是什麼？為什麼需要 VPS？</h2><p>VPS，全名 Virtual Private Server，是<strong>從一台實體伺服器上虛擬出來的獨立空間</strong>。它讓你用租用價格，享受類似獨立主機的自由。</p><p>對於愛搞 side project 的開發者來說，有一台自己的 VPS，意味著能自由部署應用、測試新技術、建立個人服務。不必擔心免費平台的流量限制，也不用和別人搶資源。</p><p>其實我覺得最重要的就是——<strong>你獲得了一個固定 IP</strong>，讓別人可以 24 小時連線。</p><p>VPS 和 VM（Virtual Machine）其實本質很接近。</p><p>簡單來說，VM 是指「虛擬機器」這個技術本身，或指特定的虛擬機器，而 VPS 則是把這種技術<strong>商品化</strong>、打包成一個<strong>可以租用的服務</strong>。</p><p>你可以把 VPS 想成「雲端的 VM，加上管理和網路資源」，對一般開發者來說，兩者在定義區分上幾乎沒什麼區別。</p><h3 id="VPS-供應商"><a href="#VPS-供應商" class="headerlink" title="VPS 供應商"></a>VPS 供應商</h3><p>說到 VPS，市場上的選擇非常多。從大型的雲端服務商（像是 AWS、Azure、Google Cloud），到專門提供 VPS 的公司（像是 Linode、DigitalOcean、Hetzner）都有各自的定位。</p><p>不同的服務商，價格、規格、連線速度也各有差異。</p><p>雲端服務商提供的服務品質通常很高，因為他們有自己的資料中心，但價格也往往最貴，彈性最大。</p><p>除非很有錢，不然我不會直接去這些地方開 VM 來用。</p><p>而本文的主角，則是來自德國的這家公司——Hetzner。</p><hr><h2 id="Hetzner-公司簡介"><a href="#Hetzner-公司簡介" class="headerlink" title="Hetzner 公司簡介"></a>Hetzner 公司簡介</h2><p><a href="https://zh.wikipedia.org/zh-tw/Hetzner">Hetzner</a> 成立於 1997 年，總部位於德國巴伐利亞州的 Gunzenhausen。旗下的服務非常多元，包括但不限於：</p><ul><li>Cloud Hosting（雲端虛擬伺服器）</li><li>Dedicated Hosting（專用伺服器租賃）</li><li>Storage Boxes（線上儲存空間）</li></ul><p>Hetzner 擁有多個資料中心，分別位於德國、芬蘭、美國和新加坡，涵蓋歐洲、美洲與亞洲地區。</p><p>本文用到的服務，就是 Cloud Hosting，也就是 VPS 服務。</p><p>說真的，如果不是看推特，我大概很難知道這家公司的存在。</p><p>畢竟，歐洲公司對我們來說都是相對陌生的。</p><hr><h2 id="Hetzner-vs-DigitalOcean：價差與規格對比"><a href="#Hetzner-vs-DigitalOcean：價差與規格對比" class="headerlink" title="Hetzner vs DigitalOcean：價差與規格對比"></a>Hetzner vs DigitalOcean：價差與規格對比</h2><p>為什麼要換供應商呢？其實很簡單，當然是因為<strong>錢和爽度</strong>囉！</p><p>Hetzner 用你難以想像的價格，提供了遠超預期的硬體資源——德國人就是猛XD</p><h3 id="價格與規格比較"><a href="#價格與規格比較" class="headerlink" title="價格與規格比較"></a>價格與規格比較</h3><p>以下是 DigitalOcean 和 Hetzner 在類似價格區間（7 美元）的方案規格對比：</p><table><thead><tr><th>項目</th><th>DigitalOcean</th><th>Hetzner</th></tr></thead><tbody><tr><td>CPU</td><td>1 核心</td><td>4 核心（ARM）</td></tr><tr><td>RAM</td><td>1 GB</td><td>8 GB</td></tr><tr><td>硬碟空間</td><td>25 GB SSD</td><td>80 GB SSD</td></tr><tr><td>月費價格</td><td>7 美元</td><td>6.49 歐元（約 7 美元）</td></tr><tr><td>可用頻寬</td><td>1 TB 流量</td><td>20 TB 流量</td></tr></tbody></table><p>以幾乎相同的價格，Hetzner 提供了 <strong>4 倍的 CPU</strong>、<strong>8 倍的記憶體</strong>，以及更大的硬碟空間和流量。</p><p>我感覺十分阿妹竟（Amazing）！</p><p>其它不論，光 RAM 的大小其實就<strong>很影響使用體驗</strong>——沒有 2 GB 真的會比較辛苦。</p><p>我請 AI 查了一下，如果 DigitalOcean 要達到右邊 Hetzner 的規格，大概需要一個月 28 美元。</p><p>這個差距，讓人想要不變心都難🥹 </p><hr><p>等等，你先別急著掏出信用卡！</p><p>重點是接下來的部分——<strong>連線速度</strong>與<strong>註冊審核</strong>。</p><p>一言以蔽之：Hetzner 對台灣的延遲不太友好。</p><h2 id="實際測試：Latency-比較"><a href="#實際測試：Latency-比較" class="headerlink" title="實際測試：Latency 比較"></a>實際測試：Latency 比較</h2><p>為了有更直觀的數據，我使用了 <a href="https://www.cloudpingtest.com/">cloudpingtest.com</a> 測試了它所屬 VM 的延遲表現。</p><p>測試環境：中華電信 4G 手機網路。</p><p>以下是測試結果，可以看出，Hetzner 無論你選哪個資料中心，延遲的表現<strong>都不是很好</strong>——尤其是歐洲：</p><p><img src="https://i.imgur.com/G7ETZ7p.png" alt="測試時間為晚上高峰期，網路環境為中華電信 4G，結果僅供參考"><span class="cap">測試時間為晚上高峰期，網路環境為中華電信 4G，結果僅供參考</span>  </p><p>以上是我在晚上高峰時段測試的，白天會稍微好一些，但基本上，歐洲機房的<strong>平均延遲</strong>不會低於 600 ms。</p><p>600 毫秒延遲是什麼概念？可以理解成：<strong>你發出一個請求，伺服器在 0.6 秒後才會收到並開始處理——好久XD</strong></p><p>美國和新加坡的機房會好一點——就一點，但<strong>價格也更貴（尤其是新加坡）</strong>，這需要你自行拿捏。</p><p>我是覺得，如果選到新加坡機房，可能還不如直接選 DigitalOcean。</p><p>DigitalOcean 的新加坡機房延遲基本上只有 100 多毫秒，可以說表現極佳。</p><hr><h2 id="Hetzner-的客戶認證與註冊流程"><a href="#Hetzner-的客戶認證與註冊流程" class="headerlink" title="Hetzner 的客戶認證與註冊流程"></a>Hetzner 的客戶認證與註冊流程</h2><p>除了延遲偏高，Hetzner 另一個讓人討厭的點，就是身分認證流程。</p><p>Hetzner 的註冊流程<strong>相當嚴謹</strong>，堪比虛擬貨幣交易所XD，遠比一般雲端服務供應商麻煩得多。官方說，這主要是為了防範濫用與確保整體服務品質。</p><p>通常在註冊時，你可能需要：</p><ul><li>上傳有效身分證明（例如護照或身分證）</li><li>綁定信用卡或其他付款方式</li><li>等待人工審核通過</li></ul><p>這個過程從幾小時到一兩天都有可能。雖然初期略嫌麻煩，但換來的是更穩定的使用體驗。所以我覺得還可以接受。</p><hr><p>綜上所述，你主要需要考慮的，就是<strong>這個延遲你是否能夠接受</strong>。像我主要就是做我自己的東西而已，不是要提供給別人用的，所以還行。</p><p>但如果是要給別人用的，600 毫秒的延遲，絕對是<strong>有感的慢</strong>😂 </p><hr><h2 id="結語：價格與需求的平衡"><a href="#結語：價格與需求的平衡" class="headerlink" title="結語：價格與需求的平衡"></a>結語：價格與需求的平衡</h2><p>這次轉戰 Hetzner，最大的收穫就是重新認識了「原來 VM 可以這麼便宜！」</p><p>不是每個人都適合 Hetzner。如果你的專案對延遲極度敏感，那麼 DigitalOcean 這類更接近台灣、連線快的服務仍然更合適。（或者選直接在台灣有機房的 GCP）</p><p>但如果你重視的是「<strong>用最低的成本拿到最好的資源</strong>」，那麼 Hetzner 絕對值得列入你的選項清單。</p><p>而且我很認同它對客戶的嚴格審查，哈哈哈！</p><p>總之，有些改變，不是因為原本不好，而是因為找到了更適合自己的地方。</p><p>下一篇將介紹，如何在 Hetzner 上開一台新主機，以及相關的注意事項。敬請期待。</p><hr><h2 id="推廣資訊：使用我的推薦連結，享受免費額度（尚未實現🙏）"><a href="#推廣資訊：使用我的推薦連結，享受免費額度（尚未實現🙏）" class="headerlink" title="推廣資訊：使用我的推薦連結，享受免費額度（尚未實現🙏）"></a>推廣資訊：使用我的推薦連結，享受免費額度（尚未實現🙏）</h2><p>如果你也想試試 Hetzner，可以使用我的推薦連結註冊，新用戶可以直接獲得 <strong>20 歐元的使用額度</strong>，等於可以免費用一台小型 VPS 一段時間。</p><p>小提醒：如果你透過我的推薦連結註冊並付費，未來我也有機會拿到 10 歐元的回饋。不過目前還在努力達標XD</p><blockquote><p><strong>我剛開始用不久，目前還不符合推薦資格，所以連結還不存在XD，你可以先去找別人的連結來用——20 歐不拿白不拿，或等我三個月後符合資格。</strong></p></blockquote><p>當初我已經身分認證完了，才知道有上述 20 歐元額度可以拿，不禁有點扼腕！</p><p>👉 推薦連結（日後補上）</p><p>希望這篇分享能幫助你，在選擇 VPS 的路上，多一個可靠的選擇。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/GhElIMy.jpeg&quot; alt=&quot;from Pixabay&quot;&gt;  &lt;/p&gt;
&lt;p&gt;很長一段時間裡，當我需要使用&lt;strong&gt;虛擬機器&lt;/strong&gt;（Virtual Machine）來部署自己的個人專案時，來自美國的 &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt; 一直是我的首選。&lt;/p&gt;
&lt;p&gt;可能是因為這個「海洋」的意象讓人覺得很舒服吧！價格也還過得去。&lt;/p&gt;
&lt;p&gt;我曾在這篇〈&lt;a href=&quot;https://blog.kyomind.tw/update-my-droplet/&quot;&gt;計畫更新我的 DigitalOcean VM&lt;/a&gt; 〉提過它。&lt;/p&gt;
&lt;p&gt;然而，最近決定在 VM 上部署 Memos 時，我的選擇就不再是 DigitalOcean 了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相關文章：&lt;a href=&quot;https://blog.kyomind.tw/memos/&quot;&gt;開源工具 Memos：寫日記的好選擇&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因無他，我們有了&lt;strong&gt;更便宜、更強大&lt;/strong&gt;的選擇——也就是本文要介紹的 Hetzner。&lt;/p&gt;
&lt;p&gt;在這篇文章中，我將分享我從 DigitalOcean 轉向 Hetzner 的原因，以及這個德國 VPS 供應商的優勢和劣勢。&lt;/p&gt;
&lt;p&gt;我們開始吧！&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/GhElIMy.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="付費訂閱" scheme="https://blog.kyomind.tw/tags/%E4%BB%98%E8%B2%BB%E8%A8%82%E9%96%B1/"/>
    
  </entry>
  
  <entry>
    <title>開源工具 Memos：寫日記的好選擇</title>
    <link href="https://blog.kyomind.tw/memos/"/>
    <id>https://blog.kyomind.tw/memos/</id>
    <published>2025-04-05T05:56:11.000Z</published>
    <updated>2025-04-14T14:00:43.801Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/OCwkXLz.png">  </p><p>你寫日記嗎？</p><p>你想像中的日記是什麼模樣？充滿積極與規劃，還是對內心的失落與探索？</p><p>時間飛逝，從這篇<a href="https://www.facebook.com/share/p/18UV2Yz6ya/">臉書貼文</a>起算，轉眼之間，我已經用 Memos 寫日記超過一年了。</p><p>寫這篇文章，是想跟大家分享我選擇 Memos 的原因、這段期間的心得，以及為什麼我認為它是「寫日記」這件事上，最適合我的工具。</p><p>不過，我們還是先從「<strong>為什麼要寫日記</strong>」開始說起吧！</p><hr><h2 id="為什麼我要寫日記？"><a href="#為什麼我要寫日記？" class="headerlink" title="為什麼我要寫日記？"></a>為什麼我要寫日記？</h2><p>前面提到的臉書貼文，有指出其中的原因，那時的我是這樣說的：</p><blockquote><p>因為想要記錄當下的想法和心情<br>現在回想當時，我只會覺得那時的日子很充實<br>但我已經不記得那時自己都在想些什麼、擔心什麼<br>　<br>美好的一面，很多時候是給別人看的<br>對我而言，我更想知道，那時的自己，是如何的狼狽、焦慮與不安<br>唯有這些，才能讓現在的我產生共鳴，進而更加理解自己<br>　<br>可惜，我已經很難回想起來了<br>雖然肯定有留下一些文字記錄，但說真的，我早已忘記它們在哪<br>真的太可惜了！ </p></blockquote><p>對那時的我來說，寫日記可說是一種「讓自己變得積極」的方法。</p><p>不過，現在的我，不太喜歡用這種「過於積極」的角度來看待這件事情。</p><p>我覺得這樣的心態，對「寫日記」而言是不健康的。</p><p>這個就跟〈<a href="/feel-good-productivity/">《高效原力》書評：做人要 NICE，不要 SMART？</a> 〉中提到的，對「休息是為了走更長遠的路」這類心態的<strong>反感</strong>一樣——不用那麼複雜啦！</p><span id="more"></span><h3 id="寫日記的意義"><a href="#寫日記的意義" class="headerlink" title="寫日記的意義"></a>寫日記的意義</h3><p>我想說，寫日記絕對有它積極的一面，但我更希望這是一個<strong>附帶的結果</strong>，而不是目的。 </p><p>如果你問我「那什麼才是目的？」，現在的我會回答：</p><blockquote><p>寫日記的目的，就是讓自己的內心狀態——尤其是那些負面的情緒、焦慮與不安，有一個可以安置的地方，<strong>讓它們暫時被溫柔地放下來</strong>。</p></blockquote><p>隨著年紀的增長，我對於這類「心靈需求」可謂是愈來愈有感。 </p><p>對我而言，它比任何時間管理或積極向上的方法論，可能都來得重要。 </p><p>一言以蔽之：<strong>我需要一個歸屬</strong>。</p><hr><p>說完寫日記的原因與需求，接下來討論用什麼工具來寫。</p><h2 id="傳統寫日記方式的困擾"><a href="#傳統寫日記方式的困擾" class="headerlink" title="傳統寫日記方式的困擾"></a>傳統寫日記方式的困擾</h2><p>如果你能夠用紙本來寫日記，我認為這是一個<strong>非常理想</strong>的做法，繼續保持即可！</p><p>如果你跟我一樣對於寫字有困擾，或者更依賴數位工具，那麼我可以先分享我的嘗試與經驗 。</p><p>過去我曾嘗試過用 Notion 寫日記：開一個 database。</p><p>它功能強大，彈性高，但在寫「日記」這件事上，就顯得有點殺雞用牛刀了——很多次嘗試，都持續不了多久 。</p><p>像 Bear、UpNote  這些「<strong>類 Evernote</strong>」軟體，相較於 Notion 它們<strong>更輕量</strong>，理論上是更合適的選擇。</p><blockquote><p>相關文章：</p><ul><li><a href="https://blog.kyomind.tw/bear/">Evernote 替代方案——筆記軟體 Bear 2 升級心得</a></li><li><a href="https://blog.kyomind.tw/upnote/">筆記軟體 UpNote 最吸引我的三大亮點</a></li></ul></blockquote><p>因為結構簡單，只要下一個標籤或建立一個筆記本，就可以開始寫了。</p><p>我也試過一陣子啦！但還是覺得不盡理想。</p><h3 id="回顧體驗不佳"><a href="#回顧體驗不佳" class="headerlink" title="回顧體驗不佳"></a>回顧體驗不佳</h3><p>用這些筆記工具來寫日記，最大的困境究竟是什麼？</p><p>我認為是「回顧」。</p><p>換句話說，它們最大問題在於「回顧體驗不佳」。</p><p>以 UpNote 為例，想像一下（圖片中並不是日記，主要是要看 UI），你要回顧上個月或這一週寫的日記，那你一定是<strong>一個一個點擊</strong>。</p><p><img src="https://i.imgur.com/DWLOjEx.png" alt="在這個中間選單中，一個一個點擊"><span class="cap">在這個中間選單中，一個一個點擊</span>  </p><p>這真的很不方便！</p><p>使用 Notion 的 database 也有類似的情況，當然你說 database 可以把內容直接顯示在畫面上。沒錯，我做過，但如此一來，該欄位的排版方便程度也會大幅下降。 </p><p>上述這些我都試過，但我覺得回顧或做記錄時的阻力，都會造成<strong>我很難持續</strong>用它們來寫日記。</p><p>此外，筆記軟體中往往混雜各種資料夾、標籤、專案，這對寫日記也是一種<strong>干擾</strong>！</p><p>就在這個山窮水複疑無路之際，所幸，我發現了 Memos。</p><hr><h2 id="Memos-簡介"><a href="#Memos-簡介" class="headerlink" title="Memos 簡介"></a>Memos 簡介</h2><p><a href="https://github.com/usememos/memos">Memos</a> 是一款開源、輕量級的備忘與記錄工具，主要以「即時、簡潔、<strong>時間序列</strong>」為核心設計理念。</p><p><img src="https://i.imgur.com/GIxpqs5.png" alt="Memos"><span class="cap">Memos</span>  </p><p>它不像 Notion 那樣強調多層次的結構，也不像其它筆記軟體那樣重視分類或標籤——儘管它也支援標籤。</p><p>而是<strong>介於「社群動態」與「個人備忘」之間的形式</strong>。</p><p>每一則 memo 都像是一則私人動態（要公開也是可以公開），簡單、快速地記下當下的心情、想法或待辦事項。</p><p>不只如此，你可以將它部署在自己的電腦或雲端主機上，資料完全掌握在自己手中。這對於在意隱私、希望長期保存紀錄的使用者來說，格外重要。</p><p>Memos 適合的使用情境很多，從寫日記、每日小結、靈感閃現、到工作上的備忘都能涵蓋。</p><p>它的極簡設計也讓人更容易持續使用，不會有「要寫很久、很正式」的壓力。</p><hr><p>請容我再進一步闡述：<strong>為什麼 Memos 很適合寫日記</strong>。</p><h2 id="Memos-的優勢"><a href="#Memos-的優勢" class="headerlink" title="Memos 的優勢"></a>Memos 的優勢</h2><p>Memos 的介面非常簡潔，就像<strong>極簡版的臉書塗鴉牆</strong>。</p><p>打開畫面，就可以直接開始寫下一則「memo」。每一則都是獨立的段落，依照時間排列，上下滑動就能瀏覽，不需額外點擊。</p><p>那太久以前的日記怎麼辦？它有「行事曆」可以選日期，方便你回顧——這是你在臉書開小帳號所做不到的了，哈哈哈。</p><p>這樣的設計，剛好切中我對日記工具的核心需求：</p><table><thead><tr><th>特點</th><th>說明</th></tr></thead><tbody><tr><td>時間軸式介面</td><td>像社群平台一樣滑過紀錄，近期回顧自然流暢</td></tr><tr><td>輕量書寫</td><td>不需標題命名（這很重要）、不用整理，寫下來就好</td></tr><tr><td>支援搜尋與標籤</td><td>想找內容時，仍可精確搜索</td></tr><tr><td>自架、資料自有</td><td>無需擔心平台關閉或資料隱私</td></tr><tr><td>專為記錄而生</td><td>與筆記工具不同，更適合日常心情與思緒的流動式記錄</td></tr></tbody></table><p>綜上所述，Memos 就像是一個「寫給自己的社群平台」，也是我理想中日記工具。</p><hr><h2 id="我的-Memos-書寫經驗"><a href="#我的-Memos-書寫經驗" class="headerlink" title="我的 Memos 書寫經驗"></a>我的 Memos 書寫經驗</h2><p>心動了嗎？別急，不妨再聽聽我的使用感受。</p><p>其實我並不是每天都寫一回，而是想到什麼就會寫下來。雖然不一定是每天，但數量確實不少。在一年多的使用時間裡，大概寫了 600 多則吧：</p><blockquote><p>635 memos in 413 days</p></blockquote><p>參考前面說的，我想再聊聊，我的一些使用細節與心得。</p><h3 id="關於標題"><a href="#關於標題" class="headerlink" title="關於標題"></a>關於標題</h3><p>寫 memo 不需要對日記標題進行命名，就像寫社群發文一樣。這一定程度降低了寫日記的摩擦力。</p><p>筆記軟體大部分時候都需要對標題命名。雖然我們可以用日期當作名稱，但<strong>多一個標題就多一個阻力</strong>。</p><p>當然，也有些人樂於為每天的日記下一個好標題，所以這點見仁見智。 </p><h3 id="要用標籤嗎？"><a href="#要用標籤嗎？" class="headerlink" title="要用標籤嗎？"></a>要用標籤嗎？</h3><p>一開始我會對這些日記用標籤分類，方便回顧。</p><p>這個習慣顯然是我從筆記軟體帶過來的。</p><p>但隨著日記數量越來越多，我覺得標籤也<strong>漸漸成為了一種負擔</strong>：一來是<strong>標籤太多</strong>，二來是很多事情<strong>難以分類</strong>——這成為了另一種寫作上的摩擦力。</p><p>因此，我個人推薦<strong>不要</strong>為你的 memos 加上任何標籤。 </p><p>寫就對了！</p><h3 id="怎麼部署比較好？"><a href="#怎麼部署比較好？" class="headerlink" title="怎麼部署比較好？"></a>怎麼部署比較好？</h3><p>雖然前面說了它這麼多好話，但有一點是我們<strong>不可忽略</strong>的，那就是你要自行「部署」。</p><p>換句話說，<strong>如果你沒有部署這個工具，那你根本就無從使用！</strong></p><p>這對不熟程式的人來說，是一個困擾，甚至是主要的門檻。</p><p>既然推薦了它，這部分我會另寫一篇文章來介紹與討論——甚至是兩篇，請不用擔心。</p><p>順帶一提，我自己是用 Docker 本地部署。</p><hr><h2 id="小結：留下些什麼"><a href="#小結：留下些什麼" class="headerlink" title="小結：留下些什麼"></a>小結：留下些什麼</h2><p>在〈<a href="https://youtu.be/1iujiTGBeaw?si=uiW9ebubimf3KcHQ">小步舞曲</a>〉MV 中（實際取自電影《<a href="https://zh.wikipedia.org/zh-tw/%E8%97%8D%E8%89%B2%E5%A4%A7%E9%96%80">藍色大門</a>》片段），陳柏霖說：</p><blockquote><p>這個夏天，雖然好像什麼都沒做過就過去了，但是總是會留下一些什麼吧！</p></blockquote><blockquote><p>留下什麼，我們就變成什麼樣的大人。</p></blockquote><p>即使忘掉我前面說的那些寫日記的理由，作為一個人，我也想<strong>留下一些什麼</strong>。</p><p>而在 AI 時代，這樣的意念，只會更加強烈而已。</p><p>如果說公開寫作是試圖為別人留下些什麼，那麼寫日記就是為現在的自己留下記錄。</p><p>看看 5 年、10 年之後，我又變成了什麼樣的大人了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/OCwkXLz.png&quot;&gt;  &lt;/p&gt;
&lt;p&gt;你寫日記嗎？&lt;/p&gt;
&lt;p&gt;你想像中的日記是什麼模樣？充滿積極與規劃，還是對內心的失落與探索？&lt;/p&gt;
&lt;p&gt;時間飛逝，從這篇&lt;a href=&quot;https://www.facebook.com/share/p/18UV2Yz6ya/&quot;&gt;臉書貼文&lt;/a&gt;起算，轉眼之間，我已經用 Memos 寫日記超過一年了。&lt;/p&gt;
&lt;p&gt;寫這篇文章，是想跟大家分享我選擇 Memos 的原因、這段期間的心得，以及為什麼我認為它是「寫日記」這件事上，最適合我的工具。&lt;/p&gt;
&lt;p&gt;不過，我們還是先從「&lt;strong&gt;為什麼要寫日記&lt;/strong&gt;」開始說起吧！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;為什麼我要寫日記？&quot;&gt;&lt;a href=&quot;#為什麼我要寫日記？&quot; class=&quot;headerlink&quot; title=&quot;為什麼我要寫日記？&quot;&gt;&lt;/a&gt;為什麼我要寫日記？&lt;/h2&gt;&lt;p&gt;前面提到的臉書貼文，有指出其中的原因，那時的我是這樣說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因為想要記錄當下的想法和心情&lt;br&gt;現在回想當時，我只會覺得那時的日子很充實&lt;br&gt;但我已經不記得那時自己都在想些什麼、擔心什麼&lt;br&gt;　&lt;br&gt;美好的一面，很多時候是給別人看的&lt;br&gt;對我而言，我更想知道，那時的自己，是如何的狼狽、焦慮與不安&lt;br&gt;唯有這些，才能讓現在的我產生共鳴，進而更加理解自己&lt;br&gt;　&lt;br&gt;可惜，我已經很難回想起來了&lt;br&gt;雖然肯定有留下一些文字記錄，但說真的，我早已忘記它們在哪&lt;br&gt;真的太可惜了！ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;對那時的我來說，寫日記可說是一種「讓自己變得積極」的方法。&lt;/p&gt;
&lt;p&gt;不過，現在的我，不太喜歡用這種「過於積極」的角度來看待這件事情。&lt;/p&gt;
&lt;p&gt;我覺得這樣的心態，對「寫日記」而言是不健康的。&lt;/p&gt;
&lt;p&gt;這個就跟〈&lt;a href=&quot;/feel-good-productivity/&quot;&gt;《高效原力》書評：做人要 NICE，不要 SMART？&lt;/a&gt; 〉中提到的，對「休息是為了走更長遠的路」這類心態的&lt;strong&gt;反感&lt;/strong&gt;一樣——不用那麼複雜啦！&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/OCwkXLz.png" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="個人知識管理" scheme="https://blog.kyomind.tw/tags/%E5%80%8B%E4%BA%BA%E7%9F%A5%E8%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>《高效原力》書評：做人要 NICE，不要 SMART？</title>
    <link href="https://blog.kyomind.tw/feel-good-productivity/"/>
    <id>https://blog.kyomind.tw/feel-good-productivity/</id>
    <published>2025-04-04T01:23:41.000Z</published>
    <updated>2025-04-11T16:43:22.054Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/I4bRpDQ.png" alt="高效原力：用愉悅心態激發生產力，做更多重要的事"><span class="cap">高效原力：用愉悅心態激發生產力，做更多重要的事</span>  </p><p>這是一篇非常「個人」的書評，只講我有興趣的部分。</p><p>老讀者都知道，我對於「生產力」一詞，往往抱持<strong>相對負面</strong>的態度。你也可以說是我的偏見——I think it’s <strong>toxic</strong>。</p><p>尤其是那些對於生產力的<strong>極致追求</strong>，<a href="/less-is-more/">我不喜歡，也不認同</a>。</p><p>就像我在〈<a href="https://kyomind.notion.site/12-Notion-AI-1946a92a98a6804b85afe725fe388031">訂戶限定 12：聊聊寫作 × 我反對生產力最大化 × 再度退訂 Notion AI</a>〉中說的：</p><blockquote><p>在 AI 時代，人不應該（或者說<strong>不值得</strong>）這樣生活、那樣學習。</p></blockquote><p>不過，多虧好友<a href="https://www.facebook.com/dorin.tsai">朵琳小姐</a>的推薦，我還是看了這本書，並且寫下了這篇書評。</p><p>我認為本書確實有可看之處，值得留下幾筆。</p><p>如開頭所言，我只講我有興趣、認同的部分，其餘就直接省略了。</p><hr><h2 id="作者簡介：Ali-Abdaal-是誰？"><a href="#作者簡介：Ali-Abdaal-是誰？" class="headerlink" title="作者簡介：Ali Abdaal 是誰？"></a>作者簡介：Ali Abdaal 是誰？</h2><p><a href="https://www.youtube.com/channel/UCoOae5nYA7VqaXzerajD0lg">Ali Abdaal</a> 是一位從醫學院畢業（也當過實習醫生）的 YouTuber、生產力作家與線上課程創辦人。</p><p>他以分享學習技巧、生產力工具與深度工作法而聞名，經營的 YouTube 頻道累積超過數百萬訂閱者，是當代最具影響力的「生產力 KOL」——或許沒有之一。</p><p>說真的，我對這位作者並不熟悉。我只知道他是個 YouTuber，並且有一個「生產力」的頻道——我想你知道這些也就夠了。</p><span id="more"></span><h2 id="我為什麼想讀這本書？"><a href="#我為什麼想讀這本書？" class="headerlink" title="我為什麼想讀這本書？"></a>我為什麼想讀這本書？</h2><p>除了朋友的推薦，另一方面，我多少還是對這類主題有所興趣。（我只是通常不會照做而已😅）</p><p>或者說，我不認同的生產力是「做很多事」。</p><p>如果重點是<a href="/simple-notion/#%E6%88%91%E4%BB%A5%E7%82%BA%E6%88%91%E6%83%B3%E8%A6%81">把事情做好</a>，仍然值得了解、追求。</p><p>這本書雖然名字叫 Feel-Good Productivity，但它並不是教你怎麼躺平做事，而是引導你用<strong>更溫柔、有效的方式</strong>對待自己的生產力。</p><p>本書強調「<strong>讓你感覺良好</strong>」的生產力，不是用意志力硬撐，而是設計出一種讓你自然想做事的節奏與習慣。</p><h3 id="溫柔而非紀律"><a href="#溫柔而非紀律" class="headerlink" title="溫柔而非紀律"></a>溫柔而非紀律</h3><p>我覺得「<strong>溫柔</strong>」是其中的重點，畢竟生產力一詞往往和「紀律」、「自我要求」掛勾，從而給人一種<strong>沉重的感覺</strong>。</p><p>而本書卻強調要先讓「自我感覺良好」，哈哈哈！這不像一般生產力 KOL 會說的話。</p><p>對自己溫柔，你才會感覺良好嘛！</p><p>我承認，這個切入點確實吸引了我。</p><p>很大程度上，本作可能<a href="/weekly-review-20/#Cal-Newport-%E6%AE%B5%E8%90%BD">比 Cal Newport 的任何一本書更適合一般人</a>XD</p><p>以下是我認為本書的三個重點，從我最有感的開始。</p><hr><h2 id="一、要-NICE，不要-SMART"><a href="#一、要-NICE，不要-SMART" class="headerlink" title="一、要 NICE，不要 SMART"></a>一、要 NICE，不要 SMART</h2><p>你想必聽過「<a href="https://zh.wikipedia.org/zh-tw/SMART%E5%8E%9F%E5%88%99">SMART 原則</a>」，這是職場中常見的目標設定工具。它重視<strong>明確性</strong>與<strong>可衡量</strong>，適合追求<strong>具體成果</strong>的情境（比如升遷、考試、減重等）。</p><p>但我相信沒幾個人真的會用它的設定或執行目標。</p><p>一般而言，SMART 原則主要出現在……你的簡報中。</p><p>原因是，SMART 固然好，但它也太「重」了。</p><p><strong>當你只是想建立一個新習慣、趕快開始行動、或找回對事情的熱情時，SMART 往往太冰冷、太遠、太無趣</strong>。</p><p>它更適合中長期目標。</p><h3 id="NICE-原則"><a href="#NICE-原則" class="headerlink" title="NICE 原則"></a>NICE 原則</h3><p>本書 NICE 原則提供了一個<strong>更貼近生活、更具行動力</strong>的替代方案。</p><p>NICE 四原則是這樣的：</p><ul><li><strong>Near-term（短期）</strong>：設定在近期內能完成的目標。</li><li><strong>Input-based（以輸入為本）</strong>：聚焦在<strong>自己可控制的行為，而非結果</strong>。</li><li><strong>Controllable（可控制）</strong>：減少因外在因素導致失敗的風險。</li><li><strong>Energizing（激發活力）</strong>：目標要<strong>讓你想做</strong>，而不是逼自己完成。</li></ul><p><strong>我們常常設定的目標太大、太遙遠，結果不是拖延，就是陷入無力感</strong>。</p><p>而 NICE 原則的設計，是讓你<strong>今天、此刻就可以做點什麼</strong>，而且做完之後會覺得「我還想繼續做」。</p><h2 id="Input-based——以輸入為本"><a href="#Input-based——以輸入為本" class="headerlink" title="Input-based——以輸入為本"></a>Input-based——以輸入為本</h2><p>這 4 個元素中，其實真正打動我的只有 <strong>Input-based（以輸入為本）。</strong></p><p>它強調：你<strong>不用管</strong>目標為何，只要管「<strong>此時此刻我應該做什麼</strong>」。</p><p>比如「閱讀 30 分鐘」、「散步 10 分鐘」，而不是「為了學習而閱讀」、「為了健康而散步」等等。</p><p><strong>我非常非常喜歡這個看法！</strong></p><p>因為它讓我的壓力大幅下降，確實有兌現書名的承諾——Feel Good！</p><h3 id="以學英文為例"><a href="#以學英文為例" class="headerlink" title="以學英文為例"></a>以學英文為例</h3><p>以我為自己為例吧！</p><p>學英文、考多益，太沉重（主要是太遙遠），想想就累了。</p><p>那<a href="/bbc-6-minute-english/">每天聽半小時的 BBC 6 Minute English</a> 如何？</p><p>我感覺好多了！</p><p>認真思考、計較今天聽的這半小時，對於長遠的英文聽力究竟有多少助益，<strong>實在是一件令人不太愉快的事情</strong>。</p><p>而 NICE 原則（或說其中的 Input-based 原則），則<strong>切斷了這項關聯</strong>！——你只管現在要做啥即可！哈哈哈。</p><h2 id="SMART-vs-NICE"><a href="#SMART-vs-NICE" class="headerlink" title="SMART vs NICE"></a>SMART vs NICE</h2><p>書中還列出了幾個對照範例，幫助我們更清楚兩者的差異：</p><table><thead><tr><th>領域</th><th>SMART 目標</th><th>NICE 目標</th></tr></thead><tbody><tr><td>健康</td><td>三個月內減掉 10 公斤</td><td>每天運動 30 分鐘，實作有趣且可控的運動項目</td></tr><tr><td>事業</td><td>兩年內升為高級經理</td><td>每週花一小時精練一項專業技能，並主動回饋</td></tr><tr><td>教育</td><td>兩年內完成碩士學位</td><td>每天花 30 分鐘複習課程，提升理解力並回顧過去作業</td></tr></tbody></table><p>這些例子讓我們更聚焦「<strong>今天做什麼</strong>」。</p><p>不過我的標題有點取巧啦！作者並沒說不要 SMART，而是建議可以用在長期目標。</p><p>總之，想要 feel good？Let’s be NICE☺️</p><hr><p>接下來這兩點就比較老生常談了。</p><p>我之所以選擇了它們，主要是因為——我一直做不到😂</p><h2 id="二、休息，比你想像得更重要"><a href="#二、休息，比你想像得更重要" class="headerlink" title="二、休息，比你想像得更重要"></a>二、休息，比你想像得更重要</h2><p>我們對「休息」的認知，很多時候都太表面。</p><p>什麼「休息是為了走更長遠的路」啊，豈不是又陷入了 SMART 的沉重感？</p><p>書中最有趣的部分，是強調「<strong>工作中需要的休息，遠比你想像的多</strong>」。</p><p>書中提到，有研究指出最有生產力的人，其實是那些願意<strong>頻繁且深度休息</strong>的人——不是那種工作一小時休息五分鐘的節奏，而是例如「工作 52 分鐘、休息 17 分鐘」這樣的模式。</p><p>你不要太認真——我是指對這段內容別太認真XD。這些可不是什麼嚴謹的研究。</p><p>那些工作中更常休息的人，是不是如書中所言，有著更多「產能」，我持懷疑態度。</p><p>但是，退萬步言，<strong>休息的重要性，確實值得一再強調</strong>。</p><p><strong>因為我們都不擅長休息</strong>。</p><p>我們既不想休息——只想兢兢業業，為目標奮鬥，也不會休息（只會滑手機）。</p><p>很多我們以為的休息，其實根本不是休息！</p><h2 id="三、提防「消耗型行為」"><a href="#三、提防「消耗型行為」" class="headerlink" title="三、提防「消耗型行為」"></a>三、提防「消耗型行為」</h2><p>最後一個重點，是書中提出的「兩張清單法」：</p><ul><li>一張是你在疲憊時會做的「<strong>消耗型行為</strong>」。</li><li>一張是可以真正讓你補充能量的「<strong>充電型行為</strong>」。</li></ul><table><thead><tr><th>精力耗盡時，我們會做的事（消耗能量）</th><th>替我們充電的事情（真正補充能量）</th></tr></thead><tbody><tr><td>看 IG、滑抖音</td><td>散步、練習樂器</td></tr><tr><td>躺著滑手機、看 Netflix 或電影</td><td>聯繫朋友、共進晚餐</td></tr><tr><td>不斷查看 X 平台、對世界憤怒</td><td>前往健身房或做伸展</td></tr><tr><td>吃不健康的外賣</td><td>冥想、瑜伽等身心運動</td></tr></tbody></table><p>如你所知，現代人常見的休息，往往是「消耗型行為」，而不是「充電型行為」。</p><p>當你精力耗盡時，大腦會自動尋找<strong>低門檻快感</strong>來逃避，而這些通常是<strong>消耗性行為，而不是休息</strong>。</p><p>這些資訊，對你而言可能早就不是新聞。</p><p>你知我知——但我們就是做不到，或沒做好。</p><p>「列出兩張清單」的做法，有助於<strong>把下意識的行為轉成有意識的選擇</strong>，幫助我們從疲憊中走出來。</p><p>顯然「身體力行」比「我知道啊！」重要得多。</p><hr><h2 id="結語：對自己溫柔"><a href="#結語：對自己溫柔" class="headerlink" title="結語：對自己溫柔"></a>結語：對自己溫柔</h2><p>整體而言，這三個觀念看似簡單，卻都牽涉到一個更深層的問題：</p><blockquote><p><strong>我們怎麼與自己相處</strong>。</p></blockquote><p><strong>生產力不該是「把自己榨乾」，而是學會「善待那個正在努力的自己」。</strong></p><p><strong>要溫柔且寬容。</strong></p><p>這不容易呀！因為生產力往往給人「你必須勤奮」的禁錮感。</p><p>這也是為何像 Ali Abdaal 這種靠販售「生產力秘技」的 KOL 寫出這樣的一本書時，我會覺得有一種「反差」，進而被吸引了——你贏了！</p><p>平心而論，這本書對我唯一的啟發，就是 <strong>Input-based</strong>，但這很重要。</p><p>光憑這一點，我就願意為它寫一篇書評。</p><p>因為<strong>它讓我在日復一日的 Input-based 活動中，更加自信與堅定。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/I4bRpDQ.png&quot; alt=&quot;高效原力：用愉悅心態激發生產力，做更多重要的事&quot;&gt;  &lt;/p&gt;
&lt;p&gt;這是一篇非常「個人」的書評，只講我有興趣的部分。&lt;/p&gt;
&lt;p&gt;老讀者都知道，我對於「生產力」一詞，往往抱持&lt;strong&gt;相對負面&lt;/strong&gt;的態度。你也可以說是我的偏見——I think it’s &lt;strong&gt;toxic&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;尤其是那些對於生產力的&lt;strong&gt;極致追求&lt;/strong&gt;，&lt;a href=&quot;/less-is-more/&quot;&gt;我不喜歡，也不認同&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;就像我在〈&lt;a href=&quot;https://kyomind.notion.site/12-Notion-AI-1946a92a98a6804b85afe725fe388031&quot;&gt;訂戶限定 12：聊聊寫作 × 我反對生產力最大化 × 再度退訂 Notion AI&lt;/a&gt;〉中說的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 AI 時代，人不應該（或者說&lt;strong&gt;不值得&lt;/strong&gt;）這樣生活、那樣學習。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不過，多虧好友&lt;a href=&quot;https://www.facebook.com/dorin.tsai&quot;&gt;朵琳小姐&lt;/a&gt;的推薦，我還是看了這本書，並且寫下了這篇書評。&lt;/p&gt;
&lt;p&gt;我認為本書確實有可看之處，值得留下幾筆。&lt;/p&gt;
&lt;p&gt;如開頭所言，我只講我有興趣、認同的部分，其餘就直接省略了。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;作者簡介：Ali-Abdaal-是誰？&quot;&gt;&lt;a href=&quot;#作者簡介：Ali-Abdaal-是誰？&quot; class=&quot;headerlink&quot; title=&quot;作者簡介：Ali Abdaal 是誰？&quot;&gt;&lt;/a&gt;作者簡介：Ali Abdaal 是誰？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCoOae5nYA7VqaXzerajD0lg&quot;&gt;Ali Abdaal&lt;/a&gt; 是一位從醫學院畢業（也當過實習醫生）的 YouTuber、生產力作家與線上課程創辦人。&lt;/p&gt;
&lt;p&gt;他以分享學習技巧、生產力工具與深度工作法而聞名，經營的 YouTube 頻道累積超過數百萬訂閱者，是當代最具影響力的「生產力 KOL」——或許沒有之一。&lt;/p&gt;
&lt;p&gt;說真的，我對這位作者並不熟悉。我只知道他是個 YouTuber，並且有一個「生產力」的頻道——我想你知道這些也就夠了。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/I4bRpDQ.png" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="閱讀心得" scheme="https://blog.kyomind.tw/tags/%E9%96%B1%E8%AE%80%E5%BF%83%E5%BE%97/"/>
    
    <category term="生產力" scheme="https://blog.kyomind.tw/tags/%E7%94%9F%E7%94%A2%E5%8A%9B/"/>
    
    <category term="書" scheme="https://blog.kyomind.tw/tags/%E6%9B%B8/"/>
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>待業 6 個月，我做了哪些事？</title>
    <link href="https://blog.kyomind.tw/weekly-review-42/"/>
    <id>https://blog.kyomind.tw/weekly-review-42/</id>
    <published>2025-04-03T09:01:12.000Z</published>
    <updated>2025-04-11T16:40:15.588Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>這是第 42 期的 Weekly Review，這系列主要記錄我的一些近況、生活與想法。</p><p>在第 38 期〈<a href="/weekly-review-38/">Kyo 待業中！細數我過去的待業時光（上）</a>〉曾提過，我大學畢業後待業的總時間，長達 4 年 8 個月。如果再加上這半年，就超過 5 年了😂</p><p>當然，這些時期，往往也是我人生的重要轉折點：</p><ol><li>第一次待業：書記官考試。</li><li>第二次待業：律師考試 + 轉職軟體工程師。</li></ol><p>而這次，雖然沒有那麼大幅度的轉換，但感覺也是不輕鬆的半年。</p><p>本期就來聊聊，這半年發生了哪些事、我有哪些心得。</p><p>用階段來區分，主要可分為三個部分。</p><span id="more"></span><hr><h2 id="階段一：鐵人賽"><a href="#階段一：鐵人賽" class="headerlink" title="階段一：鐵人賽"></a>階段一：鐵人賽</h2><p>從 Day 1 就開始的鐵人賽準備。</p><p>我在去年 8 月底正式從公司離職，9 月 1 日起進入待業狀態。</p><p>沒有工作的第一天，我做的不是休息，而是直接投入寫作。因為我報名了 iThome 鐵人賽，一場需要連續寫作 30 天的活動。</p><blockquote><p>相關文章：</p><ul><li><a href="/weekly-review-35/">35，開始備戰 2024 iThome 鐵人賽</a></li><li><a href="/2024-ironman-event/">2024 iThome 鐵人賽參賽思路：主題選擇、命名與標題策略</a></li></ul></blockquote><p>我知道，如果等到開賽再寫肯定來不及，容易虎頭蛇尾。因此從 9 月 1 日開始就逐日撰寫內容，為開賽日作「準備」。</p><h3 id="全神貫注"><a href="#全神貫注" class="headerlink" title="全神貫注"></a>全神貫注</h3><p>寫作——哪怕是有壓力的寫作——也可以是一種享受。</p><p>參加鐵人賽這種競賽型的寫作，心理上並不輕鬆。但這段時間是本次待業三個階段中，內心最篤定，行為模式也最為固定的一段時光。</p><p>從完賽的角度，我們不必和別人比較，而是要用力去追逐心中認為「好」的內容。</p><p>這種一心一意的追求，在全職準備的前提下，沒有太多外力的束縛與干擾。</p><p>就是寫！</p><p>辛苦是必然的，但這樣的狀態讓人著迷。</p><p>不過話說回來，我覺得這種經驗一次就可以了🤗</p><hr><h2 id="階段二：軟體工程師求職準備"><a href="#階段二：軟體工程師求職準備" class="headerlink" title="階段二：軟體工程師求職準備"></a>階段二：軟體工程師求職準備</h2><p>過完充實的寫作時光後，接下來就要面對現實了！</p><p>雖然十月中有小休一星期，但內心還是很難放鬆啦！為什麼？當然是因為後續就要開始求職了。</p><p>10 月下旬，我正式啟動求職的前置準備：</p><ul><li>回顧之前工作上的專案，整理<a href="https://www.cake.me/kyomind">履歷</a>、更新 <a href="https://www.linkedin.com/in/kyo-huang/">LinkedIn</a>。</li><li><a href="https://github.com/kyomind/Grind-75">LeetCode 刷題</a>，還發表了「<a href="/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93">我的 LeetCode 刷題之道</a>」系列文章。</li><li>學習系統設計。</li></ul><p>其實就是一般軟體工程師求職時會做的事。</p><blockquote><p>相關文章：<a href="/weekly-review-39/">10 月回顧——鐵人賽、演算法與 AI</a></p></blockquote><h3 id="履歷、LinkedIn，也是文字的藝術"><a href="#履歷、LinkedIn，也是文字的藝術" class="headerlink" title="履歷、LinkedIn，也是文字的藝術"></a>履歷、LinkedIn，也是文字的藝術</h3><p>我相信，更新履歷或 LinkedIn 這種事情，應該是很多人下意識在逃避的吧——至少我就一直在逃避XD</p><p>結果開始做之後發現——<strong>事情果然如我想像中的困難</strong>🤣</p><p>要整理自己過去累積的經驗、有效地向別人表達，從來都不是一件容易的事。</p><p>尤其像我這種對文字十分敏感的人，更容易感受到其中讓我不滿意的地方。</p><p>而且我寫履歷比較喜歡有幾分就寫幾分，任何超過我實際能力或經驗的描述甚至推論，都會讓我感受到一絲心虛跟罪惡。</p><p>但我建議你不要這樣，如果你覺得實際上是 7 分，但你寫到 8、9 分，我認為完全可以接受。</p><p>一來是你不一定真的只有 7 分；二來是……你懂的，JD 描述也未必真實。</p><p>更別說，求職是一個自我推廣的舞台與戰場，太過謙虛、含蓄或保守，基本上只會有害無利。</p><h3 id="我真的不喜歡刷題"><a href="#我真的不喜歡刷題" class="headerlink" title="我真的不喜歡刷題"></a>我真的不喜歡刷題</h3><p>接著是 LeetCode 刷題。</p><p>我一開始就知道這不是我喜歡的部分，也知道它是多數工程師面試的「必要之惡」。</p><p>這幾個月我大約刷了七、八十小時，約莫 40 題，但說真的，效果普通。</p><p>進步當然有，但很難說這樣的學習是高效的。</p><p>雖然這個系列還沒有完成，不過我可以確定，實際自己親身刷題過後，<strong>我感受到我對 LeetCode 的厭惡是如此之大，遠超乎我的想像。</strong></p><p>一言以蔽之：<strong>我不認為這是一個成年人該做的事</strong>。我們只是迫不得已。</p><hr><h2 id="階段三：求職與-Burnout"><a href="#階段三：求職與-Burnout" class="headerlink" title="階段三：求職與 Burnout"></a>階段三：求職與 Burnout</h2><p>該來的還是要來，準備是準備不完的。</p><h3 id="早點面試真的很重要"><a href="#早點面試真的很重要" class="headerlink" title="早點面試真的很重要"></a>早點面試真的很重要</h3><p>進入 1 月，我開始投遞履歷。</p><p>第一場面試便讓我意識到一件事：<strong>準備再久，都比不上「實戰一次」有效</strong>。</p><p>面試能讓你知道哪些題目真正重要、哪些表達還需要修正，<strong>效率比自己埋頭苦練要高出不知多少</strong>。（當然，我並不是說毫無準備就可以去面試，會被洗臉！）</p><p>你甚至能夠從面試中，<strong>更加了解自己</strong>。</p><p>如果可以重來，我會在適度準備後，更早開始面試——大概提前一個月吧！</p><h3 id="面試能力明顯進步，但身體接近極限"><a href="#面試能力明顯進步，但身體接近極限" class="headerlink" title="面試能力明顯進步，但身體接近極限"></a>面試能力明顯進步，但身體接近極限</h3><p>2 月時，我能明顯感受到自己的進步。不論是技術表達、問答邏輯，還是面對問題時的沉著度，都提升許多。</p><p>雖然，每次面試官要說出「下一題」的前一秒，我的內心還是超緊張！——這似乎是無法適應的🐥</p><p>與此同時，我的身體也漸漸產生了 burnout 的前兆。</p><p>那種「每天醒來就要戰鬥」的感覺，把我的精神推向了極限。</p><p>這是一個不健康的過程。</p><h3 id="拿到-Offer-後的-Burnout-症狀"><a href="#拿到-Offer-後的-Burnout-症狀" class="headerlink" title="拿到 Offer 後的 Burnout 症狀"></a>拿到 Offer 後的 Burnout 症狀</h3><p>當我終於拿到 offer，情緒才剛放鬆下來，身體就出現了睡不好、短眠等窘況。</p><p>AI 認為，這是求職壓力褪去後，少了抑制 burnout 無力感的正常反應，也就是身體此時的<strong>真實狀態</strong>。</p><p>然後它極力建議我一定要進入「<strong>強制休息</strong>」模式，不然會很危險。</p><blockquote><p>先別想著要為新工作做什麼準備，而是好好休息。</p></blockquote><p>一開始我還不甚情願，還好我一向很信任 AI，於是安排了幾次短暫旅行，和所謂的「<a href="https://kyomind.notion.site/15-Threads-1b36a92a98a680909220dfbd6fce9bbe">資訊斷捨離</a>」，讓身體和心靈從高壓中慢慢解脫出來。</p><hr><h2 id="小結：慢一點、輕鬆一點"><a href="#小結：慢一點、輕鬆一點" class="headerlink" title="小結：慢一點、輕鬆一點"></a>小結：慢一點、輕鬆一點</h2><p>在這個快速變動的時代，休息數個月重新準備與摸索方向，應該會變得更加常見，至少比以前更容易發生。</p><p>其實，<strong>能夠適度休息、好好放鬆，本身就是一種能力</strong>，而這樣的能力也是需要培養的——卻往往被忽視。</p><p>隨時都在汲汲營營，孜孜不倦，最終所能帶來成果，未必如想像中可觀。</p><p>更多是一種自我安慰和徒勞吧！</p><p>所以，即使是待業和求職的階段，也沒必要把自己逼得太緊。</p><p>這樣想，可能會讓人輕鬆些，並帶來更好的結果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是第 42 期的 Weekly Review，這系列主要記錄我的一些近況、生活與想法。&lt;/p&gt;
&lt;p&gt;在第 38 期〈&lt;a href=&quot;/weekly-review-38/&quot;&gt;Kyo 待業中！細數我過去的待業時光（上）&lt;/a&gt;〉曾提過，我大學畢業後待業的總時間，長達 4 年 8 個月。如果再加上這半年，就超過 5 年了😂&lt;/p&gt;
&lt;p&gt;當然，這些時期，往往也是我人生的重要轉折點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次待業：書記官考試。&lt;/li&gt;
&lt;li&gt;第二次待業：律師考試 + 轉職軟體工程師。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而這次，雖然沒有那麼大幅度的轉換，但感覺也是不輕鬆的半年。&lt;/p&gt;
&lt;p&gt;本期就來聊聊，這半年發生了哪些事、我有哪些心得。&lt;/p&gt;
&lt;p&gt;用階段來區分，主要可分為三個部分。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>筆記軟體 UpNote 最吸引我的三大亮點</title>
    <link href="https://blog.kyomind.tw/upnote/"/>
    <id>https://blog.kyomind.tw/upnote/</id>
    <published>2025-03-29T06:13:09.000Z</published>
    <updated>2025-04-11T16:43:54.527Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/uAUlRuc.jpeg" alt="by William Chen on Pexels"><span class="cap">by William Chen on Pexels</span></p><p>如你所知，我是一個「<a href="https://github.com/kyomind#%E7%B0%A1%E4%BB%8B">不做筆記就不會學習</a>」的人🥹</p><p>但就像我在〈<a href="/noteless/">逐漸被我遺忘的卡片筆記</a>〉中提到的那樣，我並不喜歡對特定的筆記軟體過於鑽研、深挖它的大量用法與變化，更不可能建立一個所謂的<a href="/less-is-more/">筆記系統</a>。</p><p><strong>我更愛「簡單粗暴」的方式</strong>😎</p><p>關於我的筆記軟體使用演進史，可以參考過往這幾篇文章：（依時間順序）</p><ul><li><a href="https://medium.com/code-and-me/why-evernote-7cd2abbfbafd">心得 |《曼無止盡》第 40 期：Evernote 的重生之路</a></li><li><a href="/simple-notion/">使用Notion 滿 3 年，為何我仍「不推薦」用它來管理你的人生？</a></li><li><a href="/logseq/">Logseq 心得：一顆冉冉升起的「卡片筆記」新星</a></li><li><a href="/bear/">Evernote 替代方案——筆記軟體 Bear 2 升級心得</a></li></ul><p>除了 Evernote 之外，其餘三者都是我現在仍有在使用的。所以它們相互之間<strong>並不是進化式的替代關係</strong>，而是不斷完善的<strong>補充關係</strong>。</p><p>本文要來講講，為何在這三個筆記軟體之外，我還需要第四個筆記軟體——UpNote。</p><span id="more"></span><h2 id="第四個筆記軟體"><a href="#第四個筆記軟體" class="headerlink" title="第四個筆記軟體"></a>第四個筆記軟體</h2><blockquote><p>第四個筆記軟體真的有必要嗎？或者它只是另一種疊床架屋或自我滿足？</p></blockquote><p>我也曾思考過這個問題，所幸，現在已經有了明確的答案，本文就是我對這個答案的闡述。</p><p>如果你對 UpNote 這個軟體有興趣，本文可能是一個很好的切入點。</p><p>我們暫時拋開對細節的教學，直接看看為什麼我都已經有三個筆記軟體了，還認為自己需要它——而你也有可能有相類似的原因。</p><p>不過，開始之前，我們得先對 UpNote 進行簡要的介紹。</p><hr><h2 id="UpNote-簡介"><a href="#UpNote-簡介" class="headerlink" title="UpNote 簡介"></a>UpNote 簡介</h2><p><a href="https://getupnote.com/">UpNote</a> 是一款<strong>跨平台筆記軟體</strong>，支援 iOS、Android、macOS 和 Windows，旨在為用戶提供簡單、優雅且高效的筆記體驗。</p><p>它<strong>以 Markdown 為基礎</strong>，結合直觀的介面設計和強大的功能，吸引了許多尋求 Evernote 替代方案的用戶——包括我。</p><p><img src="https://i.imgur.com/87FzPPL.png" alt="UpNote 使用者介面"><span class="cap">UpNote 使用者介面</span></p><p>UpNote 的核心理念是讓筆記變得輕鬆流暢，並<strong>幫助使用者專注於最重要的內容</strong>。</p><p>免費版限 50 則筆記，只適合作為體驗、測試之用。付費才能解鎖無限筆記數量、附件插入與進階格式化等功能。</p><p>付費方式又分為<strong>月費</strong>或<strong>一次性買斷</strong>：</p><blockquote><p><strong>$1.99&#x2F;month</strong> or <strong>$39.99 Lifetime.</strong></p></blockquote><p>我個人是用了一、兩個月後，覺得 OK 就索性買斷了。</p><hr><h2 id="為什麼還需要第四個筆記軟體？"><a href="#為什麼還需要第四個筆記軟體？" class="headerlink" title="為什麼還需要第四個筆記軟體？"></a>為什麼還需要第四個筆記軟體？</h2><p>曾經，我以為 Notion 足夠萬能，Logseq 足夠自由，Bear 足夠簡單、美型。它們陪我度過了不同階段的筆記需求，同時不斷形塑著我對「好筆記軟體」的定義。</p><p>一般的隨手記事，我不會打開 Notion 或 Logseq——因為它們都很「重」，有著較多的層級或複雜的筆記關聯。</p><p>對於簡單記錄，Bear 無疑是最好的選擇，但它僅限於蘋果生態系（iOS、macOS），而我的手機是安卓啊啊啊！</p><p>這就是我找到 UpNote 並開始使用它的起點。</p><h3 id="本文主旨"><a href="#本文主旨" class="headerlink" title="本文主旨"></a>本文主旨</h3><p>這篇文章沒有詳細的功能介紹，也不是使用教學，而是我的<strong>選擇與考慮</strong>。</p><p>在已經擁有三款筆記軟體的情況下，為什麼我還需要 UpNote？以下是我選擇它的三個關鍵理由。</p><p>最後，我會為讀者——尤其是還在摸索自己喜歡的筆記方式、軟體的人，提出「<strong>基於我個人使用經驗</strong>」的<strong>筆記軟體選擇建議</strong>，作為你下一步的參考。</p><hr><p>因為 Bear 跟 UpNote 兩者的性質很像、介面也大同小異，都屬於 Evernote 的典型替代，所以我會特別比較它跟 Bear 之間的關係。</p><p>好，我們開始吧！</p><h2 id="一、跨平台同步：真正的全裝置筆記自由"><a href="#一、跨平台同步：真正的全裝置筆記自由" class="headerlink" title="一、跨平台同步：真正的全裝置筆記自由"></a>一、跨平台同步：真正的全裝置筆記自由</h2><p>Bear 的一大限制，就是只能在 Apple 生態系內同步。作為 Android 手機用戶，我無法隨時記錄靈感，Bear 成為一個「只能在電腦使用」的工具。（雖然我也有 iPhone、iPad，但很少帶出門😅）</p><p>出門在外的時候，我們常常習慣用手機快速記下一些待辦事項、突然浮現的靈感。這些事如果無法立法被留下來，會讓人<strong>很不安</strong>XD——因為<strong>很可能會忘記</strong>。</p><p>UpNote 的全平台支援，剛好補足了這一塊，讓我在任何裝置（主要是手機）都能隨時記錄。</p><p>雖然和學習關係不大，但記錄雜事、靈感卻也是生活中的「硬需求」。</p><h2 id="二、筆記本：處理「專案」型筆記"><a href="#二、筆記本：處理「專案」型筆記" class="headerlink" title="二、筆記本：處理「專案」型筆記"></a>二、筆記本：處理「專案」型筆記</h2><p>Bear 採用純標籤系統對筆記進行分類，雖然彈性高，但<strong>無法封存</strong>。</p><p>這意味著，當一個標籤底下的筆記現階段已不再重要，它們也<strong>無法從視野中淡出</strong>，除非直接刪除該標籤。但這樣又不利於複習或尋找，因為它們曾經擁有分類。</p><p>我覺得「刪除標籤」是一種<strong>不夠溫柔</strong>的處理方式，儘管它很簡潔。</p><p>UpNote 除了支援標籤，還有「<strong>筆記本</strong>」設計（即圖中的 1️⃣），讓我可以為<strong>專案性質（比如去日本旅遊）、階段性任務</strong>建立專屬的筆記本。</p><p>更重要的是，它們可以<strong>封存</strong>！</p><p>完成的專案不需刪除，只需收進封存區，不佔視野，卻能隨時調出查閱。</p><p>實際使用上，我<strong>幾乎不碰 UpNote 的標籤</strong>（因為這和 Bear 重疊了），而且，我<strong>很克制地只用五到六個筆記本（如上圖）</strong>，讓它成為我處理<strong>專案型筆記</strong>的專屬空間。</p><h2 id="三、空間：清楚區分工作與生活"><a href="#三、空間：清楚區分工作與生活" class="headerlink" title="三、空間：清楚區分工作與生活"></a>三、空間：清楚區分工作與生活</h2><p>UpNote 還有一個低調但強大的功能：<strong>空間（Spaces</strong>，圖中的 2️⃣）每個空間都是獨立的筆記世界，擁有自己的筆記與筆記本。</p><p>我為工作設立了獨立空間，把工作上的學習筆記、工作日誌、任務追蹤分開管理。這些東西我也不想塞到 Bear，因為 Bear 主要作為我個人學習之用。</p><p>比起 Notion 的多層級資料庫系統，UpNote 的<strong>單層架構</strong>讓我不會陷入<strong>過度整理的深淵</strong>——這超重要XD</p><p>這不只是分類上的便利，更是<strong>心理上的切割</strong>——當我切換到「工作」這個空間，就彷彿進入另一個世界，幫助我更快地進入狀態。</p><p>工作與生活的筆記區隔清晰，我的筆記邏輯也變得更簡單，更有彈性。</p><hr><h2 id="結語：足夠好的筆記軟體"><a href="#結語：足夠好的筆記軟體" class="headerlink" title="結語：足夠好的筆記軟體"></a>結語：足夠好的筆記軟體</h2><p><strong>上述這三點，就足以讓我長期使用 UpNote</strong>，而不會覺得它多餘，因為這三點恰恰都是 Bear 所不足備的。</p><p>但我得強調：無論是 UpNote 或 Bear，它們對我來說，都已經「足夠好」了。剩下的是我作為使用者該如何運用與獨立思考的議題。</p><p>UpNote 並非完美，也不是最強大的筆記軟體。但它剛好補足了我現有的缺口——跨平台的行動筆記、可封存的分類機制、獨立清晰的空間設計。</p><p>與其說我「選擇了」 UpNote，不如說<strong>它填補了我筆記需求中的一個空白。更重要的是——這個空白有填補的價值與必要</strong>。</p><p>這正是我持續使用它的原因。</p><hr><h2 id="給筆記新手的軟體選擇攻略"><a href="#給筆記新手的軟體選擇攻略" class="headerlink" title="給筆記新手的軟體選擇攻略"></a>給筆記新手的軟體選擇攻略</h2><p>我覺得<strong>選擇筆記軟體就像選擇信用卡</strong>，除非它能夠<strong>帶來明顯的效益</strong>、<strong>解決具體的痛點</strong>，不然<strong>多一事不如少一事</strong>。</p><p>常用的工具我覺得還是少一點會比較好——雖然我自己好像也沒有做到😅，因為選擇與切換不同軟體的 context 需要時間、心力。</p><p>以下是我的選擇建議，依照你的「筆記軟體使用哲學」進行區分。</p><h3 id="一、簡單派"><a href="#一、簡單派" class="headerlink" title="一、簡單派"></a>一、簡單派</h3><p>希望用「一個」筆記軟體打天下的人：</p><ul><li><strong>純 Apple 生態系用戶</strong>：選擇 Apple Notes 或 Bear。據我所知，Apple Notes 現在基本上已經足夠強大。至於我為何不選它？我已在〈<a href="/bear/">Evernote 替代方案——筆記軟體Bear 2 升級心得</a>〉有所<a href="/bear/#%E4%B8%8D%E7%94%A8-Apple-Notes-%E7%9A%84%E7%90%86%E7%94%B1">說明</a>。</li><li><strong>Windows + 安卓</strong>：選擇 UpNote。</li><li><strong>生態混合型用戶</strong>：選擇 UpNote，或像我一樣，兩者皆有XD</li></ul><p>「簡單粗暴」是我的理想，只是我尚未做到。</p><p>總歸一句：「我還是對筆記太過貪心了。」</p><p>這讓我無法成為最優秀的學習者。</p><h3 id="二、複雜派"><a href="#二、複雜派" class="headerlink" title="二、複雜派"></a>二、複雜派</h3><p>這裡的複雜，不是指筆記軟體數量的多寡，而是<strong>需求的複雜</strong>——你希望它可以做<strong>更多事，超乎單純筆記的事</strong>。</p><p>不用說，Notion 就是你的不二選擇，其實在很多場合我還是蠻推薦 Notion 的。</p><p>原因是因為它可以很複雜，也可以很簡單，而且對免費用戶非常大方。</p><p>唯一要小心的，就是<strong>過度使用：</strong>指用來做它其實並不擅長的事情，或者是把簡單的筆記需求太複雜化。</p><p>這些行為可能會造成<strong>時間黑洞</strong>，而且不容易察覺😬</p><p>奉勸你一句：</p><blockquote><p>不要妄像任何筆記軟體能夠改變你的人生。</p></blockquote><p>它甚至改變不了筆記。</p><hr><p>至於那些擅長<strong>雙向連結</strong>的<strong>卡片筆記軟體</strong>，我個人<strong>並不特別推薦</strong>，<strong>除非你很清楚自己要什麼，否則我認為先不要考慮它們</strong>。</p><p>因為它們從來就不簡單。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/uAUlRuc.jpeg&quot; alt=&quot;by William Chen on Pexels&quot;&gt;&lt;/p&gt;
&lt;p&gt;如你所知，我是一個「&lt;a href=&quot;https://github.com/kyomind#%E7%B0%A1%E4%BB%8B&quot;&gt;不做筆記就不會學習&lt;/a&gt;」的人🥹&lt;/p&gt;
&lt;p&gt;但就像我在〈&lt;a href=&quot;/noteless/&quot;&gt;逐漸被我遺忘的卡片筆記&lt;/a&gt;〉中提到的那樣，我並不喜歡對特定的筆記軟體過於鑽研、深挖它的大量用法與變化，更不可能建立一個所謂的&lt;a href=&quot;/less-is-more/&quot;&gt;筆記系統&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我更愛「簡單粗暴」的方式&lt;/strong&gt;😎&lt;/p&gt;
&lt;p&gt;關於我的筆記軟體使用演進史，可以參考過往這幾篇文章：（依時間順序）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/code-and-me/why-evernote-7cd2abbfbafd&quot;&gt;心得 |《曼無止盡》第 40 期：Evernote 的重生之路&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/simple-notion/&quot;&gt;使用Notion 滿 3 年，為何我仍「不推薦」用它來管理你的人生？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/logseq/&quot;&gt;Logseq 心得：一顆冉冉升起的「卡片筆記」新星&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/bear/&quot;&gt;Evernote 替代方案——筆記軟體 Bear 2 升級心得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了 Evernote 之外，其餘三者都是我現在仍有在使用的。所以它們相互之間&lt;strong&gt;並不是進化式的替代關係&lt;/strong&gt;，而是不斷完善的&lt;strong&gt;補充關係&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文要來講講，為何在這三個筆記軟體之外，我還需要第四個筆記軟體——UpNote。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/uAUlRuc.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="筆記軟體" scheme="https://blog.kyomind.tw/tags/%E7%AD%86%E8%A8%98%E8%BB%9F%E9%AB%94/"/>
    
    <category term="Logseq" scheme="https://blog.kyomind.tw/tags/Logseq/"/>
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
    <category term="Bear" scheme="https://blog.kyomind.tw/tags/Bear/"/>
    
  </entry>
  
  <entry>
    <title>現代斯多葛——哲學能否成為信仰？</title>
    <link href="https://blog.kyomind.tw/stoicism/"/>
    <id>https://blog.kyomind.tw/stoicism/</id>
    <published>2025-03-15T07:43:54.000Z</published>
    <updated>2025-04-27T01:42:10.623Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/zRJZNHB.jpeg" alt="from Pixabay"><span class="cap">from Pixabay</span></p><p>本文講述我開始接觸<strong>斯多葛</strong>哲學（<strong>Stoicism</strong>）的契機，以及我挑選的一些素材，還有<strong>為什麼我認為自己需要一個價值觀之外的「信仰」。</strong></p><p>我得強調，這一切才剛開始，有著強烈的實驗性質。</p><p>只不過，基於對自己的了解，我認為斯多葛很可能就是我正在追求的信仰框架。</p><p>如果你對此也感興趣，且讓我為你娓娓道來。</p><span id="more"></span><hr><h2 id="開端：意外的發現"><a href="#開端：意外的發現" class="headerlink" title="開端：意外的發現"></a>開端：意外的發現</h2><p>一切的起點，是我女朋友讀到的一本心理學相關的書。</p><p>幾個月前，某天聊天時，她突然對我說：「我覺得你很像一個斯多葛主義者。」</p><p>我當下有點訝異，斯多葛主義這個詞雖然不陌生——畢竟中學歷史課本都有！但我從未認真研究過。</p><p>我問她為什麼這麼說，她便分享了書中提到的一些斯多葛主義者的思維方式和行為準則。我聽完之後，驚訝地發現這確實與我的價值觀相似。</p><p>比如常常記錄想法、反省，以便日後遇到類似情況時重新調整行為的選擇。</p><p>儘管如此，當時的我仍只是覺得有趣，並沒有特別放在心上。</p><hr><h2 id="AI-幫我整理斯多葛主義"><a href="#AI-幫我整理斯多葛主義" class="headerlink" title="AI 幫我整理斯多葛主義"></a>AI 幫我整理斯多葛主義</h2><p>過了一段時間，xAI 的 Grok 3 這個 AI 服務推出了，它內建了我個人頗為喜歡的 DeepSearch 功能。我在〈<a href="https://kyomind.notion.site/40b324f98ca94827921a6831b0d7a38f">訂戶限定 13：Deep Research × SuperGrok × 鐵人賽頒獎典禮</a>〉簡單介紹過，還沒訂閱電子報的，趕緊<a href="/subscribe/">訂起來</a>唷！</p><p>我突然想起這件事，於是請它幫我整理「作為一個現代斯多葛主義者，會有怎麼樣的行事與價值觀？」</p><p>其實整理這樣的內容，倒不一定要 DeepSearch 這類的功能，一般的 LLM 都行，只是我希望它的回答，能結合更多網路上「現代素材」。</p><p>它的回答沒讓我失望，詳細內容可點擊<a href="https://grok.com/share/bGVnYWN5_dc0316c1-6d94-4fb0-9efe-fdde34c8393d">這個連結</a>，在此只引用一小部分：</p><ul><li><strong>重視美德</strong>：優先考慮道德卓越和誠實行為，而非物質成功。</li><li><strong>情緒韌性</strong>：通過正念和反思等技術管理情緒，特別是負面情緒。</li><li><strong>接受不確定性</strong>：理解某些事情超出控制範圍，專注於可控制的事物。</li><li><strong>終身學習</strong>：持續追求知識和自我提升，深化對斯多葛原則的理解。</li><li><strong>建立有意義的關係</strong>：重視與他人的深層連結。</li><li><strong>理性導向行動</strong>：基於邏輯和理性做出決策，而非衝動或情緒。</li><li><strong>專注於能掌控的事情，不浪費精力在無法改變的事物上。</strong></li></ul><p>這些原則看起來並不新鮮，甚至部分內容你可能會覺得有些「教條感」。</p><p>可不是嗎？</p><p>但我確實喜歡這些概念，其中一部分已經內化成我的行為模式，而更多則是我仍在努力實踐的方向。</p><p>這讓我不禁開始好奇：如果這些原則是斯多葛主義的一部分，那麼斯多葛主義到底是什麼？</p><p>或許我應該更深入了解。</p><h2 id="斯多葛主義的經典書籍"><a href="#斯多葛主義的經典書籍" class="headerlink" title="斯多葛主義的經典書籍"></a>斯多葛主義的經典書籍</h2><p>於是，我開始請 AI 推薦一些適合入門的書籍——古代、現代各 10 本。</p><p>這裡各選一本介紹即可，因為我目前就只打算讀這 2 本。</p><p>畢竟 Stoicism 是<strong>「用來實踐」的哲學</strong>。我個人是覺得不需要多麼精通其中的「教義」啦！可以慢慢理解、慢慢體會。</p><p>毫無疑問，古羅馬皇帝<a href="https://zh.wikipedia.org/zh-tw/%E9%A6%AC%E7%88%BE%E5%BA%AB%E6%96%AF%C2%B7%E5%A5%A7%E5%88%97%E9%87%8C%E7%83%8F%E6%96%AF">馬可．奧理略</a>的《<a href="https://zh.wikipedia.org/zh-tw/%E6%B2%89%E6%80%9D%E5%BD%95">沉思錄</a>》是必讀經典。</p><p>現代相關書籍中，《The Daily Stoic》則是不錯的入門。台灣翻譯為《<a href="https://www.books.com.tw/products/0010784805">回到自己的內心，每天讀點斯多噶</a>》。</p><p>兩本書風格不同：《沉思錄》是奧理略的私人筆記，內容深刻，卻也帶著強烈的個人色彩；而《The Daily Stoic》則是一本更容易消化的書，每天提供一則斯多葛智慧，並搭配現代詮釋。</p><p>雖然有些評論認為，《The Daily Stoic》對斯多葛主義的理解<strong>過於淺顯</strong>，甚至有點「<strong>過度解讀</strong>」之嫌。</p><p>我從圖書館借了一本，目前讀到五月結束。個人覺得還不錯，我認為現階段不用太糾結於「正確性」——以後可能也不需要。</p><p><img src="https://i.imgur.com/fGlbQze.jpeg"></p><hr><h2 id="為什麼我仍需要信仰？"><a href="#為什麼我仍需要信仰？" class="headerlink" title="為什麼我仍需要信仰？"></a>為什麼我仍需要信仰？</h2><p>在這個過程中，我開始思考一個更深層次的問題：斯多葛主義對我的意義是什麼？</p><p>我不算無神論者（大體而言，我願意相信有神），但我並沒有特定的宗教信仰。或者說，<strong>我並不在乎</strong>。</p><p>然而，和很多人一樣，我始終也在追尋一種「<strong>在我之上</strong>」的東西——Something bigger than yourself。</p><p>這種「更大的東西」，能夠在低潮時期給予人力量，讓人不只是依賴自己的意志力、價值觀，孤軍奮戰。</p><p>這讓我意識到，我所追尋的並非傳統宗教，而是一種能夠在低潮時支持我的力量。這樣的<strong>心靈力量</strong>，我願稱之為<strong>信仰</strong>。</p><h3 id="我需要信仰"><a href="#我需要信仰" class="headerlink" title="我需要信仰"></a>我需要信仰</h3><p>宗教是最常見的支持來源，可惜我無緣擁有。</p><p>我習慣記錄自己的想法、價值觀、對世界的切入角度，這讓我相較於多數人而言，有著更加明確的信念與好惡。</p><p>然而，即便如此，我仍然希望有一個<strong>能夠引導我前進的思維框架</strong>，斯多葛主義或許可以扮演這個角色。</p><p>我們常說「當局者迷」，即使一個人價值觀鮮明，但在低潮的時候，還是很容易會自我懷疑、猶豫不決，甚至迷失方向。</p><p>作為一個有追求的人，我不想只依靠自己，我需要<strong>更堅實的指引</strong>——我需要<strong>信仰</strong>。</p><hr><h2 id="Cal-Newport-與斯多葛主義"><a href="#Cal-Newport-與斯多葛主義" class="headerlink" title="Cal Newport 與斯多葛主義"></a>Cal Newport 與斯多葛主義</h2><p>我還問了 AI：</p><blockquote><p>那 Cal Newport 對斯多葛主義有什麼看法？我感覺他的思想與主張，例如《深度工作》（Deep Work）和《數位極簡主義》（Digital Minimalism），都<strong>很斯多葛</strong>！</p></blockquote><p>沒錯！AI 甚至直接幫我找到了 Cal Newport 在 Daily Stoic 的<a href="https://dailystoic.com/cal-newport-interview/">談訪內容</a>。我們引用一段前言：</p><blockquote><p>Cal is also a fan of the Stoics. In our interview with Cal, he explains his interest and application of Stoicism, why the idea that <em>less can be more</em> has held up since ancient times, the importance of solitude and high-quality leisure, and so much more.</p></blockquote><p>這篇訪談很值得一讀（大部分是 Cal Newport 核心價值觀的重新強調），他提到自己一直廣泛閱讀哲學和宗教歷史，因此斯多葛學說一直在他關注範圍內。</p><p>他還特別提到閱讀 William Irvine 的《A Guide to the Good Life》以及 Tim Ferriss 討論 Seneca 的內容，這些都對他有所啟發。</p><p>說到這裡，我不禁想再回到「<a href="/about/">關於我</a>」中的這一段：<a href="/about/#%E5%B0%88%E6%B3%A8%E8%88%87%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%83">專注與深度思考</a>。</p><p>我想，這也是為什麼我喜歡斯多葛的一大理由吧！</p><p>這個議題，我們還要繼續。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zRJZNHB.jpeg&quot; alt=&quot;from Pixabay&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文講述我開始接觸&lt;strong&gt;斯多葛&lt;/strong&gt;哲學（&lt;strong&gt;Stoicism&lt;/strong&gt;）的契機，以及我挑選的一些素材，還有&lt;strong&gt;為什麼我認為自己需要一個價值觀之外的「信仰」。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我得強調，這一切才剛開始，有著強烈的實驗性質。&lt;/p&gt;
&lt;p&gt;只不過，基於對自己的了解，我認為斯多葛很可能就是我正在追求的信仰框架。&lt;/p&gt;
&lt;p&gt;如果你對此也感興趣，且讓我為你娓娓道來。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/zRJZNHB.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 AI 對創作者的衝擊</title>
    <link href="https://blog.kyomind.tw/weekly-review-41/"/>
    <id>https://blog.kyomind.tw/weekly-review-41/</id>
    <published>2025-03-07T04:11:30.000Z</published>
    <updated>2025-04-06T15:44:03.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>久違的一篇 Weekly Review！</p><p>前幾天聽了〈<a href="https://open.spotify.com/episode/66BXP3Rb0HOSpmcd3lTENr">EP95 |（自）媒體的 AI 焦慮指南 ft. IEObserve &amp; 商周副總編輯吳中傑</a>〉這則 Podcast，覺得挺有趣，也來說說我的看法。</p><p>我不一定會重複它，但肯定有共通的論點，本篇主要是個人的 murmur。</p><p>附帶一提，本文所說的「創作者」主要是指文字創作，畢竟這是我的領域。但套用在其他類型，比如說影音創作，大概也差不多啦。</p><span id="more"></span><hr><h2 id="AI-影響創作者的兩大面向"><a href="#AI-影響創作者的兩大面向" class="headerlink" title="AI 影響創作者的兩大面向"></a>AI 影響創作者的兩大面向</h2><p>AI 不僅能夠快速產生大量文字，尤其是資訊型內容，AI 生成的文字、文章可能沒有特色，但其產出速度快、成本低，足以吸引一定的注意力。</p><p>事實就是，<strong>我們待在 AI 聊天視窗的時間比以前多得多（至少我是如此啦！）</strong>，而親自去 Google 並找到一篇文章好好閱讀的時間，恐怕是減少了。</p><p>Stack Overflow 表示：<a href="https://www.techbang.com/posts/108814-stack-overflow-ai">哭哭</a>。</p><p>此外，許多 AI 聊天服務都整合了 Web Search 功能，能夠幫用戶自動搜尋、爬取並整理網頁資訊。</p><p>這意味著我們在尋找資訊時，不需要親自 Google，而是透過 AI 直接獲取整理後的結果。</p><p>這類變化將<strong>進一步降低</strong>創作者的曝光機會。</p><p>簡單來說：</p><ol><li>你辛苦花了三小時寫一篇文章，AI 可能幾秒鐘就產生了類似的資訊，只是沒特色而已——但可能已經「部分符合」使用者的需求！</li><li>你付出心力寫了文章，但你的讀者可能只是透過 AI 的網路搜尋，得到你文章的<strong>一個小片段</strong>，而且是被整合後的片段XD</li></ol><p>這教創作者情何以堪？</p><hr><h2 id="從讀者的角度"><a href="#從讀者的角度" class="headerlink" title="從讀者的角度"></a>從讀者的角度</h2><p>話雖如此，但有件事別忘了，那就是：<strong>任何一個創作者也都是一個讀者</strong>。</p><p>對創作者有威脅的事情，<strong>不一定是讀者所關心的</strong>。</p><p>就像我在〈<a href="https://blog.kyomind.tw/not-by-ai/">為文章標註 Not By AI？ 我覺得大可不必</a>〉一文中說的「<a href="https://blog.kyomind.tw/not-by-ai/#%E8%AE%80%E8%80%85%E6%88%96%E8%A8%B1%E6%B2%92%E9%82%A3%E9%BA%BC%E5%9C%A8%E6%84%8F%EF%BC%8C%E6%96%87%E7%AB%A0%E6%98%AF%E4%BA%BA%E9%82%84%E6%98%AF-AI-%E5%AF%AB%E7%9A%84">讀者或許沒那麼在意，文章是人還是 AI 寫的</a>」。</p><p>我可以很誠實地說：「作為一個讀者，我才不管這些事情！」</p><p><strong>我就是要取得資訊越來越方便</strong>，有 AI 我就用 AI，絕對不會再浪費不必要的時間去慢慢讀一篇文章——除非我很喜歡。</p><p>偷偷告訴你，開頭的那一則 Podcast 我其實<strong>根本就沒有聽</strong>，我沒有一小時的時間，就算有，<strong>我也打算花在別的地方</strong>。</p><p>我只是把它的聲音檔下載，用 MacWhisper 轉成字幕，然後再丟給 NotebookLM 整理重點而已。我只想要知道其中一部分的重點，而這對我來說就已經足夠。</p><p>好啦，有機會我還是會再回去聽的😅</p><hr><h2 id="AI-對影音創作的衝擊未必小於文字"><a href="#AI-對影音創作的衝擊未必小於文字" class="headerlink" title="AI 對影音創作的衝擊未必小於文字"></a>AI 對影音創作的衝擊未必小於文字</h2><p>我本來以為「AI 整合網路搜尋」功能對部落格的衝擊最大，其他媒介的影響可能還好。影音創作者應該還是可以活得不錯？</p><p>想太多，因為 AI 還有別的功能呀！</p><p>拿我自己來說，對於資訊型的影片、Podcast，我會「親自看（聽）」的比例大概只有以前的 20%——或者更低。</p><p>剩下的情境，都是聲音轉文字後交給 NotebookLM。</p><p>雖然我不是很常看短影音，但顯然的，我也耐心也愈來愈少了XD</p><p>但還是要認真說一句：「有些東西，我<strong>就是只想</strong>花這樣的時間去吸收、了解。」</p><p><strong>以前沒有這樣做，是因為以前沒有 AI，不是因為以前我比較有耐心。</strong></p><hr><h2 id="我接下來該怎麼寫？"><a href="#我接下來該怎麼寫？" class="headerlink" title="我接下來該怎麼寫？"></a>我接下來該怎麼寫？</h2><p>方向其實很簡單，以後我會更在乎，文章是否符合以下兩點：</p><ol><li><strong>不要重複網路上已有的東西</strong>，尤其是已經被講爛的東西。其實這部分從以前就是如此，可以參考<a href="https://blog.kyomind.tw/ruff/#%E6%9C%AC%E6%96%87%E4%B8%BB%E6%97%A8%E8%88%87%E7%9B%AE%E6%A8%99%E8%AE%80%E8%80%85">這一段</a>。</li><li><strong>有一定的個人特色、經驗、價值觀</strong>。這不用說吧！——<strong>「<a href="https://www.youtube.com/watch?v=tJpR0Ur20as">啾啾鞋看甄嬛</a>」系列我超愛</strong>🥰</li></ol><p>你會發現，有了 AI 以後，創作者要如何吸引讀者、讓讀者願意閱讀你的內容，<strong>和以前並沒有太大的差別，只是要求提高了而已。</strong></p><p>但不可否認，文章的曝光率正在下降。同樣的努力，甚至更多的努力，可能也無法獲得像以前一樣的回報了。</p><p>這也是沒有辦法的事。</p><hr><h2 id="結論：創作者的未來"><a href="#結論：創作者的未來" class="headerlink" title="結論：創作者的未來"></a>結論：創作者的未來</h2><p>最後，我不打算高談闊論或說些正能量的東西。我覺得想寫就寫，覺得灰心無望，不想寫就先不寫。</p><p>創作者有創作的權利，也有<strong>不創作的權利</strong>。</p><p>只能說，<strong>創作的意義對作者而言，也在隨著時間不斷地轉換跟變化。</strong></p><p>我希望我能跟上時代的腳步，直到我發現我的作品已經不再吸引、不再有價值時，我會停下來。</p><p>值得慶幸的是：還好不是現在😷</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;久違的一篇 Weekly Review！&lt;/p&gt;
&lt;p&gt;前幾天聽了〈&lt;a href=&quot;https://open.spotify.com/episode/66BXP3Rb0HOSpmcd3lTENr&quot;&gt;EP95 |（自）媒體的 AI 焦慮指南 ft. IEObserve &amp;amp; 商周副總編輯吳中傑&lt;/a&gt;〉這則 Podcast，覺得挺有趣，也來說說我的看法。&lt;/p&gt;
&lt;p&gt;我不一定會重複它，但肯定有共通的論點，本篇主要是個人的 murmur。&lt;/p&gt;
&lt;p&gt;附帶一提，本文所說的「創作者」主要是指文字創作，畢竟這是我的領域。但套用在其他類型，比如說影音創作，大概也差不多啦。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>逐漸被我遺忘的卡片筆記</title>
    <link href="https://blog.kyomind.tw/noteless/"/>
    <id>https://blog.kyomind.tw/noteless/</id>
    <published>2025-01-25T03:17:54.000Z</published>
    <updated>2025-02-18T02:08:12.521Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/M62tm5t.jpeg"></p><p>如你所知，我絕對稱得上是一個「筆記愛好者」，甚至在 <a href="https://github.com/kyomind">GitHub Profile</a> 中還提到：</p><blockquote><p>喜好寫作與筆記，患有「<strong>不做筆記便不會學習</strong>」症候群。</p></blockquote><p>這一點也不假，很多時候我確實就是不做筆記便無法學習。</p><p>兩年多前，我寫下了這篇〈<a href="/logseq/">Logseq 心得：一顆冉冉升起的「卡片筆記」新星</a>〉，宣告我的「筆記人生」進入了一個<strong>全新階段</strong>——我發現了卡片筆記（卡片盒筆記法）與雙向連結筆記軟體 Logseq。</p><p>文中還充滿期待地規劃了系列內容，宣稱要透過一連串教學，讓讀者知曉「卡片筆記」的美妙，讓它不再曲高和寡。</p><p>然後呢？<strong>就沒有然後了。</strong></p><span id="more"></span><hr><h2 id="卡片筆記與卡片筆記軟體"><a href="#卡片筆記與卡片筆記軟體" class="headerlink" title="卡片筆記與卡片筆記軟體"></a>卡片筆記與卡片筆記軟體</h2><p>有一點我們要先釐清，卡片盒筆記法（以下簡稱卡片筆記）主要是從《<a href="https://www.books.com.tw/products/0010922143">卡片盒筆記</a>》一書中延伸、發展而來的概念。</p><p>我建議你也不必太計較它的「定義」為何、必須要具備哪些元素。就像我在文中說的：</p><blockquote><p>你需要的<strong>不是</strong>對<strong>特定筆記工具</strong>或<strong>方法細節</strong>的了解，甚至也不必看書。而是必須動用你的<strong>筆記思維、歸納能力與想像力</strong>——這是對卡片筆記的「<strong>戰略層級</strong>」理解。</p></blockquote><p>只是現代人應該極少會用紙本來實現這個方法，多半是透過軟體。</p><p>最常見的，就是那些極具<strong>卡片筆記精神</strong>的「雙向鏈結」筆記軟體，比如目前仍火紅的 <a href="https://obsidian.md/">Obsidian</a>、<a href="https://heptabase.com/">Heptabase</a> 等。</p><p>撇開使用上的細節差異不談——沒錯，上述軟體間的差異還不小！你不得不承認，<strong>雙向鏈結</strong>這種做法，確實和傳統的<strong>目錄式筆記</strong>有著根本的不同。</p><p>這也是為何我當初如此興奮的原因。有興趣可以去看看這段「<a href="/logseq/#%E4%BA%8C%E3%80%81%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E7%AD%86%E8%A8%98">二、去中心化筆記</a>」。我相信文中有把那種「<strong>自由感</strong>」表達出來。</p><hr><h2 id="雙向鏈結的生活應用"><a href="#雙向鏈結的生活應用" class="headerlink" title="雙向鏈結的生活應用"></a>雙向鏈結的生活應用</h2><p>使用 Logseq 初期，我勤勤勉勉地寫下一張又一張的小卡，內容通常不多，主要著重在<strong>視角上的隨意切換</strong>，並用雙向鏈結來加以關聯。比如我會記錄<strong>每天的晚餐</strong>：</p><p><img src="https://i.imgur.com/KUv502A.png"></p><p>這圖中可以有好幾個視角：</p><ol><li>晚餐清單視角，也就是上圖。</li><li>某一家店視角：是最近<strong>哪些時候、去了幾次</strong>。只要點入其中一家店的連結，就能看到<strong>有關這家店的所有記錄</strong>。</li><li>每一天筆記內容的視角：點入日期連結，就能看到這天的所有記錄。</li></ol><p>這種<strong>隨意切換主視角的檢視法</strong>，只有雙向鏈結筆記能輕鬆辦到！</p><p>所以，Logseq 對我的生活管理，有一定的幫助。晚餐只是其中一例。</p><blockquote><p>相關文章：<a href="/less-is-more/">為什麼你「不需要」所謂的人生管理系統</a></p></blockquote><hr><h2 id="學習閃卡化"><a href="#學習閃卡化" class="headerlink" title="學習閃卡化"></a>學習閃卡化</h2><p>但說真的，我寫筆記主要還是為了「學習」。不知為何，雙向鏈結用在我的學習上，就沒有那麼「輕鬆寫意」了。</p><p>當然它肯定還是有它的優勢（與劣勢）。</p><p>但關鍵似乎是——我<strong>並不想</strong>這麼麻煩！或許是因為學習這個議題本身還是相對複雜吧。</p><p>學習上，我的 Logseq 用法<strong>趨向單純——製作一堆閃卡</strong>！（flashcards）</p><p>這些閃卡，通常是我在學習某個主題時，遇到的<strong>重要概念、定義</strong>等等。我會把它們寫成一張張卡片，然後用 Logseq 的「閃卡模式」來複習。</p><p><img src="https://i.imgur.com/pug7GUb.png"></p><p>用了近 2 年，我必須說，閃卡的學習效果還是<strong>相對有限</strong>的。它確實可以讓你「<strong>記得一些事</strong>」，但也僅止於此。</p><p>我還是會繼續用閃卡學習，但我心裡清楚：<strong>它只是一種輔助</strong>——就像左手一樣。</p><hr><h2 id="簡單粗暴的筆記方式"><a href="#簡單粗暴的筆記方式" class="headerlink" title="簡單粗暴的筆記方式"></a>簡單粗暴的筆記方式</h2><p>我雖然是筆記愛好者，但我<strong>並不喜歡</strong>在「筆記方法」上玩出各種花樣。</p><p>畢竟，我真正想要的是<strong>把事情做好</strong>，而不是<strong>把筆記做好</strong>XD</p><p>能不做的筆記就別做了，更別說大部分筆記根本也不會複習，多是一場枉然。</p><p>現在回頭看，<strong>卡片筆記其實從來沒有在我的學習中佔據要角</strong>。所以這一年來我也幾乎不在文章中提及了。</p><p>那我現在用什麼方法做筆記？很多種工具！（Notion、Bear、Logseq、UpNote）</p><p>雖然用很多種筆記軟體，但基本都只用<strong>最簡單粗暴的方式</strong>。依據<strong>不同的素材與複習習慣</strong>來決定該用哪一個。</p><h2 id="Notion-的文藝復興"><a href="#Notion-的文藝復興" class="headerlink" title="Notion 的文藝復興"></a>Notion 的文藝復興</h2><p>在〈<a href="/simple-notion/">使用 Notion 滿 3 年，為何我仍「不推薦」用它來管理你的人生？</a>〉一文，有很多批評（和鼓勵），可以見留言處。</p><p>一開始，這些批評我會滿在意的，但現在有不同看法，批評可以作為讀者思考的素材，我就不必期待自己面面俱到，至少通篇看完後，不會只有我的片面之言。</p><p>當然，我不是說這些批評都沒道理，很多時候是沒有足夠的心力再好好修改、重構文章。</p><p>回歸正題，事實上，我最近使用 Notion 寫筆記的頻率<strong>又提高了</strong>！</p><h3 id="長文本筆記"><a href="#長文本筆記" class="headerlink" title="長文本筆記"></a>長文本筆記</h3><p>原因無它，Notion 很適合「<strong>長文本</strong>」，而 Logseq 這種卡片筆記軟體卻很忌諱長文本——因為卡片就是要短小嘛。</p><p>這些長文本是什麼？主要是和 AI 的<strong>對話</strong>！（尤其是它的<strong>回答</strong>）</p><blockquote><p>相關文章：<a href="/my-ai-dialogue-notes/">我寫「AI 對話筆記」的方法與思考</a></p></blockquote><p>以前我通常是做成一張張的閃卡，慢慢複習，後來發現，這也太「搞剛」了，全部摻在一起做成 Notion 筆記才是<strong>最簡單粗暴的方式</strong>😎</p><p><img src="https://i.imgur.com/ABrQYZd.png" alt="Notion 筆記（點圖可放大）"><span class="cap">Notion 筆記（點圖可放大）</span></p><p>而且欄位不必太多，<strong>最好不超過 3 個</strong>，這樣<strong>視覺上的資訊負擔</strong>才不會太重。</p><hr><h2 id="結語：筆記，就只是筆記"><a href="#結語：筆記，就只是筆記" class="headerlink" title="結語：筆記，就只是筆記"></a>結語：筆記，就只是筆記</h2><p>如同我在「<a href="/about/#%E7%AD%86%E8%A8%98%EF%BC%8C%E5%B0%B1%E5%8F%AA%E6%98%AF%E7%AD%86%E8%A8%98">關於我</a>」中對筆記軟體們的評論：</p><blockquote><p>這些工具終歸只是<strong>記錄的手段，並不是價值真正誕生的地方。</strong>用什麼工具、該怎麼用，<strong>真的沒那麼重要。</strong></p></blockquote><p>從這個角度看，我們還可以更「<strong>狠</strong>」一點。</p><p>我希望不止是卡片筆記被我遺忘了，甚至是<strong>所有的筆記形式，從長遠來看，最好都能夠逐漸式微</strong>。</p><p>那時候，或許我就從一個「筆記愛好者」，變成「善於學習之人」了。</p><blockquote><p>推薦影片：<a href="https://youtu.be/oBbz-tSw7QQ?si=Do00pVPrOroFlkdt">複雜化、過度分析的誤區：停止內耗開始行動</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/M62tm5t.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;如你所知，我絕對稱得上是一個「筆記愛好者」，甚至在 &lt;a href=&quot;https://github.com/kyomind&quot;&gt;GitHub Profile&lt;/a&gt; 中還提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;喜好寫作與筆記，患有「&lt;strong&gt;不做筆記便不會學習&lt;/strong&gt;」症候群。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這一點也不假，很多時候我確實就是不做筆記便無法學習。&lt;/p&gt;
&lt;p&gt;兩年多前，我寫下了這篇〈&lt;a href=&quot;/logseq/&quot;&gt;Logseq 心得：一顆冉冉升起的「卡片筆記」新星&lt;/a&gt;〉，宣告我的「筆記人生」進入了一個&lt;strong&gt;全新階段&lt;/strong&gt;——我發現了卡片筆記（卡片盒筆記法）與雙向連結筆記軟體 Logseq。&lt;/p&gt;
&lt;p&gt;文中還充滿期待地規劃了系列內容，宣稱要透過一連串教學，讓讀者知曉「卡片筆記」的美妙，讓它不再曲高和寡。&lt;/p&gt;
&lt;p&gt;然後呢？&lt;strong&gt;就沒有然後了。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/M62tm5t.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="個人知識管理" scheme="https://blog.kyomind.tw/tags/%E5%80%8B%E4%BA%BA%E7%9F%A5%E8%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="筆記軟體" scheme="https://blog.kyomind.tw/tags/%E7%AD%86%E8%A8%98%E8%BB%9F%E9%AB%94/"/>
    
    <category term="Logseq" scheme="https://blog.kyomind.tw/tags/Logseq/"/>
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
    <category term="卡片盒筆記法" scheme="https://blog.kyomind.tw/tags/%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用 Docker 容器化你的 Django 專案</title>
    <link href="https://blog.kyomind.tw/dockerize-django-project/"/>
    <id>https://blog.kyomind.tw/dockerize-django-project/</id>
    <published>2025-01-24T10:21:59.000Z</published>
    <updated>2025-03-13T01:42:11.530Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/lyxUZv1.png" alt="Let&#39;s Django！"><span class="cap">Let&#39;s Django！</span></p><p>這是 <a href="/tags/Django-Tutorial/">Django Tutorial</a> 的第 11 篇，同時也是「Django 專案容器化」<strong>三部曲</strong>的第 1 篇。</p><p>範例程式碼可參考我的 <a href="https://github.com/kyomind/Django-Tutorial">GitHub 專案</a>。</p><p>本文相關的程式碼改動，都集中在這個 <a href="https://github.com/kyomind/Django-Tutorial/pull/6">PR</a>。</p><h3 id="系列：Django-專案容器化"><a href="#系列：Django-專案容器化" class="headerlink" title="系列：Django 專案容器化"></a>系列：Django 專案容器化</h3><ul><li><a href="/series/#Django-%E5%B0%88%E6%A1%88%E5%AE%B9%E5%99%A8%E5%8C%96">文章清單（連載中）</a></li></ul><hr><p>「<strong>環境不一致</strong>」是軟體開發中的常見困境，你用 Windows、我用 Mac，在我的機器上順利運行的程式碼，換到另一個人的電腦可能就不對了。</p><p>而「容器化」正是處理這類環境設定議題的主要手段。</p><p>容器化技術不僅一定程度解決了「<a href="https://thoughtbot.com/blog/it-works-on-my-machine-why">在我的電腦可以執行</a>」的老問題，更在不同面向上，改變了軟體開發的方式。</p><p>不止是開發，從測試到部署，<strong>容器都佔據了重要角色。</strong></p><p>透過標準化的容器環境，團隊成員可以確保程式碼在不同環境中的<strong>表現一致</strong>。</p><span id="more"></span><h2 id="容器化開發"><a href="#容器化開發" class="headerlink" title="容器化開發"></a>容器化開發</h2><p>由此可見，「容器化」是現代開發的 ABC。</p><p>我更想強調是：<strong>哪怕只是在本機上運行，維持專案的容器化也是一個好習慣</strong>，方便日後遷移、分享，甚至協作。</p><p>本文是「Django 專案容器化」三部曲系列的第一篇，將帶你從零開始，將一個 Django 專案進行容器化。</p><p>下一篇介紹如何將 Django 專案容器與的 db 容器整合，並使用 Docker Compose 建立多容器架構。</p><p>最後則是（拖稿許久的）Python 套件管理器——Poetry——的容器化設定，讓你正式告別<code>requirements.txt</code>。</p><p>這些都是<strong>現代開發日常</strong>，值得我們一一了解並實踐。</p><hr><h2 id="本文主旨與目標讀者"><a href="#本文主旨與目標讀者" class="headerlink" title="本文主旨與目標讀者"></a>本文主旨與目標讀者</h2><p>本文會帶你手把手<strong>將一個 Django 專案進行容器化改造。</strong></p><p>讓你在本地開發時，也透過 Docker 容器來運行專案 app。而不是常見的——在本機的 CLI 直接執行<code>python manage.py runserver</code>指令。</p><p>這些改造並不難，但仍然需要讀者<strong>對 Docker 有基礎的了解。</strong></p><p>此外，任何軟體專案都可以容器化，選擇 Django 只是為了讓例子更具體，而且它是我相當熟悉的工具。</p><p>如果你已經在工作中使用 Docker，那本文將會是一個實用的示範。</p><h2 id="Docker-與容器"><a href="#Docker-與容器" class="headerlink" title="Docker 與容器"></a>Docker 與容器</h2><p>Docker 是一個開源的容器化平台，它讓開發者能夠將應用程式與其依賴（執行環境）打包成一個獨立的元件，確保在大部分環境中都能<strong>一致地運行。</strong></p><p>關於 Docker 的學習指引，可參考這篇〈<a href="/docker-learning/">Docker 新手入門：書與線上課程推薦</a>〉，本文主要關注「實作面」。</p><h3 id="Docker-核心概念"><a href="#Docker-核心概念" class="headerlink" title="Docker 核心概念"></a>Docker 核心概念</h3><p>使用 Docker，需要了解以下重要概念：</p><ul><li><strong>Image</strong>：包含執行環境、作業系統和應用程式等等的定義，是容器的基礎。</li><li><strong>Container</strong>：根據 image 啟動起來的執行單位，本身是一個 process。其特性是在 image 之上再建立一個「讀寫層」。</li><li><strong>Dockerfile</strong>：定義如何建立 image 的檔案。（<strong>本文重點</strong>）</li><li><strong>Volume</strong>：容器的持久化儲存空間，可將資料獨立存放在主機上（而不是直接置於容器中），避免容器刪除時資料遺失。使用<code>-v</code>參數來設定。</li></ul><p>這些概念環環相扣，形成了一個完整的 <strong>Docker 容器生態系統</strong>。</p><p>接下來，讓我們實際動手，將這些概念應用在我們的 Django 專案中。</p><hr><h2 id="為-Django-專案建立-Dockerfile"><a href="#為-Django-專案建立-Dockerfile" class="headerlink" title="為 Django 專案建立 Dockerfile"></a>為 Django 專案建立 Dockerfile</h2><p>想要將現有的 Django 專案容化器，就要從建立自己的 Docker Image 開始。</p><p>想要為專案建立<strong>專屬的 image</strong>，你需要<strong>自行定義 Dockerfile</strong>。</p><p>我們一樣以<a href="https://github.com/kyomind/Django-Tutorial">範例專案</a>為例，試著在「專案根目錄」新增一個 Dockerfile。</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>下面是一個基礎的 Dockerfile，使用了 Python 的官方 image：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Python Image</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.12</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定工作目錄</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 複製專案環境與相關檔案</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟動 Django 開發伺服器</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;manage.py&quot;</span>, <span class="string">&quot;runserver&quot;</span>, <span class="string">&quot;0.0.0.0:8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>非常簡單！</p><h3 id="重點說明"><a href="#重點說明" class="headerlink" title="重點說明"></a>重點說明</h3><ul><li><code>FROM</code>：選擇基礎環境，這裡使用較輕量的<code>python:3.12-slim</code>。</li><li><code>WORKDIR</code>：設定工作目錄，確保相關檔案、資源都在同一處。</li><li><code>COPY</code>：複製檔案至容器內部。這裡使用了兩次，主要是為了「快取最佳化」。</li><li><code>RUN</code>：執行指令——使用 pip 安裝 Python 套件。</li><li><code>CMD</code>：定義啟動容器時要執行的指令，這裡用來啟動 Django 開發伺服器。</li></ul><p>在容器內執行 Python 專案的一大特色，就是<strong>不需要再建立一個專案虛擬環境</strong>——因為<strong>容器本身就已經是一個隔離環境</strong>。</p><p>容器內的 Python 及相關套件是<strong>專屬於這個容器</strong>的，不會與其他容器或系統產生衝突。這種<strong>環境隔離</strong>也是 Docker 容器化的<strong>核心優勢</strong>之一。</p><hr><h2 id="用-Dockerfile-建立-Image"><a href="#用-Dockerfile-建立-Image" class="headerlink" title="用 Dockerfile 建立 Image"></a>用 Dockerfile 建立 Image</h2><p>Dockerfile 是<strong>自定義 image</strong> 的工具，或說<strong>設計圖</strong>。</p><p>有了 Dockerfile 後，我們在專案根目錄下使用 build 指令來建立 image：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-django-app .</span><br></pre></td></tr></table></figure><p>這個指令會根據 Dockerfile 的設定，建立一個名為<code>my-django-app</code>的 image。當然，這裡的名稱是自訂的。</p><p>執行後我得到了錯誤訊息，才發現我竟然還沒有為本專案建立<code>requirements.txt</code>😅</p><p>參考〈<a href="/python-poetry/">Python 套件管理器——Poetry 完全入門指南</a>〉中的<a href="/python-poetry/#%E8%BC%B8%E5%87%BA-requirements-txt">這段</a>來將 Poetry 虛擬環境內容輸出為<code>requirements.txt</code>。</p><p>或直接使用下列指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry <span class="built_in">export</span> -f requirements.txt -o requirements.txt --without-hashes</span><br></pre></td></tr></table></figure><blockquote><p>貼心提醒：我們會在第三篇將 Poetry 一併容器化。至此之後，專案中就<strong>不再需要</strong><code>requirements.txt</code>了。</p></blockquote><h3 id="建立-Image-並確認"><a href="#建立-Image-並確認" class="headerlink" title="建立 Image 並確認"></a>建立 Image 並確認</h3><p>新增<code>requirements.txt</code>後重新執行指令，得到下列成功結果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">=&gt; [internal] load build context                                                     0.4s</span><br><span class="line">=&gt; =&gt; transferring context: 1.20MB                                                   0.4s</span><br><span class="line">=&gt; [2/5] WORKDIR /app                                                                0.2s</span><br><span class="line">=&gt; [3/5] COPY requirements.txt .                                                     0.0s</span><br><span class="line">=&gt; [4/5] RUN pip install -r requirements.txt                                         5.7s</span><br><span class="line">=&gt; [5/5] COPY . .                                                                    0.8s</span><br><span class="line">=&gt; exporting to image                                                                0.5s</span><br><span class="line">=&gt; =&gt; exporting layers                                                               0.5s</span><br><span class="line">=&gt; =&gt; writing image sha256:5dfec18599155b31991534edc194511e43400db93ca7831284277f41  0.0s</span><br><span class="line">=&gt; =&gt; naming to docker.io/library/my-django-app                                      0.0s</span><br></pre></td></tr></table></figure><p>保險起見，還是先用指令<code>docker image ls</code>確認一下 image 真的存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ docker image <span class="built_in">ls</span></span><br><span class="line">REPOSITORY       TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">my-django-app    latest    5dfec1859915   5 minutes ago   356MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>至此，image 的建立大功告成。接下來我們要把容器 run 起來。</p><hr><h2 id="運行-Docker-容器"><a href="#運行-Docker-容器" class="headerlink" title="運行 Docker 容器"></a>運行 Docker 容器</h2><p>使用下面 Docker 指令運行容器，並將容器內部的 8000 port 對應到主機：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="built_in">pwd</span>)/db.sqlite3:/app/db.sqlite3 -p 8000:8000 my-django-app</span><br></pre></td></tr></table></figure><p>除了 port mapping，我們還用了<code>-v</code>參數進行「<a href="https://docs.docker.com/engine/storage/bind-mounts/">bind mounts</a>」，確保本機的 SQLite 資料庫檔案可以直接 mount 到容器中。</p><p>執行成功後，在瀏覽器中輸入 <code>http://localhost:8000/hello/</code>，就可以看到專案已經正常執行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ docker run -v $(<span class="built_in">pwd</span>)/db.sqlite3:/app/db.sqlite3 -p 8000:8000 my-django-app</span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">[24/Jan/2025 08:52:47] <span class="string">&quot;GET /hello/ HTTP/1.1&quot;</span> 200 28</span><br><span class="line">[24/Jan/2025 08:52:52] <span class="string">&quot;GET /hello/ HTTP/1.1&quot;</span> 200 28</span><br><span class="line">[24/Jan/2025 08:52:54] <span class="string">&quot;GET /hello/ HTTP/1.1&quot;</span> 200 28</span><br></pre></td></tr></table></figure><p>PS：目前專案只有一個端點可以使用XD，那就是<code>/hello/</code>，回應如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// http://127.0.0.1:8000/hello/</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="目前的不足之處"><a href="#目前的不足之處" class="headerlink" title="目前的不足之處"></a>目前的不足之處</h2><p>這樣算是完成初步的容器化了，但說真的，如果只是做到這步，你可能會覺得<strong>這簡直比之前還不便！</strong></p><p>不便之處有下。</p><h3 id="問題一：修改專案程式碼後無法即時更新"><a href="#問題一：修改專案程式碼後無法即時更新" class="headerlink" title="問題一：修改專案程式碼後無法即時更新"></a>問題一：修改專案程式碼後無法即時更新</h3><p>在本機運行時，程式碼只要一改，服務就會自動更新（使用測試模式），最多也只要重啟就可以看到新的變動。</p><p>但容器中的程式碼並不會「自動同步」。</p><p>簡單暴力的方式，是將「<strong>整個專案目錄</strong>」內容都透過 bind mount 掛載到容器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -v $(<span class="built_in">pwd</span>):/app my-django-app</span><br></pre></td></tr></table></figure><p>而不僅僅是掛載<code>db.sqlite3</code>這個檔案。</p><h3 id="問題二：每次都要執行「Docker-指令-參數」，好麻煩！"><a href="#問題二：每次都要執行「Docker-指令-參數」，好麻煩！" class="headerlink" title="問題二：每次都要執行「Docker 指令 + 參數」，好麻煩！"></a>問題二：每次都要執行「Docker 指令 + 參數」，好麻煩！</h3><p>落落長的指令加參數，真的讓人很排斥，遠不如原來的<code>python manage.py runserver</code>指令簡潔。</p><p>如果每次重置環境都要輸入這些內容，會讓人動力大減。</p><p>放心，以上兩個問題都會在下一篇中改善——畢竟應該沒有人是這樣開發的吧？😅</p><hr><h2 id="小結與下一步"><a href="#小結與下一步" class="headerlink" title="小結與下一步"></a>小結與下一步</h2><p>本文完成了對 Django 專案的基礎容器化，從建立 Dockerfile 到建立 Image，再到運行容器，一步步帶你體驗 Docker 的基本操作。</p><p>還處理了 SQLite 資料庫檔案的持久化問題。</p><p>不過，這些都只是「暫時」的做法。</p><p>在下一篇文章中，我們將更進一步：</p><ul><li>探討如何替換 SQLite 為生產級資料庫（如 PostgreSQL）。</li><li>使用 Docker Compose 將 Django 與資料庫容器整合，建立一個多容器架構。</li></ul><p>透過 Docker，為我們<strong>打造更流暢的現代開發體驗</strong>，敬請期待。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lyxUZv1.png&quot; alt=&quot;Let&amp;#39;s Django！&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是 &lt;a href=&quot;/tags/Django-Tutorial/&quot;&gt;Django Tutorial&lt;/a&gt; 的第 11 篇，同時也是「Django 專案容器化」&lt;strong&gt;三部曲&lt;/strong&gt;的第 1 篇。&lt;/p&gt;
&lt;p&gt;範例程式碼可參考我的 &lt;a href=&quot;https://github.com/kyomind/Django-Tutorial&quot;&gt;GitHub 專案&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文相關的程式碼改動，都集中在這個 &lt;a href=&quot;https://github.com/kyomind/Django-Tutorial/pull/6&quot;&gt;PR&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;系列：Django-專案容器化&quot;&gt;&lt;a href=&quot;#系列：Django-專案容器化&quot; class=&quot;headerlink&quot; title=&quot;系列：Django 專案容器化&quot;&gt;&lt;/a&gt;系列：Django 專案容器化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/series/#Django-%E5%B0%88%E6%A1%88%E5%AE%B9%E5%99%A8%E5%8C%96&quot;&gt;文章清單（連載中）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;「&lt;strong&gt;環境不一致&lt;/strong&gt;」是軟體開發中的常見困境，你用 Windows、我用 Mac，在我的機器上順利運行的程式碼，換到另一個人的電腦可能就不對了。&lt;/p&gt;
&lt;p&gt;而「容器化」正是處理這類環境設定議題的主要手段。&lt;/p&gt;
&lt;p&gt;容器化技術不僅一定程度解決了「&lt;a href=&quot;https://thoughtbot.com/blog/it-works-on-my-machine-why&quot;&gt;在我的電腦可以執行&lt;/a&gt;」的老問題，更在不同面向上，改變了軟體開發的方式。&lt;/p&gt;
&lt;p&gt;不止是開發，從測試到部署，&lt;strong&gt;容器都佔據了重要角色。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;透過標準化的容器環境，團隊成員可以確保程式碼在不同環境中的&lt;strong&gt;表現一致&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/lyxUZv1.png" type="image"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/categories/Django/"/>
    
    
    <category term="Docker" scheme="https://blog.kyomind.tw/tags/Docker/"/>
    
    <category term="Django Tutorial" scheme="https://blog.kyomind.tw/tags/Django-Tutorial/"/>
    
  </entry>
  
</feed>
