<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/leaf.svg</icon>
  <subtitle>我的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2024-10-03T05:47:27.046Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>Kyo Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django Ninja 教學 21：錯誤處理（上）自定義錯誤與 HTTP 回應</title>
    <link href="https://blog.kyomind.tw/django-ninja-21/"/>
    <id>https://blog.kyomind.tw/django-ninja-21/</id>
    <published>2024-10-03T02:46:01.000Z</published>
    <updated>2024-10-03T05:47:27.046Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>在軟體開發中，<strong>錯誤處理</strong>是一個不容忽視——但<strong>常常被忽視</strong>——的環節。</p><p>不誇張地說，錯誤處理是一個「<strong>做得好沒人誇，做不好系統就慘兮兮</strong>」的議題。</p><p>沒關係，我們還是<strong>盡可能把自己做好</strong>。</p><p>Django Ninja 使用 Pydantic 進行資料驗證，失敗時，預設回應「422 Unprocessable Entity」。</p><p>然而，我們有時候需要回應「400 Bad Request」或別的狀態碼，以符合<strong>現實業務需求</strong>或<strong>團隊開發習慣</strong>。</p><p>總之，無論出於何種原因，我們想<strong>自訂錯誤訊息、格式，以及回應的狀態碼</strong>，而<strong>不使用</strong> Django Ninja 預設的 422 回應——不得不說，這個制式回應的資訊有點多、結構有點複雜，因為它要兼容各種情況。</p><p>本文將介紹如何<strong>自定義錯誤處理與回應</strong>——使用 Django Ninja 內建的<code>HttpError</code>。</p><p>所有的程式碼改動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/12">這個 PR</a>。</p><hr><h2 id="Django-Ninja-的自動錯誤處理"><a href="#Django-Ninja-的自動錯誤處理" class="headerlink" title="Django Ninja 的自動錯誤處理"></a>Django Ninja 的自動錯誤處理</h2><p>上一篇我們提到，如果你在 Schema 的驗證方法中，拋出<code>ValueError</code>錯誤，Django Ninja 將會<strong>自動捕捉並回應</strong>。</p><p>事實上，不止<code>ValueError</code>，Django Ninja 還會替你處理以下這幾種錯誤：</p><ul><li><code>pydantic.ValidationError</code>，來自 Pydantic 的驗證錯誤，這是<strong>為何</strong>當 Schema 欄位有問題時，我們會直接收到 422 回應。</li><li>此外，Django Ninja 還內建了一個 <code>ninja.errors.ValidationError</code>，這些錯誤同樣會返回 422。</li><li><code>ninja.errors.HttpError</code>：這是本文的重點，下面會介紹。</li></ul><p>這些都是 Django Ninja 會自動捕捉的錯誤，但不是每一種都給出制式的 422 回應——第三種就不是。</p><span id="more"></span><hr><h2 id="新需求：驗證失敗時，改用-400-回應"><a href="#新需求：驗證失敗時，改用-400-回應" class="headerlink" title="新需求：驗證失敗時，改用 400 回應"></a>新需求：驗證失敗時，改用 400 回應</h2><p>如果我們希望 Schema 驗證失敗時，要返回「400 Bad Request」而不是 422，怎麼做最簡單？</p><p>答：使用 Django Ninja 的<code>HttpError</code>。</p><p>以下是 Schema 的程式碼改動，只改了兩行！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> ninja.errors <span class="keyword">import</span> HttpError  <span class="comment"># 第一行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @model_validator(<span class="params">mode=<span class="string">&#x27;after&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_passwords_match</span>(<span class="params">self</span>) -&gt; Self:</span><br><span class="line">        <span class="keyword">if</span> self.password != self.confirm_password:</span><br><span class="line">            <span class="keyword">raise</span> HttpError(<span class="number">400</span>, <span class="string">&#x27;密碼和確認密碼必須相同&#x27;</span>)  <span class="comment"># 第二行</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><p>沒錯，就這麼簡單！</p><p>只是把驗證方法拋出的錯誤，從<code>ValueError</code>替換為<code>HttpError</code>即可。</p><p>值得留意的是，<code>HttpError</code>實例的<strong>初始化</strong>，需要<strong>兩個參數</strong>，第一個是 HTTP 狀態碼，第二個才是錯誤訊息。</p><h3 id="回應內容"><a href="#回應內容" class="headerlink" title="回應內容"></a>回應內容</h3><p>看看同樣的驗證失敗，回應有何不同：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 400 Bad Request</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密碼和確認密碼必須相同&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>變成我們熟悉的格式——只有錯誤訊息。</p><hr><h2 id="在驗證方法中使用-HttpError-的不妥之處"><a href="#在驗證方法中使用-HttpError-的不妥之處" class="headerlink" title="在驗證方法中使用 HttpError 的不妥之處"></a>在驗證方法中使用 HttpError 的不妥之處</h2><p>直接在 Schema 的驗證方法中拋出<code>HttpError</code>，是一種便捷的方式，因為它能夠<strong>簡化回應處理</strong>。</p><p>我們無需額外捕捉錯誤或手動指定回應格式。驗證失敗時，回應會<strong>自動包含</strong>我們定義的狀態碼和錯誤訊息，既簡單又直接。</p><p>然而，這麼做其實<strong>並不妥當</strong>，主要有幾個問題，比如降低可測試性、限制回應的靈活性等等。但其中<strong>最關鍵</strong>的，還是是我們上一篇提到的——「<strong>關注點分離</strong>」。</p><h3 id="違反「關注點分離」"><a href="#違反「關注點分離」" class="headerlink" title="違反「關注點分離」"></a>違反「關注點分離」</h3><p><strong>這個做法違反了「關注點分離」原則。</strong></p><p>驗證邏輯的職責是檢查資料的正確性，而<strong>回應</strong>應該由 view 函式負責。</p><p>將回應邏輯混入驗證過程中，會讓驗證和回應這兩個<strong>本應獨立</strong>的部分<strong>耦合在一起</strong>，導致<strong>職責混亂</strong>，不利於程式碼維護。</p><p>因此，雖然在驗證方法內使用<code>HttpError</code>，看似能夠方便地實現需求，但從<strong>架構設計</strong>的角度考慮，將<strong>回應處理</strong>放在 view 函式中，才是一個更合理的選擇。</p><p>別擔心，下一篇我們會換個做法，但本文的主角還是<code>HttpError</code>。</p><hr><h2 id="HttpError-的典型情境：在-view-函式中使用"><a href="#HttpError-的典型情境：在-view-函式中使用" class="headerlink" title="HttpError 的典型情境：在 view 函式中使用"></a>HttpError 的典型情境：在 view 函式中使用</h2><p>相比於在 Schema 中使用<code>HttpError</code>，把它放在 view 函式裡執行，方為正道。</p><p>以下就是一個經典場景。</p><p>儘管資料驗證邏輯應盡可能放在 Schema 中，<strong>但也不是所有的驗證都適合丟給 Schema 做</strong>。</p><p>比如，使用者的 email 欄位具有「<strong>唯一性</strong>」——不能重複。所以我們希望先確認使用者輸入的 email <strong>是否和 db 中的資料重複</strong>，是的話，直接回應<code>409 Conflict</code>。</p><p>這無疑也是一種<strong>驗證</strong>，但它涉及了「<strong>資料庫查詢</strong>」。</p><p>這種涉及資料庫查詢的驗證，更適合在 view 函式中進行，而不是在 Schema 裡。因為資料庫查詢屬於<strong>比較重的動態操作</strong>，與 Schema 的<strong>靜態資料檢查</strong>有著<strong>本質的不同</strong>。</p><p>因此，我們更常在 view 函式中使用<code>HttpError</code>處理這類需求。</p><p>新增程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params">...</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">..., payload: CreateUserRequest</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    新增使用者</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> User.objects.<span class="built_in">filter</span>(email=payload.email).exists():</span><br><span class="line">        <span class="keyword">raise</span> HttpError(<span class="number">409</span>, <span class="string">&#x27;使用者 email 已存在&#x27;</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>上面是「預先查詢」，和下面這個寫法，在結果上是類似的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user.save()</span><br><span class="line"><span class="keyword">except</span> IntegrityError:  <span class="comment"># Django ORM 唯一性錯誤</span></span><br><span class="line">    <span class="keyword">raise</span> HttpError(<span class="number">409</span>, <span class="string">&#x27;使用者 email 已存在&#x27;</span>)</span><br></pre></td></tr></table></figure><p>只不過一個是<strong>事前驗證並拋出錯誤</strong>，一個是<strong>事後捕捉錯誤</strong>（然後再拋出）。</p><p>驗證失敗的回應：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 409 Conflict</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;使用者 email 已存在&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>確實還不錯！</p><hr><h2 id="為什麼不直接-return-409-回應就好？"><a href="#為什麼不直接-return-409-回應就好？" class="headerlink" title="為什麼不直接 return 409 回應就好？"></a>為什麼不直接 return 409 回應就好？</h2><p>聰明的你可能會想到：</p><blockquote><p>咦，那我<strong>何不直接 return</strong> 一個帶有錯誤訊息的 Python 字典就好了？為什麼非得在 view 函式中<code>raise HttpError</code>？</p></blockquote><p>這個想法，大概的程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&#x27;/users/&#x27;</span>, response=&#123;<span class="number">201</span>: <span class="built_in">dict</span>, <span class="number">409</span>: <span class="built_in">dict</span>&#125;, ...</span>)</span></span><br><span class="line"><span class="keyword">def</span> (...) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">dict</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    新增使用者</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> User.objects.<span class="built_in">filter</span>(email=payload.email).exists():</span><br><span class="line">        <span class="keyword">return</span> <span class="number">409</span>, &#123;<span class="string">&quot;detail&quot;</span>: <span class="string">&quot;使用者 email 已存在&quot;</span>&#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>這樣不是<strong>更加直觀</strong>嗎？</p><p>這是一個<strong>好問題</strong>。</p><h3 id="重點解析"><a href="#重點解析" class="headerlink" title="重點解析"></a>重點解析</h3><p>我們還是先來看一下，這段程式碼中有哪些重點：</p><ul><li><code>response=&#123;201: dict, 409: dict&#125;</code>：第 13 篇提過的「<strong>多重狀態碼回應</strong>」，這不就派上用場了！</li><li>用<code>return</code>取代<code>raise</code>。</li><li>如果想驗證錯誤訊息格式，可以定義一個 Schema。這個例子只是簡化版。</li></ul><p>看起來確實不錯，也很符合直覺，其實我以前寫 Django REST framework，<strong>都是</strong>這樣寫的。</p><p><strong>可是</strong>，這個寫法在 Django Ninja 中，使用「分頁裝飾器」時，就會<strong>踢到鐵板</strong>了。</p><p>目前時機未到，在後續的〈卷 25：分頁（下）自定義分頁類別〉中，我們再把這件事說清楚。</p><p>總之，現階段我們只要知道，類似情況還是<code>raise HttpError</code>會比較妥當。</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在這篇文章中，我們學習了如何使用 Django Ninja 內建的<code>HttpError</code>來自定義錯誤回應，以避免預設的 422。</p><p>並解釋了為何<code>HttpError</code>不適合用在 Schema 中（雖然我們暫時這麼做了😅），而是應該放到 view 函式裡。</p><p>下一篇，我們將改善 Schema 拋出的錯誤、探討全域錯誤處理機制，並且使用 Django Ninja 所提供的<code>exception_handler</code>裝飾器，進一步提升 API 的錯誤處理能力。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;在軟體開發中，&lt;strong&gt;錯誤處理&lt;/strong&gt;是一個不容忽視——但&lt;strong&gt;常常被忽視&lt;/strong&gt;——的環節。&lt;/p&gt;
&lt;p&gt;不誇張地說，錯誤處理是一個「&lt;strong&gt;做得好沒人誇，做不好系統就慘兮兮&lt;/strong&gt;」的議題。&lt;/p&gt;
&lt;p&gt;沒關係，我們還是&lt;strong&gt;盡可能把自己做好&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Django Ninja 使用 Pydantic 進行資料驗證，失敗時，預設回應「422 Unprocessable Entity」。&lt;/p&gt;
&lt;p&gt;然而，我們有時候需要回應「400 Bad Request」或別的狀態碼，以符合&lt;strong&gt;現實業務需求&lt;/strong&gt;或&lt;strong&gt;團隊開發習慣&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;總之，無論出於何種原因，我們想&lt;strong&gt;自訂錯誤訊息、格式，以及回應的狀態碼&lt;/strong&gt;，而&lt;strong&gt;不使用&lt;/strong&gt; Django Ninja 預設的 422 回應——不得不說，這個制式回應的資訊有點多、結構有點複雜，因為它要兼容各種情況。&lt;/p&gt;
&lt;p&gt;本文將介紹如何&lt;strong&gt;自定義錯誤處理與回應&lt;/strong&gt;——使用 Django Ninja 內建的&lt;code&gt;HttpError&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所有的程式碼改動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/12&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Django-Ninja-的自動錯誤處理&quot;&gt;&lt;a href=&quot;#Django-Ninja-的自動錯誤處理&quot; class=&quot;headerlink&quot; title=&quot;Django Ninja 的自動錯誤處理&quot;&gt;&lt;/a&gt;Django Ninja 的自動錯誤處理&lt;/h2&gt;&lt;p&gt;上一篇我們提到，如果你在 Schema 的驗證方法中，拋出&lt;code&gt;ValueError&lt;/code&gt;錯誤，Django Ninja 將會&lt;strong&gt;自動捕捉並回應&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;事實上，不止&lt;code&gt;ValueError&lt;/code&gt;，Django Ninja 還會替你處理以下這幾種錯誤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pydantic.ValidationError&lt;/code&gt;，來自 Pydantic 的驗證錯誤，這是&lt;strong&gt;為何&lt;/strong&gt;當 Schema 欄位有問題時，我們會直接收到 422 回應。&lt;/li&gt;
&lt;li&gt;此外，Django Ninja 還內建了一個 &lt;code&gt;ninja.errors.ValidationError&lt;/code&gt;，這些錯誤同樣會返回 422。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ninja.errors.HttpError&lt;/code&gt;：這是本文的重點，下面會介紹。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這些都是 Django Ninja 會自動捕捉的錯誤，但不是每一種都給出制式的 422 回應——第三種就不是。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 20：資料驗證（下）跨欄位驗證</title>
    <link href="https://blog.kyomind.tw/django-ninja-20/"/>
    <id>https://blog.kyomind.tw/django-ninja-20/</id>
    <published>2024-10-02T03:31:23.000Z</published>
    <updated>2024-10-03T01:59:36.245Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>上一篇我們講完了單一欄位的自定義驗證，這篇則要來討論<strong>跨欄位</strong>之間的驗證。</p><p>跨欄位驗證同樣是 API 開發中十分常見的需求，例如註冊帳號時，要保證「密碼」與「確認密碼」兩個欄位內容相同；選擇<strong>日期期間</strong>時，開始日期不能晚於結束日期等。</p><p>這些驗證場景<strong>無法</strong>透過單一欄位驗證實現，因為它們需要同時檢查<strong>多個欄位之間的邏輯關聯</strong>，來確保整體資料的<strong>一致性和正確性</strong>。</p><p>本文將介紹如何透過 Pydantic 來實現跨欄位驗證需求——以「確認密碼」為例，展示這個功能的實際應用。</p><p>本文所有的程式碼改動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/11">這個 PR</a>。</p><hr><h2 id="跨欄位驗證與關注點分離"><a href="#跨欄位驗證與關注點分離" class="headerlink" title="跨欄位驗證與關注點分離"></a>跨欄位驗證與關注點分離</h2><p>其實，無論是單一欄位還是跨欄位的自定義驗證，都<strong>不一定</strong>要藉由 Pydantic 來完成。</p><p>理論上，資料驗證可以<strong>直接</strong>在 view 函式中進行，例如取出輸入的欄位值，手動驗證它的合法性。跨欄位驗證也是如此。</p><p>然而，這是一種方便但「<strong>粗糙</strong>」的做法——只適合用在驗證邏輯非常單純的情況。</p><p>透過 Pydantic 進行資料驗證，則能夠帶來一個明顯的好處：<strong>關注點分離</strong>。</p><span id="more"></span><h3 id="關注點分離"><a href="#關注點分離" class="headerlink" title="關注點分離"></a>關注點分離</h3><p><a href="https://zh.wikipedia.org/zh-tw/%E5%85%B3%E6%B3%A8%E7%82%B9%E5%88%86%E7%A6%BB">關注點分離</a>（Separation of Concerns）是一種<strong>設計原則</strong>。主張將程式中不同功能的職責劃分到<strong>獨立</strong>的模組或層次中。</p><p>每個模組主要<strong>專注於一個具體的方向或目標</strong>，從而<strong>避免把多個不同的功能耦合</strong>在一起。這樣的劃分可以讓程式更易於測試、維護和擴充。</p><p>依照關注點分離，<strong>資料驗證</strong>的邏輯應該集中在 Schema，而不是在 view 函式中進行。</p><p>如此一來，view 可以<strong>專注於處理核心業務邏輯</strong>，而將資料驗證交由專門的元件負責。</p><p>透過 Pydantic 的驗證機制，我們可以實現關注點分離，讓資料驗證與業務邏輯分開，這不僅提升了程式碼的結構，也讓開發流程更加清楚、穩定。</p><hr><h2 id="新需求：確認密碼"><a href="#新需求：確認密碼" class="headerlink" title="新需求：確認密碼"></a>新需求：確認密碼</h2><p>我們要實作一個非常簡單，但足以<strong>充分說明</strong>跨欄位驗證價值的功能：<strong>確認密碼</strong>。</p><p>先回顧上一篇結束時，「新增使用者」API 的請求 Schema 內容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    username: <span class="built_in">str</span> = Field(examples=[<span class="string">&#x27;Alice&#x27;</span>])</span><br><span class="line">    email: <span class="built_in">str</span> = Field(examples=[<span class="string">&#x27;alice@example.com&#x27;</span>])</span><br><span class="line">    password: <span class="built_in">str</span> = Field(min_length=<span class="number">8</span>, examples=[<span class="string">&#x27;password123&#x27;</span>])</span><br><span class="line">    bio: <span class="built_in">str</span> | <span class="literal">None</span> = Field(</span><br><span class="line">        default=<span class="literal">None</span>, examples=[<span class="string">&#x27;Hello, I am Alice.&#x27;</span>])</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>這個 Schema 的設計，顯然<strong>有所不足</strong>。</p><p>因為用戶註冊時，密碼通常需要<strong>輸入兩次</strong>，第二次的作用是「<strong>確認</strong>」——重要的事情說兩次嘛！</p><p>所以，我們要新增一個<code>confirm_password</code>欄位，和<code>password</code>進行<strong>跨欄位驗證：確認兩者內容相同</strong>。</p><p>儘管其中的驗證邏輯非常簡單，但這正是跨欄位驗證的<strong>絕佳舞台</strong>。</p><hr><h2 id="實作跨欄位驗證：使用-model-validator"><a href="#實作跨欄位驗證：使用-model-validator" class="headerlink" title="實作跨欄位驗證：使用 model_validator"></a>實作跨欄位驗證：使用 model_validator</h2><p>Pydantic v2 引入了<code>@model_validator</code>裝飾器來處理跨欄位驗證，這是對 Pydantic v1 中<code>@root_validator</code>的改進和替代。</p><p>這裡的 model，指的是 Pydantic 的 <a href="https://docs.pydantic.dev/latest/api/base_model/">BaseModel</a>——也就是我們的 Schema，而不是 Django 的 <a href="https://docs.djangoproject.com/en/5.1/topics/db/models/">Models</a>。</p><p>我們透過<code>@model_validator</code>來強化「新增使用者」API，加上「確認密碼」功能。</p><p>直接看修改後的程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line">    password: <span class="built_in">str</span> = Field(min_length=<span class="number">8</span>, examples=[<span class="string">&#x27;password123&#x27;</span>])</span><br><span class="line">    confirm_password: <span class="built_in">str</span> = Field(</span><br><span class="line">        min_length=<span class="number">8</span>, examples=[<span class="string">&#x27;password123&#x27;</span>])</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @model_validator(<span class="params">mode=<span class="string">&#x27;after&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_passwords_match</span>(<span class="params">self</span>) -&gt; Self:</span><br><span class="line">        <span class="keyword">if</span> self.password != self.confirm_password:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;密碼和確認密碼必須相同&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><h3 id="重點解析"><a href="#重點解析" class="headerlink" title="重點解析"></a>重點解析</h3><ul><li>新增了一個<code>confirm_password</code>欄位。</li><li>使用<code>@model_validator(mode=&#39;after&#39;)</code>裝飾器來定義跨欄位的驗證方法。<ul><li><code>mode</code>總共有三種：before、after 和 wrap。其中的細節頗多，限於篇幅，本文無法展開（可能等番外篇再行補充）。</li><li>你只要知道，<strong>大部分時候是用 after 模式</strong>，此時的驗證方法是一個「<strong>實例方法</strong>」，<code>self</code>參數代表 Schema 實例本身（從 input 資料初始化而來）。</li></ul></li><li>驗證方法<code>check_passwords_match</code>比較<code>password</code>和<code>confirm_password</code>欄位，如果欄位內容不相同，則拋出<code>ValueError</code>。<ul><li>如前所述，儘管邏輯非常簡單，但它確實現了<strong>兩個欄位之間</strong>的驗證。</li></ul></li><li>跨欄位驗證在<strong>所有單一欄位驗證完成後</strong>才會執行。</li></ul><h3 id="關注點分離的實際應用"><a href="#關注點分離的實際應用" class="headerlink" title="關注點分離的實際應用"></a>關注點分離的實際應用</h3><p>你會發現，在這次新增「確認密碼」的功能實作中，view 函式<strong>完全沒有變動</strong>！——這正是關注點分離原則的體現。</p><p>相較於直接在 view 函式中實作驗證邏輯（需要同時修改 view 和 Schema），這樣的實作方式無疑更加乾淨、解耦。</p><hr><h2 id="驗證失敗時的-HTTP-回應"><a href="#驗證失敗時的-HTTP-回應" class="headerlink" title="驗證失敗時的 HTTP 回應"></a>驗證失敗時的 HTTP 回應</h2><p>最後，讓我們來看看，當資料驗證失敗時，會得到什麼樣的 HTTP 回應。</p><h3 id="違反密碼長度限制"><a href="#違反密碼長度限制" class="headerlink" title="違反密碼長度限制"></a>違反密碼長度限制</h3><p>回應結果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string_too_short&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;body&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;payload&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;password&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;String should have at least 8 characters&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ctx&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;min_length&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>這是 Django Ninja 捕捉 Pydantic 驗證錯誤所給出的「系統級」回應，狀態碼為 422。</p><h3 id="違反「必須包含數字」規則、確認密碼不一致"><a href="#違反「必須包含數字」規則、確認密碼不一致" class="headerlink" title="違反「必須包含數字」規則、確認密碼不一致"></a>違反「必須包含數字」規則、確認密碼不一致</h3><p>輸入的密碼中沒有數字，回應結果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;value_error&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;body&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;payload&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;password&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Value error, 密碼必須包含至少一個數字&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ctx&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密碼必須包含至少一個數字&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>好像<strong>差不多</strong>耶？沒錯，因為這也是 Django Ninja 的<strong>自動回應格式</strong>——除了錯誤訊息中<strong>包含</strong>我們自定義的內容。</p><p>但事實上，這是因為我們在驗證方法中拋出的是<code>ValueError</code>，所以 Django Ninja 會自動幫你處理。</p><p>類似的回應也發生在<strong>確認密碼不一致</strong>時：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;detail&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;value_error&quot;</span>,</span><br><span class="line">            <span class="string">&quot;loc&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;body&quot;</span>,</span><br><span class="line">                <span class="string">&quot;payload&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;Value error, 密碼和確認密碼必須相同&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ctx&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;error&quot;</span>: <span class="string">&quot;密碼和確認密碼必須相同&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果拋出的<strong>別種錯誤</strong>，比如 Django 的<code>ValidationError</code>，甚至是我們<strong>自己定義的錯誤</strong>，Django Ninja 還會自動處理嗎？</p><p>答案是：<strong>不會</strong>。</p><p>你會得到「<strong>500 Internal Server Error</strong>」——這將是我們下下篇的重點。</p><hr><h2 id="小結與下一步"><a href="#小結與下一步" class="headerlink" title="小結與下一步"></a>小結與下一步</h2><p>本文中，我們介紹了如何透過<code>@model_validator</code>來實現跨欄位驗證的需求，同時落實關注點分離原則。</p><p>學習完這兩篇以後，你對 <strong>Django Ninja 資料驗證</strong>的了解，已經超越大部分人。</p><p>接下來，我們將深入探討，當資料驗證失敗時，要如何優雅地處理錯誤——並回應，以提升 API 的使用體驗。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇我們講完了單一欄位的自定義驗證，這篇則要來討論&lt;strong&gt;跨欄位&lt;/strong&gt;之間的驗證。&lt;/p&gt;
&lt;p&gt;跨欄位驗證同樣是 API 開發中十分常見的需求，例如註冊帳號時，要保證「密碼」與「確認密碼」兩個欄位內容相同；選擇&lt;strong&gt;日期期間&lt;/strong&gt;時，開始日期不能晚於結束日期等。&lt;/p&gt;
&lt;p&gt;這些驗證場景&lt;strong&gt;無法&lt;/strong&gt;透過單一欄位驗證實現，因為它們需要同時檢查&lt;strong&gt;多個欄位之間的邏輯關聯&lt;/strong&gt;，來確保整體資料的&lt;strong&gt;一致性和正確性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文將介紹如何透過 Pydantic 來實現跨欄位驗證需求——以「確認密碼」為例，展示這個功能的實際應用。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼改動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/11&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;跨欄位驗證與關注點分離&quot;&gt;&lt;a href=&quot;#跨欄位驗證與關注點分離&quot; class=&quot;headerlink&quot; title=&quot;跨欄位驗證與關注點分離&quot;&gt;&lt;/a&gt;跨欄位驗證與關注點分離&lt;/h2&gt;&lt;p&gt;其實，無論是單一欄位還是跨欄位的自定義驗證，都&lt;strong&gt;不一定&lt;/strong&gt;要藉由 Pydantic 來完成。&lt;/p&gt;
&lt;p&gt;理論上，資料驗證可以&lt;strong&gt;直接&lt;/strong&gt;在 view 函式中進行，例如取出輸入的欄位值，手動驗證它的合法性。跨欄位驗證也是如此。&lt;/p&gt;
&lt;p&gt;然而，這是一種方便但「&lt;strong&gt;粗糙&lt;/strong&gt;」的做法——只適合用在驗證邏輯非常單純的情況。&lt;/p&gt;
&lt;p&gt;透過 Pydantic 進行資料驗證，則能夠帶來一個明顯的好處：&lt;strong&gt;關注點分離&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="Pydantic" scheme="https://blog.kyomind.tw/tags/Pydantic/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 19：資料驗證（上）單一欄位的自定義驗證</title>
    <link href="https://blog.kyomind.tw/django-ninja-19/"/>
    <id>https://blog.kyomind.tw/django-ninja-19/</id>
    <published>2024-10-01T02:31:53.000Z</published>
    <updated>2024-10-01T05:26:05.723Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p><strong>資料驗證</strong>是 API 開發中的關鍵需求之一，它負責確保從客戶端提交的資料是<strong>符合預期</strong>的，從而避免潛在的錯誤和安全問題。</p><p>有效的資料驗證可以在 API 接收到錯誤資料時，給出<strong>即時且友善</strong>的回應，提升系統的穩定性和<strong>使用者體驗</strong>。</p><p>Django Ninja 中，資料驗證的核心工具是 <strong>Pydantic</strong>。它提供了強大的驗證功能，不僅能對資料型別進行檢查，還能輕鬆實現<strong>自定義驗證</strong>。</p><p>本文將介紹如何在 Django Ninja 中使用 Pydantic 實作<strong>單一欄位的自定義驗證</strong>；下一篇則講述<strong>跨欄位的自定義驗證</strong>。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/10">這個 PR</a>。</p><hr><h2 id="第五章總論"><a href="#第五章總論" class="headerlink" title="第五章總論"></a>第五章總論</h2><p>資料驗證很重要，而驗證失敗時，程式往往會拋出<strong>驗證錯誤</strong>。如何有效處理這些錯誤，則是「<strong>錯誤處理</strong>」要討論的範疇。</p><p>本章將探討這兩個<strong>密切相關</strong>的主題，共計 4 篇文章：</p><ul><li>卷 19：資料驗證（上）單一欄位的自定義驗證（本文）</li><li>卷 20：資料驗證（下）跨欄位驗證</li><li>卷 21：錯誤處理（上）自定義錯誤與 HTTP 回應</li><li>卷 22：錯誤處理（下）全域錯誤處理——使用 Exception Handlers</li></ul><p>前兩篇，我們會學習如何實現靈活的資料驗證，以確保輸入資料符合預期，並在必要時拋出錯誤。</p><p>後兩篇，我們將討論如何處理 API 流程中可能出現的各種錯誤（不限於驗證錯誤），以提供更好的使用者體驗。</p><p>Django Ninja 的資料驗證與錯誤處理機制，相較 Django REST framework <strong>更加複雜</strong>，因此我們得用<strong>完整的篇幅</strong>來介紹，幫助你清楚地理解它們。</p><span id="more"></span><hr><h2 id="API-修正"><a href="#API-修正" class="headerlink" title="API 修正"></a>API 修正</h2><p>我們會以上一篇文章中新建立的 API——<strong>新增使用者</strong>——為例。</p><p>繼續改善它，加上自定義驗證，讓客戶端傳來的資料更可靠。</p><p>不過我要先做一些<strong>錯誤修正</strong>，修正後的程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params"><span class="string">&#x27;/users/&#x27;</span>, summary=<span class="string">&#x27;新增使用者&#x27;</span>, response=&#123;<span class="number">201</span>: <span class="built_in">dict</span>&#125;</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_user</span>(<span class="params">...</span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">dict</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    新增使用者</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    user = User(</span><br><span class="line">        username=payload.username,</span><br><span class="line">        email=payload.email,</span><br><span class="line">        bio=payload.bio,</span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 使用 set_password 方法加密密碼</span></span><br><span class="line">    user.set_password(raw_password=payload.password)</span><br><span class="line">    user.save()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">201</span>, &#123;<span class="string">&#x27;id&#x27;</span>: user.<span class="built_in">id</span>, <span class="string">&#x27;username&#x27;</span>: user.username&#125;</span><br></pre></td></tr></table></figure><p>主要改正了這兩處：</p><ol><li>在<code>router</code>裝飾器<strong>新增</strong>了<code>response=&#123;201: dict&#125;</code>參數。本來沒有定義，實際使用這個 API 時會出現錯誤。因為<strong>預設只有 200 回應</strong>，想要 200 以外的回應，要透過<code>response</code>參數聲明才行。</li><li>使用<code>set_password</code>方法對用戶輸入的密碼進行<strong>加密</strong>。這是 Django 內建的功能，防止密碼直接儲存在 db 中。密碼不能明文存儲，無疑是現代開發的 ABC。</li></ol><hr><p>修正結束，我們正式進入主題。</p><h2 id="不同「層次」的驗證"><a href="#不同「層次」的驗證" class="headerlink" title="不同「層次」的驗證"></a>不同「層次」的驗證</h2><p>既然是驗證，主要當然是跟來自客戶端的<strong>請求</strong>有關——<strong>驗證請求內容。</strong></p><p>Django Ninja 中，每個 API 可以透過定義 Schema，來<strong>描述 API 所接收的資料結構</strong>。這些 Schema 基於 Pydantic，能自動對請求中的資料進行驗證。</p><p>Schema 中的 type hints 可以驗證資料<strong>型別</strong>，這是最基本的驗證。</p><p>前一篇提到的 Pydantic Field，則可以對資料的長度、範圍等特性進行驗證。這部分在後面會示範。</p><p>這些都是偏「形式上」的驗證，而本文將聚焦於更複雜的「<strong>自定義驗證</strong>」——基於一定的<strong>規則</strong>。</p><h3 id="範例-API-的-Schema-現狀"><a href="#範例-API-的-Schema-現狀" class="headerlink" title="範例 API 的 Schema 現狀"></a>範例 API 的 Schema 現狀</h3><p>以「新增使用者」為例，request body 接收<code>username</code>、<code>email</code>、<code>password</code>和<code>bio</code>等欄位。透過我們定義的 Schema，能完成最基本的<strong>資料型別驗證</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    email: <span class="built_in">str</span></span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line">    bio: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>如上一篇所述，只有<code>bio</code>欄位是可選的，其餘則為必填——缺少就會得到 422 回應。所以 Schema 同時也驗證了資料的「<strong>存在性</strong>」。</p><p>目前看起來還不錯！但我們並不就此滿足。</p><hr><h2 id="新需求：密碼規則"><a href="#新需求：密碼規則" class="headerlink" title="新需求：密碼規則"></a>新需求：密碼規則</h2><p>我們要求使用者在設定密碼時，遵守以下兩個規則：</p><ol><li>密碼長度至少 8 個字元。</li><li>必須包含至少一個數字。</li></ol><p>這些規則有助於提高帳號的安全性，防止用戶設定過於簡單的密碼。</p><p>考慮到<strong>教學目的</strong>，我沒有讓規則過於複雜。這兩條規則都有其<strong>特定的教學意義</strong>：</p><ol><li>最小長度限制可以<strong>直接透過 Pydantic Field 實現</strong>，不必自行實作。</li><li>第二個規則是重頭戲，我們會使用 Pydantic 的<code>@field_validator</code>裝飾器，自行定義欄位的驗證規則。</li></ol><hr><h2 id="實作：密碼規則驗證"><a href="#實作：密碼規則驗證" class="headerlink" title="實作：密碼規則驗證"></a>實作：密碼規則驗證</h2><p>根據需求，我們可以先利用 Pydantic 的<code>Field</code>來設定<strong>最小長度限制</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password: <span class="built_in">str</span> = Field(min_length=<span class="number">8</span>, examples=[<span class="string">&#x27;password123&#x27;</span>])</span><br></pre></td></tr></table></figure><p>如上，我們只需要新增一個<code>min_length=8</code>參數即可。</p><p>至於「必須包含數字」的驗證，則要用<code>@field_validator</code>裝飾器來實作。</p><h3 id="field-validator-裝飾器"><a href="#field-validator-裝飾器" class="headerlink" title="field_validator 裝飾器"></a>field_validator 裝飾器</h3><p>在 Pydantic v1 中，這個裝飾器的名稱是<code>validator</code>，v2 才改為<code>field_validator</code>。</p><p>Pydantic 從 v1 到 v2，有<strong>許多</strong> <a href="https://en.wiktionary.org/wiki/breaking_change">breaking change</a>，比如之前提過的<code>example</code>參數變成<code>examples</code>，即是一例。這部分值得留意。</p><p>以下是修改後的 Schema，我們只關注<code>field_validator</code>部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @field_validator(<span class="params"><span class="string">&#x27;password&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_password_contains_number</span>(<span class="params">cls, v: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        驗證密碼至少包含一個數字</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">r&#x27;\d&#x27;</span>, v):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;密碼必須包含至少一個數字&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> v</span><br></pre></td></tr></table></figure><h3 id="重點解析"><a href="#重點解析" class="headerlink" title="重點解析"></a>重點解析</h3><ol><li><code>field_validator</code>裝飾器<strong>必須使用參數</strong>，合法值是<strong>欄位名稱</strong>，如<code>password</code>。</li><li>雖然範例中沒有演示，但它可以套用在<strong>多個欄位</strong>。<ol><li>寫法為<code>@field_validator(&#39;欄位1&#39;, &#39;欄位2&#39;, ...)</code>，你甚至可以直接寫成<code>@field_validator(&#39;*&#39;)</code>——套用到<strong>全部</strong>欄位。</li><li>但請注意，這些欄位會執行<strong>同一個驗證邏輯</strong>，所以它們理論上是<strong>邏輯類似</strong>的欄位。</li></ol></li><li><strong>驗證方法的名稱</strong>可以自訂，你想怎麼命名都行，只要自己好懂即可。<ol><li>因為 Pydantic 主要是看裝飾器上的欄位名稱。</li><li>這和 Django REST framework 的驗證方法是採用<code>validate_&lt;欄位名&gt;</code>的命名模式，有<strong>很大的不同</strong>。</li></ol></li><li>Pydantic 驗證方法的參數名稱命名慣例是<code>v</code>，而 Django REST framework 則是<code>value</code>。</li><li>慣例二：驗證方法在<strong>成功時會原封不動 return 輸入值</strong>；失敗時則會拋出錯誤。</li><li>Pydantic 的驗證方法是一個「<strong>類別方法</strong>」，所以第一個參數是<code>cls</code>。特別的是，你<strong>可以省略</strong><code>@classmethod</code>裝飾器，因為 Pydantic 已經在內部處理了。<ol><li>不過<a href="https://docs.pydantic.dev/latest/concepts/validators/#field-validators">官方文件</a>仍建議你使用<code>@classmethod</code>，我們從善如流。</li><li>如果有聲明<code>@classmethod</code>裝飾器，它的位置必須<strong>最靠近</strong>驗證方法。</li></ol></li></ol><p>想不到吧？短短幾行，竟然有這麼多<strong>看點</strong>！</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這一篇，我們學習了如何透過 Pydantic，對單一欄位進行資料驗證，實作了密碼強度檢查規則。</p><p>下一篇，我們要繼續這個主題，實現更複雜的<strong>跨欄位驗證</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;資料驗證&lt;/strong&gt;是 API 開發中的關鍵需求之一，它負責確保從客戶端提交的資料是&lt;strong&gt;符合預期&lt;/strong&gt;的，從而避免潛在的錯誤和安全問題。&lt;/p&gt;
&lt;p&gt;有效的資料驗證可以在 API 接收到錯誤資料時，給出&lt;strong&gt;即時且友善&lt;/strong&gt;的回應，提升系統的穩定性和&lt;strong&gt;使用者體驗&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Django Ninja 中，資料驗證的核心工具是 &lt;strong&gt;Pydantic&lt;/strong&gt;。它提供了強大的驗證功能，不僅能對資料型別進行檢查，還能輕鬆實現&lt;strong&gt;自定義驗證&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文將介紹如何在 Django Ninja 中使用 Pydantic 實作&lt;strong&gt;單一欄位的自定義驗證&lt;/strong&gt;；下一篇則講述&lt;strong&gt;跨欄位的自定義驗證&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/10&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;第五章總論&quot;&gt;&lt;a href=&quot;#第五章總論&quot; class=&quot;headerlink&quot; title=&quot;第五章總論&quot;&gt;&lt;/a&gt;第五章總論&lt;/h2&gt;&lt;p&gt;資料驗證很重要，而驗證失敗時，程式往往會拋出&lt;strong&gt;驗證錯誤&lt;/strong&gt;。如何有效處理這些錯誤，則是「&lt;strong&gt;錯誤處理&lt;/strong&gt;」要討論的範疇。&lt;/p&gt;
&lt;p&gt;本章將探討這兩個&lt;strong&gt;密切相關&lt;/strong&gt;的主題，共計 4 篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;卷 19：資料驗證（上）單一欄位的自定義驗證（本文）&lt;/li&gt;
&lt;li&gt;卷 20：資料驗證（下）跨欄位驗證&lt;/li&gt;
&lt;li&gt;卷 21：錯誤處理（上）自定義錯誤與 HTTP 回應&lt;/li&gt;
&lt;li&gt;卷 22：錯誤處理（下）全域錯誤處理——使用 Exception Handlers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前兩篇，我們會學習如何實現靈活的資料驗證，以確保輸入資料符合預期，並在必要時拋出錯誤。&lt;/p&gt;
&lt;p&gt;後兩篇，我們將討論如何處理 API 流程中可能出現的各種錯誤（不限於驗證錯誤），以提供更好的使用者體驗。&lt;/p&gt;
&lt;p&gt;Django Ninja 的資料驗證與錯誤處理機制，相較 Django REST framework &lt;strong&gt;更加複雜&lt;/strong&gt;，因此我們得用&lt;strong&gt;完整的篇幅&lt;/strong&gt;來介紹，幫助你清楚地理解它們。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="Pydantic" scheme="https://blog.kyomind.tw/tags/Pydantic/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 18：API 文件（下）用 Pydantic Field 設定範例與預設值</title>
    <link href="https://blog.kyomind.tw/django-ninja-18/"/>
    <id>https://blog.kyomind.tw/django-ninja-18/</id>
    <published>2024-09-30T01:42:11.000Z</published>
    <updated>2024-09-30T18:20:27.728Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>上一篇文章中，我們探討了 Django Ninja 影響 API 文件<strong>呈現</strong>的一些重要設定。它們是<strong>自動化 API 文件</strong>的基本功，不容忽視。</p><p>但這樣<strong>還不夠</strong>！我們想要讓這份文件更加<strong>生動</strong>，讀起來清晰易懂。</p><p>其中的關鍵在於 API 文件上的<strong>資料範例</strong>。好的範例讓人一讀就懂，能有效縮短理解和思考的時間。</p><p>本文將介紹如何運用 Pydantic 的<code>Field</code>設定，全方位提升 API 文件的清晰與可讀性。我們會探討如何為自動生成的文件加上<strong>栩栩如生的範例</strong>，讓文件<strong>更貼近真實</strong>。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/9">這個 PR</a>。</p><hr><h2 id="Pydantic-在-Django-Ninja-中的角色"><a href="#Pydantic-在-Django-Ninja-中的角色" class="headerlink" title="Pydantic 在 Django Ninja 中的角色"></a>Pydantic 在 Django Ninja 中的角色</h2><p>Pydantic 是一個實現<strong>資料驗證、序列化</strong>的套件，廣泛應用於 FastAPI 和 Django Ninja 等框架。</p><p>在 Django Ninja 中，Pydantic 被用來定義 Schema，這些 Schema 決定了 API 如何處理 HTTP 請求和回應中的資料，並自動轉換成<strong>符合 OpenAPI 標準的文件</strong>。</p><p>Pydantic 的強大之處在於，它不僅能驗證資料，還可以通過<code>Field</code>設定，為文件欄位<strong>提供額外的說明、範例和預設值</strong>。</p><p>這些細節設定會<strong>自動反映</strong>在轉換後的 API 文件中，幫助開發者更好地理解 API 的行為與內涵。</p><span id="more"></span><h2 id="Pydantic-Field"><a href="#Pydantic-Field" class="headerlink" title="Pydantic Field"></a>Pydantic Field</h2><p>Pydantic 的<code>Field</code>是一個強大的工具，可以用來為每個資料欄位提供更多細節資訊，如標題、描述、範例和預設值等。</p><p>這些設定不僅有助於數據驗證，也大大提升了 API 文件的可讀性。以下是一些常見的<code>Field</code>參數：</p><ul><li><code>title</code>：為欄位設定標題，幫助開發者快速理解該欄位的作用。</li><li><code>description</code>：提供欄位描述，讓人更清楚地了解這個欄位的用途與限制。</li><li><code>examples</code>：設定<strong>範例值</strong>，幫助開發者直觀理解 API 的輸入、輸出格式。</li><li><code>default</code>：<strong>第一位置參數</strong>，提供欄位的<strong>預設值</strong>。Input 未提供該欄位值時，將<strong>自動使用預設值</strong>。</li></ul><p>善用這些參數，可以產生高品質的 API 文件。</p><h2 id="程式與文件的平衡點"><a href="#程式與文件的平衡點" class="headerlink" title="程式與文件的平衡點"></a>程式與文件的平衡點</h2><p>不過！我們還是要稍稍向「現實」靠攏，如果每一個 API 都要你寫這麼多內容，可能會讓開發者感到<strong>負擔過重</strong>。</p><p>而且，使用大量參數，文件確實變好看了，但產生文件的程式碼不免會<strong>落落長</strong>！</p><p>我們要找到一個<strong>平衡點</strong>，既能提供足夠資訊，又不會讓程式變得過於冗長。</p><p>從這個角度考慮，我覺得其中<strong>最重要的兩個參數</strong>，是<code>default</code>和<code>examples</code>——尤其是<strong>後者</strong>！</p><p>所以本文會<strong>專注介紹這兩者</strong>，這樣不僅學習上更聚焦，也符合我的開發日常。</p><hr><h2 id="官方文件與原始碼"><a href="#官方文件與原始碼" class="headerlink" title="官方文件與原始碼"></a>官方文件與原始碼</h2><p>如果你想多了解 Pydantic Field 的參數與用法，那就要看 Pydantic 的<a href="https://docs.pydantic.dev/latest/concepts/fields/">官方文件</a>——而不是 Django Ninja。</p><p>Django Ninja 的文件中，並沒有專門的章節介紹<code>Field</code>的使用。這是因為<code>Field</code>實際上是 Pydantic 的功能，而不是 Django Ninja 特有的。</p><p>不過如果你真的去看這份文件，可能會發現，它對<code>Field</code>全部參數的解說，也不算是非常詳盡。</p><p>想要知道<strong>所有可用的參數</strong>，我覺得看<a href="https://github.com/pydantic/pydantic/blob/main/pydantic/fields.py">原始碼</a>是最快的。然後從<strong>函式簽名</strong>（對，<code>Field</code>是一個函式）的 type hints 去揣摩它的用法，也不失為一個好的方式。</p><hr><p>以下，我們開始講述如何使用 Pydantic Field 的<code>examples</code>和<code>default</code>參數，讓 API 文件更加生動且嚴謹。</p><h2 id="為-API-文件加入「範例」"><a href="#為-API-文件加入「範例」" class="headerlink" title="為 API 文件加入「範例」"></a>為 API 文件加入「範例」</h2><p>上一篇我們提到目前 API 文件的<strong>不足</strong>，其中「<strong>缺乏真實範例</strong>」這個問題還未解決：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-22T08:58:55.960Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-22T08:58:55.960Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>無論<code>0</code>或<code>&quot;string&quot;</code>，都稱不上是好的文件範例——它們都<strong>不夠真實</strong>。</p><p>現在，我們要為「取得單一文章資訊」的回應 Schema <strong>加上範例</strong>，程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_AuthorInfo</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> = Field(examples=[<span class="number">1</span>])</span><br><span class="line">    username: <span class="built_in">str</span> = Field(examples=[<span class="string">&#x27;Alice&#x27;</span>])</span><br><span class="line">    email: <span class="built_in">str</span> = Field(examples=[<span class="string">&#x27;alice@exapmple.com&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> = Field(examples=[<span class="number">1</span>])</span><br><span class="line">    title: <span class="built_in">str</span> = Field(examples=[<span class="string">&#x27;Ninja is awesome!&#x27;</span>])</span><br><span class="line">    content: <span class="built_in">str</span> = Field(examples=[<span class="string">&#x27;This is my first post.&#x27;</span>])</span><br><span class="line">    author: _AuthorInfo</span><br><span class="line">    created_at: datetime = Field(examples=[<span class="string">&#x27;2021-01-01T00:00:00Z&#x27;</span>])</span><br><span class="line">    updated_at: datetime = Field(examples=[<span class="string">&#x27;2021-01-01T00:00:00Z&#x27;</span>])</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>這裡有<strong>兩個重點</strong>。</p><h3 id="重點一：examples-參數"><a href="#重點一：examples-參數" class="headerlink" title="重點一：examples 參數"></a>重點一：examples 參數</h3><p>我只有使用<code>examples</code>參數，這樣最簡單，而且<strong>範例</strong>確實是文件中<strong>相當重要的一環</strong>。</p><p>此外，這個<code>examples</code>其實<strong>大有文章</strong>，如果你寫成<code>example</code>，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> = Field(example=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>實際上<strong>也能正常運作</strong>，但 Mypy 卻會提醒你：</p><blockquote><p>Unexpected keyword argument “example” for “Field”; did you mean “examples”?</p></blockquote><p>沒錯，因為現在的 Pydantic v2，<code>Field</code><strong>只有</strong><code>examples</code>這個參數。<code>example</code>應該是 Pydantic v1 的做法，而 Django Ninja 還<strong>保持了對二者的相容</strong>。</p><p>考慮到未來，建議還是使用<code>examples</code>，不僅可以避免 Mypy 的警告，而且與最新版本的 Pydantic 保持一致。</p><h3 id="重點二：巢狀-Schema-的範例"><a href="#重點二：巢狀-Schema-的範例" class="headerlink" title="重點二：巢狀 Schema 的範例"></a>重點二：巢狀 Schema 的範例</h3><p>巢狀 Schema 的範例，只要在<strong>底層</strong> Schema 加上<code>Field</code>即可。引用層不必聲明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_AuthorInfo</span>(<span class="title class_ inherited__">Schema</span>):  <span class="comment"># 這是巢狀底層，要寫 Field</span></span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> = Field(examples=[<span class="number">1</span>])</span><br><span class="line">    username: <span class="built_in">str</span> = Field(examples=[<span class="string">&#x27;Alice&#x27;</span>])</span><br><span class="line">    email: <span class="built_in">str</span> = Field(examples=[<span class="string">&#x27;alice@exapmple.com&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line">    author: _AuthorInfo  <span class="comment"># 無須再寫 Field</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="實際效果"><a href="#實際效果" class="headerlink" title="實際效果"></a>實際效果</h3><p>看一下實際的 API 文件回應，我直接截取頁面中的 JSON 值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Ninja is awesome!&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is my first post.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alice@exapmple.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-01-01T00:00:00Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-01-01T00:00:00Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>是不是比之前更生動、好讀呢？</p><hr><h2 id="default-參數的正確使用時機"><a href="#default-參數的正確使用時機" class="headerlink" title="default 參數的正確使用時機"></a>default 參數的正確使用時機</h2><p>在我看來，大部分的時候，我們<strong>並不需要</strong>定義預設值。</p><p>我建議你也<strong>不要</strong>這樣寫：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>雖然文件上一樣也會顯示範例值為 1，但其實這個寫法與下面這個寫法<strong>等價</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> = Field(default=<span class="number">1</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>這實際上是在定義預設值</strong>。如前所述，如果 Schema 用在 HTTP 請求，且客戶端未提供該欄位的值時，Django Ninja 將<strong>自動使用</strong>預設值。</p><p>這很可能會造成<strong>出乎意料</strong>的結果。</p><p>正確的流程是：前端沒有提供值的時候，Django Ninja 應該要給出 422 回應。</p><p>所以你根本不需要（也不應該）定義預設值——<strong>除了下列情況</strong>。</p><h3 id="在可選欄位使用預設值-None"><a href="#在可選欄位使用預設值-None" class="headerlink" title="在可選欄位使用預設值 None"></a>在可選欄位使用預設值 None</h3><p>我個人推薦，只在請求欄位為「<strong>可選（optional）</strong>」時，使用<code>default</code>參數。</p><p>而且此時的預設值<strong>應為</strong><code>None</code>。</p><p>為了示範，我們建立一個<strong>新 API</strong>——「<strong>新增使用者</strong>」（也就是<strong>用戶註冊</strong>）。這個 API 在後續教學中，還會被反覆提及與改進。</p><p>還記得我們的<code>User</code>模型中，<code>bio</code>欄位是可選的嗎？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">AbstractUser</span>):</span><br><span class="line">    email = models.EmailField(unique=<span class="literal">True</span>)  <span class="comment"># 強制唯一的 email</span></span><br><span class="line">    bio = models.TextField(null=<span class="literal">True</span>)  <span class="comment"># 個人簡介欄位（可選）</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>所以，我們的 API 請求 Schema 如下——直接看<code>bio</code>欄位設定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateUserRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line">    bio: <span class="built_in">str</span> | <span class="literal">None</span> = Field(</span><br><span class="line">        default=<span class="literal">None</span>,</span><br><span class="line">        examples=[<span class="string">&#x27;Hello, I am Alice.&#x27;</span>]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>Field 中的<code>default=None</code>設定讓你在客戶端沒有填入值時，API 也不會出錯。</p><p>另外留意<code>bio: str | None</code>這個 type hint，千萬不要少了<code>None</code>，會影響文件的渲染結果：（這是有<code>None</code>的結果）</p><p><img src="https://i.imgur.com/PMIJ05r.png"></p><p>有<code>None</code>，API 文件才會顯示欄位值為<strong>可選（string | null）。</strong></p><hr><h2 id="小結與下一步"><a href="#小結與下一步" class="headerlink" title="小結與下一步"></a>小結與下一步</h2><p>經過本章的學習與改進，我們的 API 文件已經達到 <strong>80 分水準</strong>！在大多數開發專案中，這樣的文件品質可以說相當出色了。</p><p>接下來我們要進入<strong>第五章</strong>——<strong>資料驗證</strong>與<strong>錯誤處理</strong>。</p><p>這個章節將涵蓋如何在 Django Ninja 中實現有效的資料驗證，以及如何優雅地處理和回應各種可能的錯誤情況。</p><p>通過這些技巧，我們將能夠建立更穩健、可靠的 API。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇文章中，我們探討了 Django Ninja 影響 API 文件&lt;strong&gt;呈現&lt;/strong&gt;的一些重要設定。它們是&lt;strong&gt;自動化 API 文件&lt;/strong&gt;的基本功，不容忽視。&lt;/p&gt;
&lt;p&gt;但這樣&lt;strong&gt;還不夠&lt;/strong&gt;！我們想要讓這份文件更加&lt;strong&gt;生動&lt;/strong&gt;，讀起來清晰易懂。&lt;/p&gt;
&lt;p&gt;其中的關鍵在於 API 文件上的&lt;strong&gt;資料範例&lt;/strong&gt;。好的範例讓人一讀就懂，能有效縮短理解和思考的時間。&lt;/p&gt;
&lt;p&gt;本文將介紹如何運用 Pydantic 的&lt;code&gt;Field&lt;/code&gt;設定，全方位提升 API 文件的清晰與可讀性。我們會探討如何為自動生成的文件加上&lt;strong&gt;栩栩如生的範例&lt;/strong&gt;，讓文件&lt;strong&gt;更貼近真實&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/9&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Pydantic-在-Django-Ninja-中的角色&quot;&gt;&lt;a href=&quot;#Pydantic-在-Django-Ninja-中的角色&quot; class=&quot;headerlink&quot; title=&quot;Pydantic 在 Django Ninja 中的角色&quot;&gt;&lt;/a&gt;Pydantic 在 Django Ninja 中的角色&lt;/h2&gt;&lt;p&gt;Pydantic 是一個實現&lt;strong&gt;資料驗證、序列化&lt;/strong&gt;的套件，廣泛應用於 FastAPI 和 Django Ninja 等框架。&lt;/p&gt;
&lt;p&gt;在 Django Ninja 中，Pydantic 被用來定義 Schema，這些 Schema 決定了 API 如何處理 HTTP 請求和回應中的資料，並自動轉換成&lt;strong&gt;符合 OpenAPI 標準的文件&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Pydantic 的強大之處在於，它不僅能驗證資料，還可以通過&lt;code&gt;Field&lt;/code&gt;設定，為文件欄位&lt;strong&gt;提供額外的說明、範例和預設值&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這些細節設定會&lt;strong&gt;自動反映&lt;/strong&gt;在轉換後的 API 文件中，幫助開發者更好地理解 API 的行為與內涵。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="Pydantic" scheme="https://blog.kyomind.tw/tags/Pydantic/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 17：API 文件（上）Django Ninja 文件實踐指南</title>
    <link href="https://blog.kyomind.tw/django-ninja-17/"/>
    <id>https://blog.kyomind.tw/django-ninja-17/</id>
    <published>2024-09-29T06:19:38.000Z</published>
    <updated>2024-09-29T09:27:25.867Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>「<strong>依程式碼自動產生 API 文件</strong>」是 Django Ninja 的一大賣點。</p><p>事實上，<strong>API 文件的自動化</strong>，正是我在工作上的專案從 Django REST framework 轉向 Django Ninja 的<strong>首要考量</strong>——也是我開始學習 Django Ninja 的契機。</p><p>Django Ninja 省去了大量<strong>人工撰寫</strong>（我們用 <a href="https://apiblueprint.org/">API Blueprint</a>）API 文件的時間，特別是在 API 規格變動時，<strong>不需要再同步修改文件</strong>，大大減少了維護文件的心力。</p><p>可見這個特性有多麼重要。</p><h3 id="教學順序的考量"><a href="#教學順序的考量" class="headerlink" title="教學順序的考量"></a>教學順序的考量</h3><p>那麼，為何我到了系列的第 17 篇文章——也就是本篇，才開始介紹 Django Ninja 的 API 文件功能呢？</p><p>原因在於，要產生優秀的 API 文件，<strong>需要你對 Schema 的使用有一定的了解</strong>。所以我不得不放在第三章之後。</p><p>現在，我們要開始探討如何使用 Django Ninja 產出高品質的 API 文件。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/8">這個 PR</a>。</p><span id="more"></span><hr><h2 id="Documentation-as-Code"><a href="#Documentation-as-Code" class="headerlink" title="Documentation as Code"></a>Documentation as Code</h2><p>現代軟體開發中，「<a href="https://swimm.io/learn/code-documentation/documentation-as-code-why-you-need-it-and-how-to-get-started">Documentation as Code</a>」（DoC） 是一個逐漸被認可的理念。</p><p>DoC 是指<strong>將文件與程式碼緊密結合</strong>，開發人員<strong>使用「與軟體程式碼開發相同的流程和工具」來建立和維護文件</strong>。</p><p>文件<strong>隨著程式碼的變更而自動更新</strong>，兩者<strong>無時無刻都保持著一致性</strong>。</p><p>這不僅提升了開發效率，還減少了<strong>因文件過時而導致的溝通不順暢或誤解</strong>。</p><p>Django Ninja 的自動化產生文件功能無疑是「Documentation as Code」精神的實踐。</p><p>我們可以透過撰寫 API 路由、view 函式、Schema 等<strong>程式碼</strong>，自動產生符合 <a href="https://www.openapis.org/">OpenAPI</a> 標準的文件，當程式碼變更時，這些文件<strong>也會自動反映變更結果</strong>，無需手動維護。</p><h3 id="Django-Ninja-自動化-API-文件的兩大重點"><a href="#Django-Ninja-自動化-API-文件的兩大重點" class="headerlink" title="Django Ninja 自動化 API 文件的兩大重點"></a>Django Ninja 自動化 API 文件的兩大重點</h3><p>在 Django Ninja 中，要產生高品質的 API 文件，主要涉及<strong>兩個重點</strong>：</p><ol><li><strong>Django Ninja 設定</strong>：Django Ninja 內建了好一些控制 API 文件細節的設定，這是本文的重點。</li><li><strong>Pydantic 設定</strong>：這是下一篇要探討的內容，講述如何有效定義 Schema，讓各種細節自動呈現在 API 文件中。</li></ol><p>看到這裡，是不是有點小期待呢？☺️</p><hr><h2 id="專案-API-文件現況"><a href="#專案-API-文件現況" class="headerlink" title="專案 API 文件現況"></a>專案 API 文件現況</h2><p>在開始大刀闊斧地加強文件品質之前，我們先來看看目前 API 文件有多麼「陽春」。</p><p>啟動 Django 伺服器後，造訪下列網址可以查看當前 API 的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8000/docs</span><br></pre></td></tr></table></figure><p>目前的文件內容如下：</p><p><img src="https://i.imgur.com/jMSkDMj.png"></p><p>我們從「<strong>對開發人員是否有用、好讀</strong>」的角度進行簡要分析。</p><h3 id="問題解析"><a href="#問題解析" class="headerlink" title="問題解析"></a>問題解析</h3><p>首先，它<strong>沒有分組</strong>！</p><p>Django user app 和 post app 的 API 都<strong>混在一起</strong>了，當 API 愈來愈多，就會顯得十分雜亂。這是<strong>最優先要解決</strong>的問題。</p><p>其次，API 的說明如「Get Users」、「Create Post」等，顯然都是從 view 函式名稱自動轉換而來。資訊有限，且不夠口語、不夠詳細，簡單講就是不夠「<strong>讀者友善</strong>」。</p><p>我們點進唯一的 POST API 看一下內容：</p><p><img src="https://i.imgur.com/NCitdKc.png"></p><p>內頁的說明有「新增文章」，這其實是<strong>從 view 函式的 docstring 獲取</strong>的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_post</span>(<span class="params">...</span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">dict</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    新增文章</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>再看一下 HTTP 請求 body 的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;title&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="string">&quot;content&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="string">&quot;user_id&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只能說<strong>不盡理想</strong>，像<code>&quot;string&quot;</code>這樣的例子，只有表現出「型別」，沒有模擬<strong>真實世界</strong>的文章標題或內容。</p><hr><p>上述問題正是我們需要改善 API 文件的重點。</p><p>其中，請求 body 範例與 Schema 設定有關，是下一篇的重心。</p><p>本文先聚焦於 <strong>Django Ninja 設定</strong>——讓我們一一介紹。</p><h2 id="一、使用-Tags-為-API-分組"><a href="#一、使用-Tags-為-API-分組" class="headerlink" title="一、使用 Tags 為 API 分組"></a>一、使用 Tags 為 API 分組</h2><p>我們第一個要解決的是 API 的<strong>分組</strong>（分類）問題。</p><p>為了讓文件結構更清晰，Django Ninja 支援使用 <a href="https://django-ninja.dev/guides/routers/#router-tags">Tags</a> 來對 API 進行分組。不僅有助於組織文件，還能讓開發者或使用者更快地找到所需的 API。</p><p>Tags 分組可以在<strong>兩個地方</strong>進行設定。</p><h3 id="一級路由分組"><a href="#一級路由分組" class="headerlink" title="一級路由分組"></a>一級路由分組</h3><p>最常見的做法，是在<strong>一級路由</strong>進行設定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NinjaForum/арі.py</span></span><br><span class="line">api.add_router(prefix=<span class="string">&#x27;&#x27;</span>, router=<span class="string">&#x27;user.api.router&#x27;</span>, tags=[<span class="string">&#x27;User&#x27;</span>])</span><br><span class="line">api.add_router(prefix=<span class="string">&#x27;&#x27;</span>, router=<span class="string">&#x27;post.api.router&#x27;</span>, tags=[<span class="string">&#x27;Post&#x27;</span>])</span><br></pre></td></tr></table></figure><p>因為同一個 Django app 的 API，通常就是在同一組。</p><h3 id="路由裝飾器分組"><a href="#路由裝飾器分組" class="headerlink" title="路由裝飾器分組"></a>路由裝飾器分組</h3><p>也可以在<strong>路由裝飾器</strong>設定分組，但我認為這屬於相對「<strong>例外</strong>」的情況，主要用於：</p><ol><li>全專案只有一個 Django app。</li><li>同一個 Django app 需要不同的分組。</li></ol><p>比如下面範例中，沒有區分 Django app，但仍有分組需求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> NinjaAPI</span><br><span class="line"></span><br><span class="line">api = NinjaAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.get(<span class="params"><span class="string">&quot;/users/&quot;</span>, tags=[<span class="string">&quot;User&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_users</span>(<span class="params">request</span>):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">@api.post(<span class="params"><span class="string">&quot;/posts/&quot;</span>, tags=[<span class="string">&quot;Post&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_post</span>(<span class="params">request, title: <span class="built_in">str</span></span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>大部分情況，我推薦在一級路由進行分組就好。</p><p>不然像上面的例子那樣，一個一個標記，實踐起來有點繁瑣。</p><hr><h2 id="二、路由裝飾器的文件設定"><a href="#二、路由裝飾器的文件設定" class="headerlink" title="二、路由裝飾器的文件設定"></a>二、路由裝飾器的文件設定</h2><p>Django Ninja 的<strong>路由裝飾器</strong>不僅可以設定基本的 API 路徑，還允許你加上 <strong>API 的描述文字</strong>，這些內容會直接反映在生成的 API 文件中。</p><p>透過這些設定，你可以為 API 的參數、回應、甚至意圖加上說明，讓文件更全面。</p><p>透過<code>description</code>和<code>summary</code>參數，能為各 API 路由提供說明。不過<code>description</code>會取代上述「docstring 轉 API 說明」的效果，所以我平常都只寫<code>summary</code>。</p><p><strong>畢竟我們寫 Python，docstring 可是必須的！</strong></p><p>程式碼如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">..., summary=<span class="string">&#x27;取得文章列表&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params">...</span>) -&gt; QuerySet[Post]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取得文章列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>到目前為止的實際改善效果：（分組、API 說明）</p><p><img src="https://i.imgur.com/WRv4MGd.png"></p><p>非常不錯唷！</p><hr><h2 id="三、NinjaAPI-設定"><a href="#三、NinjaAPI-設定" class="headerlink" title="三、NinjaAPI 設定"></a>三、NinjaAPI 設定</h2><p>你可以通過<code>NinjaAPI</code>類別的<strong>初始化</strong>設定，來客製一些<strong>全域</strong>的 API 文件細節。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NinjaForum/арі.py</span></span><br><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> NinjaAPI</span><br><span class="line"></span><br><span class="line">api = NinjaAPI(</span><br><span class="line">    title=<span class="string">&quot;忍者論壇 API&quot;</span>,</span><br><span class="line">    version=<span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;這是忍者論壇的 API 文件，供讀者參考&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>對應的實際效果：</p><p><img src="https://i.imgur.com/oLgmQkM.png"></p><p><code>NinjaAPI</code>的初始化設定<strong>非常多樣</strong>——有些可能是你需要的。</p><p>這裡只是簡單例示，更多設定細節，可查看<a href="https://django-ninja.dev/reference/api/">文件</a>。</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>本文探討了 Django Ninja 自動生成 API 文件的常見設定，讓「Documentation as Code」精神得以實現——程式碼與文件能輕鬆保持一致，減少了手動維護的麻煩。</p><p>然而，API 文件的品質，還取決於我們如何定義 Schema 中的細節。</p><p>接下來，我們將深入探討這個議題，說明如何透過 Pydantic 的<code>Field</code>參數設定，提供<strong>高品質的文件範例</strong>，進一步提升 API 文件的可讀性和清晰度。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;「&lt;strong&gt;依程式碼自動產生 API 文件&lt;/strong&gt;」是 Django Ninja 的一大賣點。&lt;/p&gt;
&lt;p&gt;事實上，&lt;strong&gt;API 文件的自動化&lt;/strong&gt;，正是我在工作上的專案從 Django REST framework 轉向 Django Ninja 的&lt;strong&gt;首要考量&lt;/strong&gt;——也是我開始學習 Django Ninja 的契機。&lt;/p&gt;
&lt;p&gt;Django Ninja 省去了大量&lt;strong&gt;人工撰寫&lt;/strong&gt;（我們用 &lt;a href=&quot;https://apiblueprint.org/&quot;&gt;API Blueprint&lt;/a&gt;）API 文件的時間，特別是在 API 規格變動時，&lt;strong&gt;不需要再同步修改文件&lt;/strong&gt;，大大減少了維護文件的心力。&lt;/p&gt;
&lt;p&gt;可見這個特性有多麼重要。&lt;/p&gt;
&lt;h3 id=&quot;教學順序的考量&quot;&gt;&lt;a href=&quot;#教學順序的考量&quot; class=&quot;headerlink&quot; title=&quot;教學順序的考量&quot;&gt;&lt;/a&gt;教學順序的考量&lt;/h3&gt;&lt;p&gt;那麼，為何我到了系列的第 17 篇文章——也就是本篇，才開始介紹 Django Ninja 的 API 文件功能呢？&lt;/p&gt;
&lt;p&gt;原因在於，要產生優秀的 API 文件，&lt;strong&gt;需要你對 Schema 的使用有一定的了解&lt;/strong&gt;。所以我不得不放在第三章之後。&lt;/p&gt;
&lt;p&gt;現在，我們要開始探討如何使用 Django Ninja 產出高品質的 API 文件。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/8&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 16：回應（四）Resolver 方法——欄位資料格式化</title>
    <link href="https://blog.kyomind.tw/django-ninja-16/"/>
    <id>https://blog.kyomind.tw/django-ninja-16/</id>
    <published>2024-09-28T03:53:48.000Z</published>
    <updated>2024-09-28T18:41:54.367Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>上一篇提到，API 回應常常是對 Django Model 物件內容的篩選與加工——然後 JSON 序列化。</p><p>其中「<strong>加工</strong>」部分，用更專業的說法，大概是「<strong>資料格式化</strong>」——依照一定的規則，對輸出資料進行<strong>某種轉換或重新組織</strong>，以符合<strong>特定的輸出格式</strong>。</p><p>資料格式化的種類很多，例如：</p><ol><li><strong>時間格式轉換</strong>：將資料庫中的時間戳（timestamp），轉換為更易讀的格式。</li><li><strong>數值轉換</strong>：將數字轉換為貨幣格式，或將小數點位數進行四捨五入。</li><li><strong>字串處理</strong>：截斷過長的文字、加上統一的前綴等。</li></ol><p>不論原因為何，絕大部分時候都是為了資料的「<strong>可讀性</strong>」，或符合特定業務規則。</p><p>可想而知，像資料格式化這樣的需求，不僅實務上重要，在 API 開發中也十分常見，值得我們用一整篇文章，細細探討。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/7">這個 PR</a>。</p><hr><h2 id="場景與需求"><a href="#場景與需求" class="headerlink" title="場景與需求"></a>場景與需求</h2><p>再次回到「取得單一文章資訊」API，這是目前的回傳格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1:8000/posts/2/</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1 content&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alice@example.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我們決定<strong>簡化</strong>回應的時間字串，改採「<code>&quot;2024-09-12T02:28:16Z&quot;</code>」格式。</p><p>和舊版相比，只是少了「<code>.801</code>」這個小數部分而已，且依舊符合 <a href="https://zh.wikipedia.org/zh-tw/ISO_8601">ISO 8601</a> 標準。</p><p>總之，回應中<code>created_at</code>和<code>updated_at</code>兩個欄位的內容，需要進行<strong>格式上的轉換</strong>。即上述提到的「<strong>資料格式化</strong>」。</p><span id="more"></span><hr><h2 id="Django-REST-Framework-做法"><a href="#Django-REST-Framework-做法" class="headerlink" title="Django REST Framework 做法"></a>Django REST Framework 做法</h2><p>首先，我們還是不免俗地先介紹 Django REST Framework（<strong>以下簡稱 DRF</strong>）的做法，方便你<strong>對比兩者的差異</strong>——你會發現<strong>其實大同小異</strong>。</p><p>在 DRF 中，我們可以透過<code>SerializerMethodField</code>實現時間格式的轉換。以下是透過 DRF 實現的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">...</span><br><span class="line">    created_at = serializers.SerializerMethodField()</span><br><span class="line">    updated_at = serializers.SerializerMethodField()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_created_at</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> obj.created_at.strftime(<span class="string">&#x27;%Y-%m-%dT%H:%M:%SZ&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_updated_at</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> obj.updated_at.strftime(<span class="string">&#x27;%Y-%m-%dT%H:%M:%SZ&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其中的重點有三：</p><ol><li>要格式化的欄位，值必須是<code>SerializerMethodField</code>。</li><li>在序列化器類別中，定義相同欄位名稱的<strong>實例方法</strong>（有第一位置參數<code>self</code>），且命名時要加上<code>get_</code>前綴，比如<code>get_created_at</code>。</li><li><code>obj</code>參數指的是<strong>當前被序列化的物件</strong>。本例中，我們<strong>預期</strong>引數是一個<code>Post</code>模型實例。這個方法<strong>將在序列化過程中會被自動調用</strong>，將原始的 datetime 物件轉換為指定的字串格式。</li></ol><p>附帶一提，在 DRF 序列化器的各種實例方法中，<code>obj</code>這個參數名稱可以稱得上是一個<strong>命名慣例</strong>。</p><hr><h2 id="Django-Ninja-的欄位資料格式化"><a href="#Django-Ninja-的欄位資料格式化" class="headerlink" title="Django Ninja 的欄位資料格式化"></a>Django Ninja 的欄位資料格式化</h2><p>看完 DRF，我們來看看 Django Ninja 怎麼做。</p><p>透過 Django Ninja 的 <a href="https://django-ninja.dev/guides/response/#resolvers">Resolver</a> 方法，我們也能輕鬆處理這類需求。</p><h3 id="Django-Ninja-的-Resolver-方法"><a href="#Django-Ninja-的-Resolver-方法" class="headerlink" title="Django Ninja 的 Resolver 方法"></a>Django Ninja 的 Resolver 方法</h3><p>在 Django Ninja 中，我們用 <strong>Resolver 方法</strong>來實現同樣的功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line">    created_at: datetime</span><br><span class="line">    updated_at: datetime</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resolve_created_at</span>(<span class="params">obj: Post</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> obj.created_at.strftime(<span class="string">&#x27;%Y-%m-%dT%H:%M:%SZ&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resolve_updated_at</span>(<span class="params">self, obj: Post</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> obj.updated_at.strftime(<span class="string">&#x27;%Y-%m-%dT%H:%M:%SZ&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>方法的命名</strong>，相較於 DRF 用的是<code>get_</code>前綴，Django Ninja 則是採<code>resolve_</code>前綴。</p><p>此外，你沒有看錯，這裡使用了<strong>兩種寫法</strong>：</p><ul><li><code>resolve_created_at</code> 是一個「<strong>靜態方法</strong>（static method）」，需要使用<code>@staticmethod</code>裝飾器，且沒有<code>self</code>參數。</li><li><code>resolve_updated_at</code> 是一個典型的<strong>實例方法</strong>，有<code>self</code>參數。</li></ul><p>因為文件的範例中，確實存在這兩種寫法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TaskSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    ...</span><br><span class="line">    owner: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span></span><br><span class="line">    lower_title: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resolve_owner</span>(<span class="params">obj</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> obj.owner:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;obj.owner.first_name&#125;</span> <span class="subst">&#123;obj.owner.last_name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resolve_lower_title</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> self.title.lower()</span><br></pre></td></tr></table></figure><h3 id="實例方法版本未實裝"><a href="#實例方法版本未實裝" class="headerlink" title="實例方法版本未實裝"></a>實例方法版本未實裝</h3><p>但是！現階段，你只要知道「靜態方法」版本即可。</p><p>因為採第二種寫法，你將會得到下列<strong>錯誤訊息</strong>：</p><blockquote><p>Error extracting attribute: NotImplementedError: <strong>Non static resolves are not supported yet</strong> [type&#x3D;get_attribute_error, input_value&#x3D;&lt;DjangoGetter: &lt;Post: Ali…’s Django Ninja Post 1&gt;&gt;, input_type&#x3D;DjangoGetter]</p></blockquote><p>什麼？還沒有實作！</p><p>我只好乖乖都改成靜態方法。</p><h3 id="回傳結果"><a href="#回傳結果" class="headerlink" title="回傳結果"></a>回傳結果</h3><p>最後看一下效果如何：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1:8000/posts/2/</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1 content&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alice@example.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>非常好！</p><hr><h2 id="使用-Alias-攤平欄位資訊"><a href="#使用-Alias-攤平欄位資訊" class="headerlink" title="使用 Alias 攤平欄位資訊"></a>使用 Alias 攤平欄位資訊</h2><p>另一個常見的格式化需求，是我們之前提過的「<strong>攤平</strong>」（flatten）複雜資料結構。</p><p>這是一種對資料的「<strong>重組</strong>」，而<strong>結構重組</strong>同樣屬於本文所探討的<strong>資料格式化</strong>範疇。</p><p>還記得在第 14 篇，我們透過<code>@property</code>產生「取得文章列表」回應中<code>author_name</code>欄位內容嗎？——這是對<code>User</code>模型的攤平，直接獲取其<code>username</code>欄位資訊。</p><p>這裡我們換一個<strong>更優雅</strong>的做法——<a href="https://django-ninja.dev/guides/response/#aliases">alias</a>。</p><h3 id="使用-Alias"><a href="#使用-Alias" class="headerlink" title="使用 Alias"></a>使用 Alias</h3><p>Django Ninja（幾乎是從 Pydantic 照搬來的）提供了<code>Field</code>與<code>alias</code>參數來實現這一功能。</p><p>有關<code>Field</code>，在〈卷 18：用 Pydantic Field 設定範例與預設值〉將會有更多著墨。</p><p>我們先來看看如何使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostListResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    author_name: <span class="built_in">str</span> = Field(alias=<span class="string">&#x27;author.username&#x27;</span>)</span><br></pre></td></tr></table></figure><p>注意，原先<code>Post</code>模型的<code>@property</code>方法要拿掉，或至少<strong>不能</strong>和<code>author_name</code><strong>撞名</strong>，否則會出錯唷！</p><p>我選擇了移除<code>@property</code>方法，直接改用這個新做法。</p><h3 id="重點解析"><a href="#重點解析" class="headerlink" title="重點解析"></a>重點解析</h3><p>透過<code>alias=author.username</code>取得<code>Post</code>的<strong>關聯模型</strong>——<code>User</code>的<code>username</code>屬性值。實現了<strong>巢狀資料的攤平</strong>。</p><p>這種設計，顯然是向 DRF 的<strong>優秀借鑑</strong>，相當於 DRF 中的 <code>source=author.username</code>寫法。</p><p>雖然<strong>有點抽象</strong>，卻非常優雅。</p><p><code>alias</code>的用途不限於資料攤平（這反而是比較進階的用法），其它細節，如欄位名稱替換等，可直接參考 <a href="https://docs.pydantic.dev/latest/concepts/alias/">Pydantic 文件</a>。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>Django Ninja 的 Resolver 方法允許我們對 API 回應中的欄位資料進行<strong>動態處理</strong>，滿足各種格式轉換與自定義需求。</p><p>在處理像<code>created_at</code>和<code>updated_at</code>這樣的時間欄位時，Resolver 方法不僅簡單易用，還能保證程式碼的結構清晰。</p><p><code>Field</code>與<code>alias</code>參數則更優雅地實現了另一種常見的資料格式化——「攤平」。不僅簡化了 API 回應，且無需修改背後的 Django 模型。</p><p>透過這些方式，我們能更靈活地控制 API 的輸出，以符合客戶端需求。</p><h2 id="下一章預告"><a href="#下一章預告" class="headerlink" title="下一章預告"></a>下一章預告</h2><p>完成了對「<strong>Django Ninja 處理 HTTP 回應</strong>」共 4 篇的學習，第三章也正式告一段落。接下來，我們要將目光轉向 API 開發中的<strong>另一個重要主題——文件</strong>！</p><p>隨著專案規模的增長，<strong>清晰的 API 文件</strong>對於任何需要使用 API 的人員都<strong>至關重要</strong>——包括後端開發者<strong>自己</strong>！</p><p>一份好的 API 文件能夠<strong>大幅降低溝通成本，提高開發效率、減少錯誤</strong>。它不僅是一種技術文書，更是<strong>團隊協作的重要樞紐</strong>。</p><p>第四章，我們會探討如何有效地透過 Django Ninja 程式碼，產生高品質的 API 文件，從而提升整體的開發體驗。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇提到，API 回應常常是對 Django Model 物件內容的篩選與加工——然後 JSON 序列化。&lt;/p&gt;
&lt;p&gt;其中「&lt;strong&gt;加工&lt;/strong&gt;」部分，用更專業的說法，大概是「&lt;strong&gt;資料格式化&lt;/strong&gt;」——依照一定的規則，對輸出資料進行&lt;strong&gt;某種轉換或重新組織&lt;/strong&gt;，以符合&lt;strong&gt;特定的輸出格式&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;資料格式化的種類很多，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;時間格式轉換&lt;/strong&gt;：將資料庫中的時間戳（timestamp），轉換為更易讀的格式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;數值轉換&lt;/strong&gt;：將數字轉換為貨幣格式，或將小數點位數進行四捨五入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字串處理&lt;/strong&gt;：截斷過長的文字、加上統一的前綴等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不論原因為何，絕大部分時候都是為了資料的「&lt;strong&gt;可讀性&lt;/strong&gt;」，或符合特定業務規則。&lt;/p&gt;
&lt;p&gt;可想而知，像資料格式化這樣的需求，不僅實務上重要，在 API 開發中也十分常見，值得我們用一整篇文章，細細探討。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/7&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;場景與需求&quot;&gt;&lt;a href=&quot;#場景與需求&quot; class=&quot;headerlink&quot; title=&quot;場景與需求&quot;&gt;&lt;/a&gt;場景與需求&lt;/h2&gt;&lt;p&gt;再次回到「取得單一文章資訊」API，這是目前的回傳格式：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// http://127.0.0.1:8000/posts/2/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Alice&amp;#x27;s Django Ninja Post 1&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Alice&amp;#x27;s Django Ninja Post 1 content&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;Alice&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;alice@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;2024-09-12T02:28:16.801Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;2024-09-12T02:28:16.801Z&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我們決定&lt;strong&gt;簡化&lt;/strong&gt;回應的時間字串，改採「&lt;code&gt;&amp;quot;2024-09-12T02:28:16Z&amp;quot;&lt;/code&gt;」格式。&lt;/p&gt;
&lt;p&gt;和舊版相比，只是少了「&lt;code&gt;.801&lt;/code&gt;」這個小數部分而已，且依舊符合 &lt;a href=&quot;https://zh.wikipedia.org/zh-tw/ISO_8601&quot;&gt;ISO 8601&lt;/a&gt; 標準。&lt;/p&gt;
&lt;p&gt;總之，回應中&lt;code&gt;created_at&lt;/code&gt;和&lt;code&gt;updated_at&lt;/code&gt;兩個欄位的內容，需要進行&lt;strong&gt;格式上的轉換&lt;/strong&gt;。即上述提到的「&lt;strong&gt;資料格式化&lt;/strong&gt;」。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 15：回應（三）為何不用 ModelSchema？——相比 DRF，我更偏愛 Django Ninja 的理由</title>
    <link href="https://blog.kyomind.tw/django-ninja-15/"/>
    <id>https://blog.kyomind.tw/django-ninja-15/</id>
    <published>2024-09-27T03:37:59.000Z</published>
    <updated>2024-09-30T18:25:27.098Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>Django API 回應，常常是對 Model 物件（即 db 資料）內容進行一定的<strong>篩選與加工</strong>。</p><p>比如「取得單一文章資訊」API，實際上就是從<code>Post</code>物件挑選欄位，再進行序列化。</p><p>這個過程中，我們需要考慮如何將<strong>模型物件</strong>轉換為 API 的回應結構，同時保持程式碼的可維護性與靈活。</p><p>對此，Django REST Framework（<strong>以下簡稱 DRF</strong>）提供了<strong>非常實用的「特製」序列化器</strong>——<code>ModelSerializer</code>，可說是 DRF 開發者必學的核心功能。</p><p>Django Ninja 雖然也有類似的實踐——<code>ModelSchema</code>，對我而言卻是雞肋般的存在，<strong>我幾乎不曾使用</strong>。</p><p>這樣的差異，無疑是兩者的核心設計理念不同所導致。</p><p>我們曾在第 3 篇中討論過，兩者在功能上的主要區別。本文將透過「<strong>Django 模型物件的序列化</strong>」這個頗具代表性的議題，說明「<strong>為何相比於 DRF，我更喜歡寫 Django Ninja</strong>」。</p><span id="more"></span><hr><h2 id="ModelSerializer-的亮點"><a href="#ModelSerializer-的亮點" class="headerlink" title="ModelSerializer 的亮點"></a>ModelSerializer 的亮點</h2><p>DRF 中的<code>ModelSerializer</code>是個非常強大的工具，它能夠自動將 Django 模型轉換為 API 需要的資料結構——序列化器，大大簡化了「<strong>為序列化器定義欄位</strong>」的過程。</p><p>附帶一提，DRF <a href="https://www.django-rest-framework.org/api-guide/serializers/">序列化器</a>，相當於 Django Ninja 所使用的 Schema，兩者的概念大同小異，都是用於<strong>資料的驗證與序列化</strong>。</p><p>如果我們把「取得單一文章資訊」API 回應用<code>ModelSerializer</code>改寫，它將長這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="comment"># Author 序列化器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AuthorSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Post 序列化器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    author = AuthorSerializer()  <span class="comment"># 嵌套的 Author 序列化器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Post</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;updated_at&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如你所見，透過<code>ModelSerializer</code>，我們只需要<strong>少少的程式碼</strong>便能定義完序列化器，從而避免了<strong>手動設定的重複與麻煩。</strong></p><hr><h2 id="ModelSerializer-的隱憂"><a href="#ModelSerializer-的隱憂" class="headerlink" title="ModelSerializer 的隱憂"></a>ModelSerializer 的隱憂</h2><p>然而，這樣的方便也帶來<strong>一定的隱憂</strong>。</p><p>因為不用自己定義欄位，所以<code>ModelSerializer</code>幫你做了許多欄位的<strong>隱式轉換</strong>——從 Django Model 欄位轉換為序列化器欄位。</p><p>為何說「<strong>隱式</strong>」呢？因為<strong>自動轉換</strong>後的序列化器欄位，其欄位的型別、特性、是否唯讀（<code>read_only</code>）等細節，你<strong>未必清楚</strong>。</p><p>換言之，<code>ModelSerializer</code>不僅會自動生成欄位，還會<strong>自動推斷</strong>欄位的型別、屬性、屬性的參數等。</p><h3 id="舉例說明"><a href="#舉例說明" class="headerlink" title="舉例說明"></a>舉例說明</h3><p>這樣講有點<strong>抽象</strong>，對於沒寫過 DRF 的讀者可能不好太理解。我們直接看一個例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(models.Model):</span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><p>這是一個超簡單的 Django Model，我引用自 <a href="https://docs.djangoproject.com/en/5.1/topics/db/models/#quick-example">Django 官方文件</a>。</p><p>它有兩個欄位<code>first_name</code>和<code>last_name</code>，實際上它還有一個 Django 自動生成的<code>id</code>欄位，在程式碼中沒有顯示。</p><h3 id="ModelSerializer-的「魔法」"><a href="#ModelSerializer-的「魔法」" class="headerlink" title="ModelSerializer 的「魔法」"></a>ModelSerializer 的「魔法」</h3><p>使用<code>ModelSerializer</code>，我們可以這樣定義序列化器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Person</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>， <span class="string">&#x27;first_name&#x27;</span>， <span class="string">&#x27;last_name&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>程式碼很簡單，但它背後的「魔法」卻很多。</strong></p><p>具體而言，實際上的序列化器和欄位長這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    first_name = serializers.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = serializers.CharField(max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self， validated_data</span>):</span><br><span class="line">        <span class="keyword">return</span> Person.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self， instance， validated_data</span>):</span><br><span class="line">        instance.first_name = validated_data.get(<span class="string">&#x27;first_name&#x27;</span>， instance.first_name)</span><br><span class="line">        instance.last_name = validated_data.get(<span class="string">&#x27;last_name&#x27;</span>， instance.last_name)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>有沒有覺得有點<strong>吃驚</strong>？</p><h3 id="隱式轉換了做很多事"><a href="#隱式轉換了做很多事" class="headerlink" title="隱式轉換了做很多事"></a>隱式轉換了做很多事</h3><p>其中，<code>id</code>欄位被自動加上了<code>read_only=True</code>，<code>first_name</code>和<code>last_name</code>則被自動加上了<code>max_length=30</code>。</p><p>這還是在 Django Model 的設計與欄位參數<strong>相對簡單</strong>的情況下，當 Model 欄位<strong>更複雜</strong>時，<code>ModelSerializer</code>的「魔法」也會變得更加複雜。</p><p>它背後有很多轉換邏輯，讓開發者在某些情況下<strong>必須</strong>去理解這些「<strong>隱藏規則</strong>」——因為這個推斷有時<strong>可能不符合你的需求</strong>，導致你需要<strong>手動覆寫</strong>。</p><p>總之，自動推斷與轉換固然省去了手動設定的麻煩，但當你需要調整某些細節，或理解具體的轉換邏輯時，這種隱式行為可能會<strong>讓你感到困惑</strong>。</p><h3 id="魔法的代價"><a href="#魔法的代價" class="headerlink" title="魔法的代價"></a>魔法的代價</h3><p>在實際開發中，這種隱式轉換的「魔法」會讓開發者<strong>失去</strong>對轉換過程的<strong>理解與掌控</strong>。你很可能會發現，序列化的結果和你想的<strong>並不完全一致！</strong></p><p>此時我們往往需要翻閱 DRF 的官方文件來理解內部如何處理這些欄位轉換，但也不是每個細節都寫得清楚明白。</p><p>對開發者而言，特別是在處理複雜 API 時，會明顯增加學習和維護成本。</p><p><strong>以上正是我的經驗！</strong></p><p>即使寫了 2 年 DRF，遇到序列化問題，我還是<strong>很常需要重新查看文件</strong>。</p><hr><h2 id="ModelSchema"><a href="#ModelSchema" class="headerlink" title="ModelSchema"></a>ModelSchema</h2><p>Django Ninja 的 <a href="https://django-ninja.dev/guides/response/django-pydantic/#modelschema">ModelSchema</a> 相較於 ModelSerializer，則顯得「<strong>陽春</strong>」許多。</p><p>怎麼說？我們看一下<a href="https://django-ninja.dev/guides/response/django-pydantic/#modelschema">官方文件</a>中的例示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> ModelSchema</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">ModelSchema</span>):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;first_name&#x27;</span>, <span class="string">&#x27;last_name&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Will create schema like this:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class UserSchema(Schema):</span></span><br><span class="line"><span class="comment">#     id: int</span></span><br><span class="line"><span class="comment">#     username: str</span></span><br><span class="line"><span class="comment">#     first_name: str</span></span><br><span class="line"><span class="comment">#     last_name: str</span></span><br></pre></td></tr></table></figure><p>說它陽春，因為它<strong>只會</strong>幫你自動轉換、定義欄位的「<strong>型別</strong>」而已。其他欄位細節，比如<code>max_length</code>，都要靠<code>Field</code>來設定——ModelSchema <strong>不會</strong>幫你做這些。</p><p>而 DRF 的<code>ModelSerializer</code>，如前所述，則是會「<strong>做更多</strong>」。</p><p>既然 ModelSchema 的自動轉換相對單純，那為何<strong>我還是不建議使用</strong>呢？有兩個理由。</p><p>其中<strong>第一個理由</strong>，就是標題所說「<strong>為何我更偏愛 Django Ninja</strong>」的理由。</p><hr><h2 id="理由一：低耦合-明確優於隱晦"><a href="#理由一：低耦合-明確優於隱晦" class="headerlink" title="理由一：低耦合 + 明確優於隱晦"></a>理由一：低耦合 + 明確優於隱晦</h2><p>Django Ninja 更強調開發者對 API 結構的掌握，而 DRF 則偏向於提供高度整合且便利的工具。</p><p>這種差異反映在它們<strong>對待 Django 模型序列化的方式</strong>上，也影響了開發者在使用這兩個框架時的<strong>風格和思維方式</strong>。</p><h3 id="Django-REST-framework-和-Django-高度耦合"><a href="#Django-REST-framework-和-Django-高度耦合" class="headerlink" title="Django REST framework 和 Django 高度耦合"></a>Django REST framework 和 Django 高度耦合</h3><p>我們可以發現， DRF 幾乎是一個「<strong>為 Django 高度定製</strong>」的 API 開發工具。</p><p>這種<strong>緊密的結合</strong>雖然帶來了便利性，但也意味著 DRF 在很大程度上依賴於 Django 的內部結構和功能。不管是 <a href="https://www.django-rest-framework.org/api-guide/generic-views/#generic-views">Generic views</a>，還是本文的 <a href="https://www.django-rest-framework.org/api-guide/serializers/#modelserializer">ModelSerializer</a>，都是如此。</p><p>高耦合的優點就是<strong>你可以少做很多事</strong>，而代價則是<strong>你要很了解自己在做什麼</strong>。</p><h3 id="明確優於隱晦"><a href="#明確優於隱晦" class="headerlink" title="明確優於隱晦"></a>明確優於隱晦</h3><p>相較於 DRF，Django Ninja 與 Django 的耦合程度則要<strong>低得多</strong>。</p><p>在我看來，Django Ninja 更偏好「<strong>明確優於隱晦</strong>」，Django Ninja 的 Schema 定義是基於 Pydantic，它要求開發者明確定義每個欄位，無論是輸入還是輸出。</p><p>雖然這樣相對繁瑣，但它帶來的好處是<strong>顯而易見</strong>的。</p><h3 id="明確的兩大優點"><a href="#明確的兩大優點" class="headerlink" title="明確的兩大優點"></a>明確的兩大優點</h3><p>首先，手動定義 Schema 讓開發者對資料結構有著<strong>絕對的掌控權</strong>。沒有任何隱藏規則或暗箱操作，一切都清晰可見。</p><p>其次，這種方法<strong>有效地降低了模型層與 API 層之間的耦合</strong>。在實際開發中，模型設計可能會隨著需求變化而更新，但這不應該直接影響到 API。</p><p>總的來說，Django Ninja 強調<strong>以 Schema 為核心的控制</strong>，讓 API 的設計更具穩定性和靈活性，並賦予開發者對資料流的完全掌控。</p><hr><h2 id="理由二：更好、更可讀的-API-文件"><a href="#理由二：更好、更可讀的-API-文件" class="headerlink" title="理由二：更好、更可讀的 API 文件"></a>理由二：更好、更可讀的 API 文件</h2><p>在第 18 篇，我們會詳細討論 Schema 欄位設定對 API 文件的影響。</p><p>簡言之，如果使用 ModelSchema，那麼渲染出來的 API 文件將會<strong>相當陽春</strong>。</p><p>這<strong>並不符合</strong>我對 API 文件清晰與明確性的追求。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>不可否認，Django REST framework 有一些非常方便且貼心的設計，比如上一篇提到的<code>source=</code>參數，它直觀而優雅。</p><p>Django Ninja 則要求開發者，盡可能手動定義每個欄位，減少模型與 API 層的耦合，這更符合 <a href="https://zh.wikipedia.org/zh-tw/Python%E4%B9%8B%E7%A6%85">Python 哲學</a>中的「<strong>明確優於隱晦</strong>」，同時避免隱式行為帶來的潛在問題。</p><p>這正是我更偏愛 Django Ninja 的原因。</p><p>Django Ninja 對明確性的追求，讓我在開發和維護 API 時，<strong>多數時候感覺更加輕鬆</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;Django API 回應，常常是對 Model 物件（即 db 資料）內容進行一定的&lt;strong&gt;篩選與加工&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如「取得單一文章資訊」API，實際上就是從&lt;code&gt;Post&lt;/code&gt;物件挑選欄位，再進行序列化。&lt;/p&gt;
&lt;p&gt;這個過程中，我們需要考慮如何將&lt;strong&gt;模型物件&lt;/strong&gt;轉換為 API 的回應結構，同時保持程式碼的可維護性與靈活。&lt;/p&gt;
&lt;p&gt;對此，Django REST Framework（&lt;strong&gt;以下簡稱 DRF&lt;/strong&gt;）提供了&lt;strong&gt;非常實用的「特製」序列化器&lt;/strong&gt;——&lt;code&gt;ModelSerializer&lt;/code&gt;，可說是 DRF 開發者必學的核心功能。&lt;/p&gt;
&lt;p&gt;Django Ninja 雖然也有類似的實踐——&lt;code&gt;ModelSchema&lt;/code&gt;，對我而言卻是雞肋般的存在，&lt;strong&gt;我幾乎不曾使用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這樣的差異，無疑是兩者的核心設計理念不同所導致。&lt;/p&gt;
&lt;p&gt;我們曾在第 3 篇中討論過，兩者在功能上的主要區別。本文將透過「&lt;strong&gt;Django 模型物件的序列化&lt;/strong&gt;」這個頗具代表性的議題，說明「&lt;strong&gt;為何相比於 DRF，我更喜歡寫 Django Ninja&lt;/strong&gt;」。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="Django REST framework" scheme="https://blog.kyomind.tw/tags/Django-REST-framework/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 14：回應（二）巢狀結構回應</title>
    <link href="https://blog.kyomind.tw/django-ninja-14/"/>
    <id>https://blog.kyomind.tw/django-ninja-14/</id>
    <published>2024-09-26T02:56:38.000Z</published>
    <updated>2024-09-30T18:18:51.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>在 API 開發中，我們經常會遇到<strong>關聯模型</strong>之間的資料需要<strong>同時返回</strong>的情況。</p><p>特別是在處理「一對一」或「一對多」關聯時，<strong>多層結構</strong>往往是常態。</p><p>我們希望以<strong>巢狀結構</strong>（<a href="https://django-ninja.dev/guides/response/#nested-objects">Nested Objects</a>）的方式返回資料，這樣可以讓 API 的使用者<strong>一次取得必要資訊</strong>，而不需要進行多次請求。</p><p>本文將繼續使用並擴充「單一文章資訊」API 這個範例，講述如何在 Django Ninja 中實現<strong>巢狀結構回應</strong>，讓我們的 API 回應更加豐富、有體系。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/6">這個 PR</a>。</p><hr><h2 id="一、問題背景"><a href="#一、問題背景" class="headerlink" title="一、問題背景"></a>一、問題背景</h2><p>在之前的 API 設計中，「取得單一文章資訊」的回應包括了文章資訊及<strong>作者的 id</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    author_id: <span class="built_in">int</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    updated_at: datetime</span><br></pre></td></tr></table></figure><p>有經驗的開發者都知道，無論是<code>id</code>還是<code>author_id</code>，通常<strong>不是</strong>給服務的使用者看的——而是<strong>給前端人員靈活運用</strong>的。</p><p>比如在系統的畫面中，文章可能包括作者的<strong>個人資訊連結</strong>，點進去可以看到作者資訊。此時前端必須<strong>透過 id</strong>，再呼叫另一支 API「取得用戶資訊」來獲得額外的內容。</p><p>如果額外資訊很多，這樣的「<strong>解耦</strong>」設計是非常合理的。但如果我們希望<strong>一併呈現</strong>作者的「<strong>必要資訊</strong>」，那分次呼叫的設計就<strong>略嫌拖沓</strong>。</p><p>所以我們需要<strong>巢狀結構</strong>！</p><p>API 可以直接在回應中，嵌入作者的「必要資訊」，這樣用戶就不必再進行多次請求。這裡我們以一併顯示作者的「<strong>名字</strong>」和「<strong>email</strong>」為例。</p><span id="more"></span><hr><h2 id="二、API-改進：重新定義-Schema"><a href="#二、API-改進：重新定義-Schema" class="headerlink" title="二、API 改進：重新定義 Schema"></a>二、API 改進：重新定義 Schema</h2><p>只需要做一件事，就可以讓回應的內容、結構有所不同——重新定義<code>PostResponse</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> Schema</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_AuthorInfo</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    username: <span class="built_in">str</span></span><br><span class="line">    email: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    author: _AuthorInfo  <span class="comment"># 巢狀結構，包含作者資訊</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    updated_at: datetime</span><br></pre></td></tr></table></figure><p><code>_AuthorInfo</code>包含了作者的<code>id</code>、<code>name</code>和<code>email</code>，並將這個結構<strong>嵌入</strong><code>PostResponse</code>中的<code>author</code>欄位（從<code>author_id</code>易名而來，因為資訊內涵已有所不同）。</p><p>如此一來，我們便可以<strong>同時獲得</strong>文章和作者的必要資訊。</p><h3 id="命名小建議"><a href="#命名小建議" class="headerlink" title="命名小建議"></a>命名小建議</h3><p>你可能留意到我在<code>_AuthorInfo</code>使用了「底線開頭」這個命名原則。在 Python 中，這是一種<strong>慣例</strong>，用來表示這個<strong>屬性、函式、類別</strong>主要是作為<strong>內部使用</strong>。</p><p>所謂的「<strong>內部</strong>」可以有<strong>很多種解讀</strong>，而這裡我的用意是：<strong>它只是某個或多個 Schema 的一部分，不直接供 view 函式調用。</strong></p><p>別小看這個命名細節。隨著你的 Schema 數量增加，在開發新 API 時，你總是需要先瀏覽現有的 Schema，以決定是重新定義還是延用既有的。</p><p>此時有這樣的命名區別就顯得很「<strong>貼心</strong>」了——你不必在大大小小的 Schema 中翻來覆去，看得眼睛要脫窗。</p><p>撰寫巢狀 Schema 的機會不少，所以我認為養成這樣的好習慣是值得的。</p><h3 id="Nested-Response"><a href="#Nested-Response" class="headerlink" title="Nested Response"></a>Nested Response</h3><p>我們來看 API 的回應：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1:8000/posts/2/</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1 content&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alice@example.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>看看新的<code>author</code>欄位內容，巢狀結構，非常完美！</p><p>用戶可以直接到看文章作者的名字與 email，如果想看更多作者資訊，依舊能透過<code>id</code>欄位，再讓前端呼叫另一支 API。</p><p>這是一個理想的<strong>折衷方案</strong>。</p><hr><h2 id="三、「攤平」巢狀資訊"><a href="#三、「攤平」巢狀資訊" class="headerlink" title="三、「攤平」巢狀資訊"></a>三、「攤平」巢狀資訊</h2><p>前面的「折衷方案」確實挺理想。不過，有時我們的需求<strong>更簡單</strong>。</p><p>比如在「取得文章列表」API 中，我們可能也需要顯示作者的資訊——但此時只要<strong>名字</strong>就足夠了。</p><p>不需要作者 id，更不用 email，只要名字即可。</p><p>那麼，為何稱之為「<strong>攤平巢狀資訊</strong>」呢？因為作者的名字並非<code>Post</code>模型的直接屬性，它實際上來自於關聯模型——<code>User</code>。</p><p>我們必須要把有關作者的巢狀資訊進行<strong>化簡</strong>。</p><p>本來是這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;author&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;alice@example.com&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>現在變成這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;author_name&quot;</span>: <span class="string">&quot;Alice&quot;</span>,</span><br></pre></td></tr></table></figure><p>從兩層變回一層（但不是作者 id 而是名字了），所以稱為「<strong>攤平</strong>」（flatten）。</p><h3 id="Schema-解耦"><a href="#Schema-解耦" class="headerlink" title="Schema 解耦"></a>Schema 解耦</h3><p>還記得「取得文章列表」API 的回應格式，其實是和「取得單一文章資訊」<strong>共用</strong>的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span>, response=<span class="built_in">list</span>[PostResponse]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_posts</span>(<span class="params">...</span>) -&gt; QuerySet[Post]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取得文章列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>兩者都使用了<code>PostResponse</code>。</p><p>本文上半部對「取得單一文章資訊」回應的修改，<strong>也會影響到</strong>「取得文章列表」——這通常不是我們想要的結果。</p><p>所以，我們要為「取得文章列表」API 建立一個<strong>屬於自己的回應 Schema</strong>，並依照前面提到的需求，簡化資訊！</p><p>我打算：</p><ol><li>省略文章的內容（<code>content</code>）還有更新時間（<code>updated_at</code>）這兩個欄位，因為在列表中並不需要。</li><li>作者的部分只留下「名字」即可。</li></ol><hr><h2 id="四、實作攤平巢狀資訊——使用-property"><a href="#四、實作攤平巢狀資訊——使用-property" class="headerlink" title="四、實作攤平巢狀資訊——使用@property"></a>四、實作攤平巢狀資訊——使用<code>@property</code></h2><p>我們先看看新 Schema 如何定義：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PostListResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    author_name: <span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>你可能覺得奇怪，哪來的<code>author_name</code>屬性？<code>Post</code>模型並沒有啊？</p><p>沒錯！因為那是我們<strong>自己定義</strong>的——使用<code>@property</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post/models.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span>(models.Model):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">author_name</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> self.author.username</span><br></pre></td></tr></table></figure><p>如此一來，你的 Post 模型物件，就會有<code>author_name</code>這個屬性了。</p><p>但要注意，呼叫這個屬性通常意味著<strong>觸發第二次查詢</strong>（因為它是<strong>關聯模型</strong>上的屬性），所以 view 函式中要搭配 Django QuerySet 方法<code>select_related</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posts.<span class="built_in">filter</span>(title__icontains=title).select_related(<span class="string">&#x27;author&#x27;</span>)</span><br></pre></td></tr></table></figure><p>這是 Django ORM 中常見的「<a href="https://medium.com/ichef/django-performance-optimization-1-orm-n-1-problem-493ddbfbe07a">N+1</a>」議題，在此先不展開。</p><h3 id="更好的做法"><a href="#更好的做法" class="headerlink" title="更好的做法"></a>更好的做法</h3><p>你可能覺得這個方式好像<strong>不怎麼優雅</strong>（至少我第一次看到時就是這麼想！）——尤其是和 Django REST framework 的做法相比。</p><p>Django REST framework 會在序列化器中這樣寫：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">author_name = serializers.CharField(source=<span class="string">&quot;author.name&quot;</span>)</span><br></pre></td></tr></table></figure><p>是不是簡潔很多？</p><p>但這確實是 Django Ninja 作者<strong>早期</strong><a href="https://github.com/vitalik/django-ninja/issues/291#issuecomment-981395267">推薦的方式</a>。</p><p>別擔心，第 16 篇我們會介紹更好、更現代化的做法。不過<code>@property</code>在<strong>某些情況下</strong>，還是很有用的。</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>這篇文章中，我們展示了如何在 Django Ninja 中使用 Schema 實現巢狀結構回應。</p><p>接著介紹如何「攤平」這個巢狀結構，把原來的作者 id 替換成名字欄位。</p><p>這些方法大大增加了 API 回應的靈活性。</p><p>下一篇文章，我們將討論 Django Ninja 和 Django REST Framework 在序列化與回應結構處理上的不同設計理念，並比較兩者的優劣。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 API 開發中，我們經常會遇到&lt;strong&gt;關聯模型&lt;/strong&gt;之間的資料需要&lt;strong&gt;同時返回&lt;/strong&gt;的情況。&lt;/p&gt;
&lt;p&gt;特別是在處理「一對一」或「一對多」關聯時，&lt;strong&gt;多層結構&lt;/strong&gt;往往是常態。&lt;/p&gt;
&lt;p&gt;我們希望以&lt;strong&gt;巢狀結構&lt;/strong&gt;（&lt;a href=&quot;https://django-ninja.dev/guides/response/#nested-objects&quot;&gt;Nested Objects&lt;/a&gt;）的方式返回資料，這樣可以讓 API 的使用者&lt;strong&gt;一次取得必要資訊&lt;/strong&gt;，而不需要進行多次請求。&lt;/p&gt;
&lt;p&gt;本文將繼續使用並擴充「單一文章資訊」API 這個範例，講述如何在 Django Ninja 中實現&lt;strong&gt;巢狀結構回應&lt;/strong&gt;，讓我們的 API 回應更加豐富、有體系。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/6&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、問題背景&quot;&gt;&lt;a href=&quot;#一、問題背景&quot; class=&quot;headerlink&quot; title=&quot;一、問題背景&quot;&gt;&lt;/a&gt;一、問題背景&lt;/h2&gt;&lt;p&gt;在之前的 API 設計中，「取得單一文章資訊」的回應包括了文章資訊及&lt;strong&gt;作者的 id&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;PostResponse&lt;/span&gt;(&lt;span class=&quot;title class_ inherited__&quot;&gt;Schema&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title: &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    content: &lt;span class=&quot;built_in&quot;&gt;str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    author_id: &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    created_at: datetime&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    updated_at: datetime&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;有經驗的開發者都知道，無論是&lt;code&gt;id&lt;/code&gt;還是&lt;code&gt;author_id&lt;/code&gt;，通常&lt;strong&gt;不是&lt;/strong&gt;給服務的使用者看的——而是&lt;strong&gt;給前端人員靈活運用&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;比如在系統的畫面中，文章可能包括作者的&lt;strong&gt;個人資訊連結&lt;/strong&gt;，點進去可以看到作者資訊。此時前端必須&lt;strong&gt;透過 id&lt;/strong&gt;，再呼叫另一支 API「取得用戶資訊」來獲得額外的內容。&lt;/p&gt;
&lt;p&gt;如果額外資訊很多，這樣的「&lt;strong&gt;解耦&lt;/strong&gt;」設計是非常合理的。但如果我們希望&lt;strong&gt;一併呈現&lt;/strong&gt;作者的「&lt;strong&gt;必要資訊&lt;/strong&gt;」，那分次呼叫的設計就&lt;strong&gt;略嫌拖沓&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以我們需要&lt;strong&gt;巢狀結構&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;API 可以直接在回應中，嵌入作者的「必要資訊」，這樣用戶就不必再進行多次請求。這裡我們以一併顯示作者的「&lt;strong&gt;名字&lt;/strong&gt;」和「&lt;strong&gt;email&lt;/strong&gt;」為例。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 13：回應（一）Django Ninja 處理 HTTP 回應概論</title>
    <link href="https://blog.kyomind.tw/django-ninja-13/"/>
    <id>https://blog.kyomind.tw/django-ninja-13/</id>
    <published>2024-09-25T06:37:21.000Z</published>
    <updated>2024-09-27T07:04:00.071Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>這一篇要正式進入「<strong>HTTP 回應</strong>」環節，也就是第三小節。</p><p>本節將透過 4 篇文章，介紹 Django Ninja <strong>如何處理 HTTP 回應</strong>：</p><ul><li><strong>卷 13：回應（一）Django Ninja 處理 HTTP 回應概論</strong>（本文）</li><li><a href="https://blog.kyomind.tw/django-ninja-14/">卷 14：回應（二）巢狀結構回應</a></li><li><a href="https://blog.kyomind.tw/django-ninja-15/">卷 15：回應（三）為何不用 ModelSchema？——相比 DRF，我更偏愛 Django Ninja 的理由</a></li><li><a href="https://blog.kyomind.tw/django-ninja-16/">卷 16：回應（四）Resolver 方法——欄位資料格式化</a></li></ul><p>我們會講述更多 Schema 用法，透過這些技巧，你能夠精確地控制 API 的輸出格式。無論是<strong>單一物件回應</strong>，還是複雜的<strong>嵌套結構</strong>，接下來都會一一提及。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/5">這個 PR</a>。</p><span id="more"></span><hr><p>本文將一步一步，從簡單到複雜，介紹如何透過 Django Ninja 建立 HTTP 回應。</p><p>並且用既有的 <strong>3 個 API</strong> 進行示範（<strong>會依需求為它們增補不同內容</strong>）：</p><ol><li>新增文章：示範<strong>簡單回應</strong>，加上狀態碼。</li><li>取得單一文章：示範<strong>單一物件回應</strong>，需要 Schema 與定義<code>response=</code>參數。</li><li>取得文章列表：示範<strong>多個物件回應</strong>。</li></ol><p>開始吧！</p><h2 id="一、簡單回應：新增文章"><a href="#一、簡單回應：新增文章" class="headerlink" title="一、簡單回應：新增文章"></a>一、簡單回應：新增文章</h2><p>先來看最簡單的回應格式，這個例子會展示如何<strong>回應一個 Python 字典</strong>，並手動設定 HTTP 回應狀態碼。</p><p>以「新增文章」API 為例：（省略部分程式碼）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_post</span>(<span class="params">...</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;id&#x27;</span>: post.<span class="built_in">id</span>, <span class="string">&#x27;title&#x27;</span>: post.title&#125;</span><br></pre></td></tr></table></figure><p>這裡回應的是一個 Python 字典，事實上，你<strong>可以</strong> return「<strong>任何能夠 JSON 序列化</strong>」的 Python 資料。（所以 Django 模型物件不行，因為它無法直接序列化）</p><p>因此，以下這些都可以 return：</p><ul><li>單純的字串：<code>&quot;Hello World !&quot;</code></li><li>Python list：<code>[1 , 2 , 3]</code></li><li>巢狀的資料結構：<code>&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30, &quot;hobbies&quot;: [&quot;reading&quot;, &quot;swimming&quot;]&#125;</code></li></ul><p>這些都會被 Django Ninja 自動<strong>序列化為 JSON 格式</strong>，並作為 API 的回應。</p><hr><h2 id="為回應加上-HTTP-狀態碼"><a href="#為回應加上-HTTP-狀態碼" class="headerlink" title="為回應加上 HTTP 狀態碼"></a>為回應加上 HTTP 狀態碼</h2><p>View 函式處理回應，往往要<strong>加入 HTTP 狀態碼</strong>。尤其在有<strong>多種回應狀態</strong>的時候，需要透過狀態碼來<strong>區分</strong>。</p><p>做法很簡單，就是在回應的內容前面直接加上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">201</span>, &#123;<span class="string">&#x27;id&#x27;</span>: post.<span class="built_in">id</span>, <span class="string">&#x27;title&#x27;</span>: post.title&#125;</span><br></pre></td></tr></table></figure><p>如此一來，函式的回傳型別就從原來的<code>dict</code>變成<code>tuple</code>了。</p><p>所以我們函式簽名的 type hints 也要跟著修正：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_post</span>(<span class="params">...</span>) -&gt; <span class="built_in">tuple</span>[<span class="built_in">int</span>, <span class="built_in">dict</span>]:</span><br></pre></td></tr></table></figure><p>如果你沒有加前面這個狀態碼數字，Django Ninja 就將其<strong>預設為 200。</strong></p><p>值得注意的是，當你的 view 函式要 return「<strong>非 200</strong>」回應時，必須在<code>router</code>裝飾器聲明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.post(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span>, response=&#123;<span class="number">201</span>: <span class="built_in">dict</span>&#125;</span>)  </span><span class="comment"># 這裡</span></span><br></pre></td></tr></table></figure><p><code>response=&#123;201: dict&#125;</code>就是聲明的方式，採用 Python 字典來一一對應<strong>狀態碼</strong>與<strong>回傳內容格式</strong>。</p><blockquote><p>創作當時，這部分的範例專案程式碼還未補上，所以這個 API 無法正常回應😅，特此提醒。</p></blockquote><hr><p>上述第一種回應很簡單，不過大部分 API 回應都<strong>沒這麼單純</strong>。</p><p>我們來看第二種回應。</p><h2 id="二、單一模型物件回應：取得單一文章"><a href="#二、單一模型物件回應：取得單一文章" class="headerlink" title="二、單一模型物件回應：取得單一文章"></a>二、單一模型物件回應：取得單一文章</h2><p>開發 Django API，回應中的資料，有很大部分是<strong>從 Django 模型物件序列化</strong>而來。</p><p>但通常我們不會直接將資料庫中的所有資訊傳送給前端。相反，我們會進行<strong>欄位篩選、驗證或格式轉換</strong>。</p><p>這樣不僅能夠精確控制 API 的輸出，還能確保資料的正確與安全性。</p><p>Django Ninja 中，這些「篩選、驗證、格式轉換」等需求，都是透過 Schema 實現。</p><p>我們來為「單得取一文章」API 設計一個回應格式，<strong>使用 Schema</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post/schemas.py</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PostResponse</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    author_id: <span class="built_in">int</span></span><br><span class="line">    created_at: datetime</span><br><span class="line">    updated_at: datetime</span><br></pre></td></tr></table></figure><p>這個<code>PostResponse</code> Schema 包含了<code>Post</code>幾乎所有的欄位。</p><p>注意，<strong>Schema 定義將決定輸出的欄位</strong>。如果 Schema 中只有<code>id</code>一欄，那輸出結果就只會有該欄的資料。</p><p>接著，我們在 view 函式中使用這個 Schema：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#123;int:post_id&#125;/&#x27;</span>, response=PostResponse</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_post</span>(<span class="params">request: HttpRequest, post_id: <span class="built_in">int</span></span>) -&gt; Post:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取得單一文章</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    post = Post.objects.get(<span class="built_in">id</span>=post_id)</span><br><span class="line">    <span class="keyword">return</span> post</span><br></pre></td></tr></table></figure><p>只有改一行！——在<code>router</code>裝飾器加上<code>response=PostSchema</code>。</p><p>有了<code>response=PostSchema</code>設定，Django Ninja 會將函式回傳的<code>Post</code>模型物件，丟給<code>PostSchema</code>進行驗證，成功之後直接轉為 JSON 格式並送回前端。</p><p>看看回應結果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://127.0.0.1:8000/posts/2/</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alice&#x27;s Django Ninja Post 1 content&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author_id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updated_at&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-09-12T02:28:16.801Z&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>非常好！</p><hr><h2 id="三、多個模型物件回應：取得文章列表"><a href="#三、多個模型物件回應：取得文章列表" class="headerlink" title="三、多個模型物件回應：取得文章列表"></a>三、多個模型物件回應：取得文章列表</h2><p>「<strong>清單、列表</strong>」也是 API 的常見回應形態，包含<strong>多筆資料</strong>。</p><p>我們繼續使用剛剛的<code>PostSchema</code>，不作任何更動，直接套用在「取得文章列表」這個 API。</p><p>一樣，只要更改一行即可，但與前面<strong>略有不同</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@router.get(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span>, response=<span class="built_in">list</span>[PostResponse]</span>)</span></span><br></pre></td></tr></table></figure><p>我們使用了<code>list[PostSchema]</code>，表示回應會是一個<code>PostSchema</code>物件的 list。</p><h3 id="Django-Ninja-自動處理-Iterable"><a href="#Django-Ninja-自動處理-Iterable" class="headerlink" title="Django Ninja 自動處理 Iterable"></a>Django Ninja 自動處理 Iterable</h3><p>然而實際上，此時你<strong>不需要</strong>「真的」return 一個 Python list，<strong>可以直接回傳 QuerySet</strong> 就好，Django Ninja 會自行處理物件的<strong>迭代與序列化</strong>。</p><p>甚至，只要你 return 的是一個 <a href="https://myapollo.com.tw/blog/python-iterable-iterator-generator/#iterable-%e6%98%af%e4%bb%80%e9%ba%bc">iterable</a>，而且 iterable 中的每一個元素，<strong>都能夠通過</strong><code>PostSchema</code>驗證（符合格式），那就足夠了！</p><p>來看看結果，因為列表太長了，我改用截圖呈現：</p><p><img src="https://i.imgur.com/vwh3t3R.png" alt="API 回應：取得文章列表"><span class="cap">API 回應：取得文章列表</span></p><hr><h2 id="多重狀態碼回應"><a href="#多重狀態碼回應" class="headerlink" title="多重狀態碼回應"></a>多重狀態碼回應</h2><p>上面提到的回應，不是 200 就是 201，但通常 API 往往還會有 400、401、403 甚至 500 等回應，如何處理它們之間的<strong>對應關係</strong>？</p><p>沒錯，就是擴大<code>response=</code>中的字典！我們直接看<a href="https://django-ninja.dev/guides/response/#multiple-response-schemas">官方文件</a>的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Token</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    token: <span class="built_in">str</span></span><br><span class="line">    expires: date</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    message: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@api.post(<span class="params"><span class="string">&#x27;/login&#x27;</span>, response=&#123;<span class="number">200</span>: Token, <span class="number">401</span>: Message, <span class="number">402</span>: Message&#125;</span>)</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>值得留意的是，字典的 key 不可重複，但值可以！——<code>Message</code>出現了兩次。</p><p>但我覺得這個「多重狀態碼回應」設定在實務上沒有很實用，為何？我們後續再談。</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>本文中，我們從最簡單的回應開始，逐步介紹了如何在回應中返回單一和多筆資料，並提到了 Django Ninja 如何設定多重狀態碼回應。</p><p>下一篇將探討，如何處理回應中複雜的<strong>巢狀結構</strong>，讓我們的 API 愈來愈健全。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;這一篇要正式進入「&lt;strong&gt;HTTP 回應&lt;/strong&gt;」環節，也就是第三小節。&lt;/p&gt;
&lt;p&gt;本節將透過 4 篇文章，介紹 Django Ninja &lt;strong&gt;如何處理 HTTP 回應&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;卷 13：回應（一）Django Ninja 處理 HTTP 回應概論&lt;/strong&gt;（本文）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/django-ninja-14/&quot;&gt;卷 14：回應（二）巢狀結構回應&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/django-ninja-15/&quot;&gt;卷 15：回應（三）為何不用 ModelSchema？——相比 DRF，我更偏愛 Django Ninja 的理由&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/django-ninja-16/&quot;&gt;卷 16：回應（四）Resolver 方法——欄位資料格式化&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們會講述更多 Schema 用法，透過這些技巧，你能夠精確地控制 API 的輸出格式。無論是&lt;strong&gt;單一物件回應&lt;/strong&gt;，還是複雜的&lt;strong&gt;嵌套結構&lt;/strong&gt;，接下來都會一一提及。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/5&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 12：請求（四）Request Body 與 Schema 介紹</title>
    <link href="https://blog.kyomind.tw/django-ninja-12/"/>
    <id>https://blog.kyomind.tw/django-ninja-12/</id>
    <published>2024-09-24T06:22:23.000Z</published>
    <updated>2024-10-03T02:04:04.951Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>經過前幾篇的介紹，我們已經學習了如何處理路徑與查詢參數。但在現實世界中，我們往往還需要處理<strong>更複雜的請求資料</strong>。</p><p>比如用戶提交的表單、上傳的檔案等等。對於 API 而言，最常見的就是 JSON 格式的 <strong>request body</strong>。</p><p>這一篇將探討 Django Ninja 如何處理 request body，並介紹如何透過 Schema 來定義與驗證資料。</p><p>本文所有的程式碼變動，可參考<a href="https://github.com/kyomind/Django-Ninja-Tutorial/pull/4">這個 PR</a>。</p><hr><h2 id="一、什麼是-Request-Body？"><a href="#一、什麼是-Request-Body？" class="headerlink" title="一、什麼是 Request Body？"></a>一、什麼是 Request Body？</h2><p><strong>Request body</strong> 指的是隨著 HTTP 請求一同傳送的資料，通常用於<code>POST</code>、<code>PUT</code>等<strong>需要建立或更新「資源」的請求。</strong></p><p>這些資料不會出現在 URL 中，而是以 JSON 或其他格式（如 XML、form-data）作為請求的主體。</p><p>例如，當用戶要發表一篇新文章時，可能會傳送以下 JSON 格式的 request body：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我的第一篇文章&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;這是我在忍者論壇的第一篇文章，希望大家喜歡！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>這個 request body 包含了<code>title</code>和<code>content</code>兩個欄位，Django Ninja 將協助我們處理這些資料並進行驗證。</p><span id="more"></span><hr><h2 id="二、範例專案改動"><a href="#二、範例專案改動" class="headerlink" title="二、範例專案改動"></a>二、範例專案改動</h2><p>我們要在<a href="https://github.com/kyomind/Django-Ninja-Tutorial">範例專案</a>中建立一個<strong>接收 request body</strong> 的 API——「新增文章」。</p><p>此外，還要在 Django post app 目錄下，新增一個 Python 模組：<code>schemas.py</code>。這是用來放置 API 中<strong>所有用到的 Schema</strong> 的地方。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── NinjaForum</span><br><span class="line">│   ├── ...</span><br><span class="line">├── post</span><br><span class="line">│   ├── api.py</span><br><span class="line">│   ├── schemas.py <span class="comment"># 新增這個模組</span></span><br><span class="line">│   ├── ...</span><br></pre></td></tr></table></figure><p>具體程式碼，我們會在接下來的說明中介紹。</p><p>從本篇開始，分支名稱不再使用中文，因為中文分支名稱會<strong>一直被 GitHub 提醒：</strong></p><blockquote><p>The head ref <strong>may contain hidden characters</strong>: …</p></blockquote><p>而且應該也很少人使用中文來命名 git 分支！當初用中文是為了讀者比較好讀🥹</p><p>所以從這個分支開始，改成<code>數字+英文</code>，比如本篇的「<code>12-request-body</code>」。但 PR 的標題仍維持中文。</p><hr><h2 id="三、使用-Schema-定義與驗證-Request-Body"><a href="#三、使用-Schema-定義與驗證-Request-Body" class="headerlink" title="三、使用 Schema 定義與驗證 Request Body"></a>三、使用 Schema 定義與驗證 Request Body</h2><p>與 FastAPI 相同，Django Ninja 使用 <a href="https://docs.pydantic.dev/latest/api/base_model/">Pydantic BaseModel</a> 來處理請求 body。</p><p>不過因為 BaseModel 這個名稱容易和 Django 的 Models 混淆，所以 Django Ninja 將其重新命名為 Schema。</p><p>Schema 繼承自 BaseModel，因此兩者的<strong>實際內涵非常接近</strong>（Django Ninja 有自己加一點料）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Django Ninja 原始碼</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Schema</span>(BaseModel, metaclass=ResolverMetaclass):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>回到專案，讓我們來看專案中的例子，這是定義「新增文章」API 的 request body 的 Schema：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post/schemas.py</span></span><br><span class="line"><span class="keyword">from</span> ninja <span class="keyword">import</span> Schema</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreatePostRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span></span><br><span class="line">    user_id: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>這個 Schema 要求 body 資料<strong>必須包含</strong>這三個欄位：<code>title</code>、<code>content</code>和<code>user_id</code>，而且<strong>資料的型別也要相符</strong>。</p><h3 id="在-View-函式中使用-Schema"><a href="#在-View-函式中使用-Schema" class="headerlink" title="在 View 函式中使用 Schema"></a>在 View 函式中使用 Schema</h3><p>定義好了「請求」Schema，就可以在 view 函式中以「<strong>函式參數</strong>」的形式使用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> post.schemas <span class="keyword">import</span> CreatePostRequest</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@router.post(<span class="params">path=<span class="string">&#x27;/posts/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_post</span>(<span class="params">..., payload: CreatePostRequest</span>):  <span class="comment"># 這裡</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>我們將函式<code>payload</code>參數的 type hint 設定為我們剛剛定義的<code>CreatePostRequest</code>。</p><p>當請求發送到這個 API 時，Django Ninja 會透過<code>CreatePostRequest</code>這個 Schema 來<strong>解析</strong>（<strong>parsing</strong>）並<strong>驗證</strong> body 中的資料。</p><p>驗證成功後，再將資料傳入 view 函式的<code>payload</code>。此時<strong>函式內部</strong>的<code>payload</code>參數，本質上是一個 Schema（即 Pydantic BaseModel）物件。</p><h3 id="自動資料驗證與錯誤處理"><a href="#自動資料驗證與錯誤處理" class="headerlink" title="自動資料驗證與錯誤處理"></a>自動資料驗證與錯誤處理</h3><p>如果請求 body 中有欄位缺少，或者資料的型別不對，Django Ninja 會自動返回 <strong>422 回應</strong>，並提供<strong>具體的錯誤資訊</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;missing&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;loc&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;body&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;payload&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;content&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Field required&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>錯誤訊息表示：body 中缺少了<code>content</code>這個 field。</p><hr><h2 id="四、可選的（Optional）欄位與預設值"><a href="#四、可選的（Optional）欄位與預設值" class="headerlink" title="四、可選的（Optional）欄位與預設值"></a>四、可選的（Optional）欄位與預設值</h2><p>在實際 API 開發中，<strong>並不是</strong>所有請求欄位都是必須的。</p><p>我們可以透過 Pydantic 與 type hints 來定義<strong>可選欄位</strong>。假設，現在文章的內容是完全可選的：（留意<code>content</code>欄位）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreatePostRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line">    user_id: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>使用<code>=</code>運算子，將<code>content</code>欄位的<strong>預設值</strong>設定為<code>None</code>，該欄位<strong>就會變成可選欄位</strong>。此時<code>content</code>的 type hints 也要改為<code>str | None</code>。</p><p>值得一提的是，如果 Schema 用在<strong>請求</strong>，這樣設定即使<strong>能通過驗證</strong>，你也要注意後續對應的 Django Model 欄位（也就是 db 欄位）<strong>是否允許 NULL</strong>。不然還是會出錯：</p><blockquote><p>django.db.utils.IntegrityError: NOT NULL constraint failed: post_post.content</p></blockquote><p>除了將欄位設為可選，也可以直接<strong>給定預設值</strong>，比如這裡的空字串。在使用者未輸入時，就會直接填入預設值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreatePostRequest</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    content: <span class="built_in">str</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    user_id: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><p>然而，除了預設值為<code>None</code>，在 Schema 中<strong>給定預設值</strong>的行為要「<strong>非常慎用</strong>」。這部分我們在〈卷 18：用 Pydantic Field 設定範例與預設值〉還會再次討論。</p><hr><h2 id="五、Django-Ninja-判斷參數的順序"><a href="#五、Django-Ninja-判斷參數的順序" class="headerlink" title="五、Django Ninja 判斷參數的順序"></a>五、Django Ninja 判斷參數的順序</h2><p>你是否想過，一個 view 函式參數這麼多種，Django Ninja 怎麼知道<strong>誰要對應誰</strong>？</p><p>事實上，Django Ninja 確實會根據 view 函式的<strong>參數簽名</strong>，自動判斷參數的來源（究竟是路徑參數、查詢參數或請求 body）。其<a href="https://django-ninja.dev/guides/input/body/#request-body-path-query-parameters">判斷順序</a>如下：</p><ol><li><strong>路徑參數</strong>：任何定義在 URL path 中的變數（比如<code>/items/&#123;id&#125;</code>中的<code>id</code>）會<strong>優先被識別為路徑參數</strong>。</li><li><strong>查詢參數</strong>：函式中的其他<strong>單數類型</strong>參數（比如<code>int</code>、<code>float</code>、<code>bool</code>、<code>str</code>，而不是<code>list</code>、<code>dict</code>），若<strong>未標註為路徑參數</strong>，則會被識別為查詢參數。</li><li><strong>Request body</strong>：Schema 型別參數，才會被視為請求 body。</li></ol><p>原則上，view 函式<strong>只能有一個</strong> Schema 參數。畢竟一個請求就只有一個 body 而已。</p><hr><h2 id="第二節尾聲"><a href="#第二節尾聲" class="headerlink" title="第二節尾聲"></a>第二節尾聲</h2><p>本節的內容已差不多結束。</p><p>在這一節中，我們學習了如何使用 Django Ninja 處理 HTTP 請求，並介紹了 Schema 的基本用法。</p><p>Schema 的用法與變化還很多，這裡只是「牛刀小試」而已。在第三節「HTTP 回應」中，你將看到更多關於 Schema 的設定。</p><p>進入下一節之前，我們先進行中場休息——和<strong>一些準備</strong>。</p><hr><h2 id="中場休息與準備"><a href="#中場休息與準備" class="headerlink" title="中場休息與準備"></a>中場休息與準備</h2><p>下一節，我們要讓專案的 API <strong>真正運作起來</strong>，還記得前面提到為何目前無法使用嗎？</p><ol><li>沒有 db 資料。</li><li>沒有建立 Schema。</li></ol><p>我們已經學到怎麼使用 Schema 了——雖然<strong>還不全面</strong>。那「db 資料」問題也需要獲得解決。</p><h3 id="Django-Fixtures"><a href="#Django-Fixtures" class="headerlink" title="Django Fixtures"></a>Django Fixtures</h3><p>我們固然可以透過呼叫 POST API 去<strong>手動新增</strong>用戶與文章資料，但太麻煩了！更別說，專案目前<strong>還沒有</strong>「新增使用者」這個 API。</p><p>所以，不用麻煩了。</p><p>我們直接透過 <a href="https://docs.djangoproject.com/en/5.1/topics/db/fixtures/">Django fixtures</a> 來匯入由我預先定義好的<strong>假資料</strong>。</p><p>有關 Django fixtures 的介紹，可參考文章〈<a href="https://blog.kyomind.tw/django-fixtures/">用 Django Fixture 匯入與導出資料</a>〉。</p><p>在下一篇<code>13-response</code>分支進度底下，你已經可以看到我<strong>導出</strong>的 fixtures 資料：</p><ol><li><code>users.json</code>。</li><li><code>posts.json</code>。</li></ol><p>想要使用它們，直接<strong>依序匯入</strong>即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py loaddata users.json</span><br><span class="line">python manage.py loaddata posts.json</span><br></pre></td></tr></table></figure><p>一定要<strong>先匯入</strong> users，否則文章沒有作者會<strong>關聯失敗</strong>。</p><p>匯入完成後，你會獲得 2 個使用者——Alice 和 Bob，還有他們各發表的 30 篇文章。</p><p><img src="https://i.imgur.com/dHCBf4T.png"></p><p>呃，夾雜了第一篇我的測試文章，請多包涵😅</p><p>成功匯入後，我們就可以繼續了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;經過前幾篇的介紹，我們已經學習了如何處理路徑與查詢參數。但在現實世界中，我們往往還需要處理&lt;strong&gt;更複雜的請求資料&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如用戶提交的表單、上傳的檔案等等。對於 API 而言，最常見的就是 JSON 格式的 &lt;strong&gt;request body&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這一篇將探討 Django Ninja 如何處理 request body，並介紹如何透過 Schema 來定義與驗證資料。&lt;/p&gt;
&lt;p&gt;本文所有的程式碼變動，可參考&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial/pull/4&quot;&gt;這個 PR&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、什麼是-Request-Body？&quot;&gt;&lt;a href=&quot;#一、什麼是-Request-Body？&quot; class=&quot;headerlink&quot; title=&quot;一、什麼是 Request Body？&quot;&gt;&lt;/a&gt;一、什麼是 Request Body？&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Request body&lt;/strong&gt; 指的是隨著 HTTP 請求一同傳送的資料，通常用於&lt;code&gt;POST&lt;/code&gt;、&lt;code&gt;PUT&lt;/code&gt;等&lt;strong&gt;需要建立或更新「資源」的請求。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這些資料不會出現在 URL 中，而是以 JSON 或其他格式（如 XML、form-data）作為請求的主體。&lt;/p&gt;
&lt;p&gt;例如，當用戶要發表一篇新文章時，可能會傳送以下 JSON 格式的 request body：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;我的第一篇文章&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;這是我在忍者論壇的第一篇文章，希望大家喜歡！&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;這個 request body 包含了&lt;code&gt;title&lt;/code&gt;和&lt;code&gt;content&lt;/code&gt;兩個欄位，Django Ninja 將協助我們處理這些資料並進行驗證。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="Pydantic" scheme="https://blog.kyomind.tw/tags/Pydantic/"/>
    
  </entry>
  
</feed>
