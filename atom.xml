<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/leaf.svg</icon>
  <subtitle>我的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2024-09-10T04:41:49.969Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>Kyo Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>38，Kyo 待業中！細數我過去的待業時光（上）</title>
    <link href="https://blog.kyomind.tw/weekly-review-38/"/>
    <id>https://blog.kyomind.tw/weekly-review-38/</id>
    <published>2024-09-09T14:23:16.000Z</published>
    <updated>2024-09-10T04:41:49.969Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>如標題所言，我又又待業了！</p><p>上一份工作做到 8 月 31 日止，從本月開始，我的職涯再度進入「無業遊民」階段。</p><p>這也是為什麼 9 月起我有更多時間準備鐵人賽XD</p><p>我在〈<a href="https://www.threads.net/@kyomind.tw/post/C9Kkuh1ykIc">Day 4：4 年 8 個月</a>〉中曾說到：</p><blockquote><p>4 年 8 個月，這是我在大學畢業、當兵退伍後，作為「無業遊民」的總時長！</p></blockquote><p>沒錯，而這些時間又可以分成兩個階段。</p><p>如今再度待業，或許是回顧過往的好時機。讓我們來聊聊這兩個階段：當時在做什麼，以及現在的我如何會看待那時的自己。</p><p>不過篇幅有限， 今天先講第一階段：準備書記官考試。</p><span id="more"></span><hr><h2 id="第一次應試：不知人生為何物"><a href="#第一次應試：不知人生為何物" class="headerlink" title="第一次應試：不知人生為何物"></a>第一次應試：不知人生為何物</h2><p>第一階段是 2009 年 7 月至 2011 年 12 月，共 2 年 6 個月，主要準備書記官（司法特考）。</p><p>我大學很混，雖然很少被當，但整體的法律實力實在不怎麼樣。而法律是一個需要投入龐大學習時間的學科——無人可以例外。所以沒能在畢業之前就考上任何國家考試。</p><p>和很多人一樣，我也是等到畢業、退伍之後才開始真正的法律之路。</p><p>必須坦承，剛退伍時，我對法律的興趣其實非常有限。為何要考試？只不過是因為沒有別的選擇而已——我只會這個！</p><p>6 月底才退伍，來不及準備當年的考試（在每年 8 月）。直到隔年才第一次應試。</p><p>第一次考試就是抱持上述「不知道法律對我意義為何」的心情去準備，結果可想而知。我還記得名次是 1142 名。</p><h2 id="第二次應試：做該做的事"><a href="#第二次應試：做該做的事" class="headerlink" title="第二次應試：做該做的事"></a>第二次應試：做該做的事</h2><p>這是我最後的機會，若沒考上，只能乖乖去找工作。</p><p>法律系畢業卻沒通過國考，工作選擇不多：要麼去事務所當助理，要麼去公司當法務。否則，就只能去一般公司做著跟法律無關的上班族工作。</p><p>上述這些都是當下的我所難以想像的，也不想面對，內心的不安感實在太強了。</p><p>相比之下，考試和考上的路徑則是相對確定的。因此，儘管我還不確定是否喜歡法律，還是決定靜下心來重新準備考試。</p><p>這是當時的我唯一能做的事，也是我該做的事。</p><p>第二次的結果就好多了，我總算暫時脫離了考試的枷鎖。</p><hr><h2 id="努力過才會喜歡"><a href="#努力過才會喜歡" class="headerlink" title="努力過才會喜歡"></a>努力過才會喜歡</h2><p>兩年多的準備時光，確實讓我的法律素養提高不少。</p><p>毫不誇張的說，我 90% 的法律實力，都是在大學畢業後自學養成的。</p><p>但其中更重要的是，你對一件事、一門學問的熱愛，<strong>可能需要經過一定的努力與嘗試，才會慢慢地顯現出來</strong>。</p><p>在那之後，我對法律的好感度確實提高了不少。</p><p>我想，<strong>滿足感</strong>都藏在那些<strong>複雜的挑戰</strong>裡。蜻蜓點水式的了解，很難真的登堂入室。</p><hr><h2 id="長期準備考試的挑戰"><a href="#長期準備考試的挑戰" class="headerlink" title="長期準備考試的挑戰"></a>長期準備考試的挑戰</h2><p>長期準備考試最困難的部分，還是在心理層面上保持鬥志，這真的不容易。</p><p>就像走在巨大的沙漠中，每時每刻的風景都非常類似，有時你甚至不知道自己是否真的在前進。</p><p>準備考試，雖然多多少少能感覺到自己有在進步，但重複的生活，不免讓人感到厭煩。因此，我遇到過很多次低潮。</p><p>低潮是可怕的東西，一開始可能只是一天、兩天。一旦出現，就很容易蔓延開來，最終你可能會連續好幾週都不想讀書。</p><p>第二年考試，為了減少這種情況，我設計一套制度來督促自己。</p><p>儘管如此，就在考前兩個月，我又陷入了一次低潮，足足打了三個星期的電動！</p><p>好險，現在想想真的好險。</p><hr><p>總之，第一階段待業就這樣落幕了， 我也展開我的第一階段職涯——公務員。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如標題所言，我又又待業了！&lt;/p&gt;
&lt;p&gt;上一份工作做到 8 月 31 日止，從本月開始，我的職涯再度進入「無業遊民」階段。&lt;/p&gt;
&lt;p&gt;這也是為什麼 9 月起我有更多時間準備鐵人賽XD&lt;/p&gt;
&lt;p&gt;我在〈&lt;a href=&quot;https://www.threads.net/@kyomind.tw/post/C9Kkuh1ykIc&quot;&gt;Day 4：4 年 8 個月&lt;/a&gt;〉中曾說到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4 年 8 個月，這是我在大學畢業、當兵退伍後，作為「無業遊民」的總時長！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沒錯，而這些時間又可以分成兩個階段。&lt;/p&gt;
&lt;p&gt;如今再度待業，或許是回顧過往的好時機。讓我們來聊聊這兩個階段：當時在做什麼，以及現在的我如何會看待那時的自己。&lt;/p&gt;
&lt;p&gt;不過篇幅有限， 今天先講第一階段：準備書記官考試。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="待業" scheme="https://blog.kyomind.tw/tags/%E5%BE%85%E6%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>AI 讓寫作變輕鬆了？我可不這麼認為</title>
    <link href="https://blog.kyomind.tw/myth-of-ai-writing-efficiency/"/>
    <id>https://blog.kyomind.tw/myth-of-ai-writing-efficiency/</id>
    <published>2024-09-05T14:49:20.000Z</published>
    <updated>2024-09-06T08:32:29.169Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/YmlPRz1.jpg" alt="by Sam Chivers"><span class="cap">by Sam Chivers</span></p><blockquote><p>相關文章：<a href="/weekly-review-35/">35，開始備戰 2024 iThome 鐵人賽</a></p></blockquote><p>從九月初開始，我投入了更多心力在今年的鐵人賽創作上。</p><p>這一次寫文章，畢竟是要參加比賽，還要連續發文 30 天，寫作量巨大。相比以往三天曬網、兩天捕魚的獨立部落格寫作，完全不可同日而語。</p><p>實際的感受是：更辛苦，而且<strong>讓人很想逃避XD</strong>——因為你的文字會被評審！</p><p>加上我又心心念念想要拿獎，以至於才開始沒多久，就有一種力不從心的感覺。<strong>我深刻感受到創作過程中帶來的壓力與精神消耗。</strong></p><p>這讓我不禁擔憂：「真的能在開賽日前囤完 20 篇文章嗎？」</p><p>不行，<strong>我需要助手！</strong></p><span id="more"></span><hr><h2 id="重啟-Notion-AI"><a href="#重啟-Notion-AI" class="headerlink" title="重啟 Notion AI"></a>重啟 Notion AI</h2><p>想到「寫作助手」會想到什麼？當然是 AI 囉！</p><p>於是我拿出了信用卡，刷了一個月份的 Notion AI。因為我的草稿都在 Notion 上，所以這個選擇是再合適不過。</p><p>一年多前我曾經寫過這篇〈<a href="https://blog.kyomind.tw/weekly-review-15/">15，付費一個月後，我還是退訂了 Notion AI</a>〉。事實上，中間我又付費過一次 Notion AI，但還是沒有續約。</p><p>所以這次算<strong>第三次</strong>使用了，希望它可以分擔一點工作。</p><p><strong>感覺如何？——確實比前兩次的使用體驗都來得好！</strong>這部分的提升，我認為主要來自於 prompt 與 UI&#x2F;UX 的加強，而不是背後的 LLM 變得多聰明了。</p><p>總之，Notion AI 有比較好用了，讓我有點考慮在完賽之後，仍繼續付費使用它。甚至考慮再為它寫一篇文章☺️</p><hr><h2 id="AI-讓寫作變輕鬆了嗎？"><a href="#AI-讓寫作變輕鬆了嗎？" class="headerlink" title="AI 讓寫作變輕鬆了嗎？"></a>AI 讓寫作變輕鬆了嗎？</h2><blockquote><p>那麼，Notion AI 讓我的寫作過程變得更輕鬆了嗎？</p></blockquote><p><strong>這取決於你如何看待寫作。</strong></p><p>如果只是想把文章大致寫完、語意通順，那麼我認為 AI 確實讓寫作變得更輕鬆了——甚至可以說「輕鬆許多」。</p><p>你再也不需要再去看一些奇怪的書，教你怎麼在 15 分鐘內寫出 1000 字的爆紅文章。畢竟有了 AI，15 分鐘都夠你寫一本書了！</p><p>但是，你我都心知肚明，<strong>這種文字往往缺乏足夠的吸引力——或說「個性」</strong>。畢竟人人都能透過 AI 大量產出這類內容。</p><p>可以說，對我而言，有了 AI 輔助，<strong>部分</strong>寫作環節確實變輕鬆了——<strong>但整體沒有，因為要做的事更多了。</strong></p><hr><h2 id="AI-輔助寫作，人類的角色轉換"><a href="#AI-輔助寫作，人類的角色轉換" class="headerlink" title="AI 輔助寫作，人類的角色轉換"></a>AI 輔助寫作，人類的角色轉換</h2><p>我覺得「整體」沒有變得更輕鬆，是因為下列的「<strong>角色轉換</strong>」緣故，讓我娓娓道來。</p><h3 id="沒有-AI-的時代"><a href="#沒有-AI-的時代" class="headerlink" title="沒有 AI 的時代"></a>沒有 AI 的時代</h3><p>在沒有 AI 的時代，作為文字創作者，我們主要的<strong>角色分配</strong>大概是 10 分作者、0 分編輯（這裡指的是比例）——寫就對了！</p><p>對自己的內容品質比較有要求的作者，則可能是 9 分作者、1 分編輯，或 8 分作者、2 分編輯。</p><p>我屬於<strong>吹毛求疵</strong>的人（真的不是很必要😂），大概可以來到 7 分作者、3 分編輯。</p><p>我在發文前後會<strong>經過幾次全文編輯</strong>。搭捷運時，也會用手機看自己的文章，找找錯誤、文句不夠通順之處，<strong>先截圖，然後回家修改。</strong></p><p>極限差不多就這樣了！ 沒有人喜歡當編輯，就像沒有人喜歡寫單元測試——因為真的有點無聊。<strong>誰不想要大刀闊斧地創作呢？</strong>😎</p><h3 id="AI-輔助時代"><a href="#AI-輔助時代" class="headerlink" title="AI 輔助時代"></a>AI 輔助時代</h3><p>有了 AI 以後（無論是 Notion AI 或 ChatGPT），情況大大不同。</p><p>為了善用 AI 的力量，我發現自己<strong>變成了 5 分作者、5 分編輯</strong>，而且<strong>經常在兩種身分間游移互換</strong>：一下子自己寫，讓 AI 看；一下子要 AI 寫、我來看。</p><p><strong>AI 在某些地方確實比我寫得快又好</strong>，比如請它介紹一下 <a href="https://django-ninja.dev/">Django Ninja</a> 的特色， 這類內容相對制式、創意的成分較少，全都自己寫，那該多辛苦？</p><h3 id="一人分飾兩角"><a href="#一人分飾兩角" class="headerlink" title="一人分飾兩角"></a>一人分飾兩角</h3><p>它寫完後，你又得化身編輯看看結果合不合意。不行就得再修。自己寫的東西不滿意，再請它當編輯，給出改善意見。<strong>如此反覆，直到大功告成。</strong></p><p>這種寫作體驗<strong>很難說好或不好</strong>——但確實變得<strong>更複雜</strong>了。</p><p>就像使用 <a href="/github-copilot/">GitHub Copilot</a>（或時下流行的 <a href="/cursor/">Cursor</a>）寫程式，我們常常需要中途停下來過問、請教 AI，同時又要當它的監督者。</p><p>如果目標只是「寫完」，那花不了多少時間。<strong>但如果目標是「寫好」，則其中的「戲」可比以前要多得多。</strong></p><hr><h2 id="小結：當個人愈來愈難了"><a href="#小結：當個人愈來愈難了" class="headerlink" title="小結：當個人愈來愈難了"></a>小結：當個人愈來愈難了</h2><p>AI 的普及，讓我們不僅僅是創作者，也成了編輯，甚至是策劃者（叫 AI 幹活）。<strong>這種角色的轉換增加了工作量和難度，但也讓我們對內容的掌控更為精細。</strong></p><p>創作不再是單一的過程，而是成了<strong>一場「與 AI 的持續對談」</strong>。</p><p>高度自我追求的創作者，必須不斷反思、修正、和 AI 討論，這讓創作變得<strong>更具挑戰性</strong>——當然，也<strong>更有趣。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YmlPRz1.jpg&quot; alt=&quot;by Sam Chivers&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相關文章：&lt;a href=&quot;/weekly-review-35/&quot;&gt;35，開始備戰 2024 iThome 鐵人賽&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;從九月初開始，我投入了更多心力在今年的鐵人賽創作上。&lt;/p&gt;
&lt;p&gt;這一次寫文章，畢竟是要參加比賽，還要連續發文 30 天，寫作量巨大。相比以往三天曬網、兩天捕魚的獨立部落格寫作，完全不可同日而語。&lt;/p&gt;
&lt;p&gt;實際的感受是：更辛苦，而且&lt;strong&gt;讓人很想逃避XD&lt;/strong&gt;——因為你的文字會被評審！&lt;/p&gt;
&lt;p&gt;加上我又心心念念想要拿獎，以至於才開始沒多久，就有一種力不從心的感覺。&lt;strong&gt;我深刻感受到創作過程中帶來的壓力與精神消耗。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這讓我不禁擔憂：「真的能在開賽日前囤完 20 篇文章嗎？」&lt;/p&gt;
&lt;p&gt;不行，&lt;strong&gt;我需要助手！&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/YmlPRz1.jpg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Notion AI" scheme="https://blog.kyomind.tw/tags/Notion-AI/"/>
    
  </entry>
  
  <entry>
    <title>Django 專案加入 Mypy 指南</title>
    <link href="https://blog.kyomind.tw/mypy-django-guide/"/>
    <id>https://blog.kyomind.tw/mypy-django-guide/</id>
    <published>2024-09-03T00:52:58.000Z</published>
    <updated>2024-09-09T15:18:26.364Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/lyxUZv1.png" alt="Let&#39;s Django！"><span class="cap">Let&#39;s Django！</span></p><p>這是 <a href="/tags/Django-Tutorial/"><strong>Django Tutorial</strong></a> 的第 10 篇。</p><p>範例程式碼可參考我的 <a href="https://github.com/kyomind/Django-Tutorial"><strong>GitHub 專案</strong></a>。</p><p>本文相關的程式碼改動，都集中在這個 <a href="https://github.com/kyomind/Django-Tutorial/pull/5"><strong>PR</strong></a>。</p><hr><p>在〈<a href="/robust-python-01/">《強健的 Python》筆記（一）Type Hints 的成本與挑戰</a>〉一文中，我們探討了 <a href="https://docs.python.org/3/library/typing.html">type hints</a>（type annotation）對 Python 專案開發的重要性，並在〈<a href="/mypy/">Python type checker：Mypy 介紹</a>〉中介紹了<strong>目前最常用的 Python 型別檢查器——Mypy。</strong></p><p>我想，<strong>是時候為你的 Python 專案加入型別檢查了。</strong></p><p>本文介紹如何在 Django 專案中整合 Mypy，並提供一些實際例子來幫助你快速上手。透過這些步驟，你將能夠更好地利用型別檢查來提高程式碼的穩定性和可維護性。</p><h3 id="系列：Mypy-三部曲"><a href="#系列：Mypy-三部曲" class="headerlink" title="系列：Mypy 三部曲"></a>系列：Mypy 三部曲</h3><blockquote><ol><li><a href="/robust-python-01/">《強健的 Python》筆記（一）Type Hints 的成本與挑戰</a></li><li><a href="/mypy/">Python type checker：Mypy 介紹</a></li><li><strong>Django 專案加入 Mypy 指南</strong></li></ol></blockquote><span id="more"></span><hr><h2 id="有多少-Django-專案使用-Type-Hints？"><a href="#有多少-Django-專案使用-Type-Hints？" class="headerlink" title="有多少 Django 專案使用 Type Hints？"></a>有多少 Django 專案使用 Type Hints？</h2><p>你可能覺得 type hints 還很遙遠，甚至是<strong>比單元測試更加稀有的存在</strong>。畢竟在 Python 中，型別是完全「<strong>可選</strong>」的——就像測試一樣😆</p><p>然而，隨著社群的成長和工具的進步，越來越多 Django 開發者開始採用 type hints。</p><p>那具體是多少呢？</p><p>依照 JetBrains 對 Django 開發者的<a href="https://lp.jetbrains.com/django-developer-survey-2023/">這份調查</a>，竟然已有<a href="https://lp.jetbrains.com/django-developer-survey-2023/#syntax-and-documentation">一半</a>了！（出乎我的意料）</p><p><img src="https://i.imgur.com/QLQ5R8E.png" alt="Django Developers Survey 2023"><span class="cap">Django Developers Survey 2023</span></p><p>所以，為 Django 專案加入 type hints，已然是大勢所趨，今天就一起來實踐吧！</p><p>要為 Python 程式碼加上 type hints，<strong>關鍵在於 static type checker，也就是靜態型別檢查器</strong>。而 Mypy 正是其中最受歡迎的選擇。</p><p>Django 專案整合 Mypy，大概有以下幾步：</p><ol><li>建立並修改 Mypy 設定檔。</li><li>安裝 django-stubs。</li><li>安裝 VS Code Mypy 套件。</li><li>pre-commit 整合（與其中的問題）。</li></ol><p>讓我們一一解說。</p><hr><h2 id="一、建立-Mypy-設定檔"><a href="#一、建立-Mypy-設定檔" class="headerlink" title="一、建立 Mypy 設定檔"></a>一、建立 Mypy 設定檔</h2><p>Mypy 支援<a href="https://mypy.readthedocs.io/en/stable/config_file.html">好幾種</a>常見的設定檔。</p><p>最常見的是<code>mypy.ini</code>，它同時也支援<code>pyproject.toml</code>，而且很多大型開源專案都會採用後者，比如 <a href="https://github.com/fastapi/fastapi/blob/master/pyproject.toml#L123">FastAPI</a>。</p><p>上述兩種最推薦，這裡我們先採用<code>mypy.ini</code>。</p><p>不建立設定檔，也能使用 Mypy。設定檔主要是讓你的型別檢查更加<strong>客製化。</strong>尤其用來排除那些你不需要的規則。</p><h3 id="Django-特殊設定"><a href="#Django-特殊設定" class="headerlink" title="Django 特殊設定"></a>Django 特殊設定</h3><p>但對於 Django 專案來說，設定檔則是「必要」，因為有幾處必須定義——否則 Mypy 會跳出一大堆錯誤XD。</p><p>這是因為 Django 有很多<strong>動態屬性（執行時才會確定內容）</strong>，少了這些設定，Mypy 很可能無法正確檢查。</p><p>我們看一下設定內容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mypy]</span></span><br><span class="line"><span class="comment"># 排除所有 migrations 資料夾和 manage.py</span></span><br><span class="line"><span class="attr">exclude</span> = ^(migrations|.*manage\.py)$</span><br><span class="line"></span><br><span class="line"><span class="attr">warn_return_any</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disallow_untyped_calls</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">allow_redefinition</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">check_untyped_defs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ignore_missing_imports</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">incremental</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">strict_optional</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">show_traceback</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">warn_unused_ignores</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">warn_redundant_casts</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">warn_unused_configs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">warn_unreachable</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disallow_untyped_defs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disallow_incomplete_defs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disable_error_code</span> = empty-body</span><br><span class="line"><span class="attr">force_uppercase_builtins</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">force_union_syntax</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span> =</span><br><span class="line">    mypy_django_plugin.main</span><br><span class="line"></span><br><span class="line"><span class="section">[mypy.plugins.django-stubs]</span></span><br><span class="line"><span class="attr">django_settings_module</span> = DjangoTutorial.settings</span><br></pre></td></tr></table></figure><p>對 Django 專案來說，其中重點有三：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exclude = ^(migrations|.*manage\.py)$</span><br><span class="line">...</span><br><span class="line">plugins =</span><br><span class="line">    mypy_django_plugin.main</span><br><span class="line"></span><br><span class="line">[mypy.plugins.django-stubs]</span><br><span class="line">django_settings_module = &lt;你的 Django 專案名稱&gt;.settings</span><br></pre></td></tr></table></figure><p><code>exclude</code>中把 db 遷移檔資料夾和 Django 自帶的<code>manage.py</code>排除檢查，這是很常見的設定，強烈建議加上。</p><p><code>plugins</code>一定要有<code>mypy_django_plugin.main</code>（它的值可以是多個）。</p><p><code>django_settings_module</code>設定也是必要的，<strong>要使用你自己的 Django 專案名稱。</strong></p><p>其實，上述設定大多是我從 django-stubs 的 <a href="https://github.com/typeddjango/django-stubs/blob/master/mypy.ini">mypy.ini</a> 照搬過來的。</p><p>而且它在註解有聲明，其餘專案也可以適用：</p><blockquote><p>Regular configuration file (<strong>can be used as base in other projects</strong>, runs in CI)</p></blockquote><p>大部分設定我都直接套用了，以免 Mypy 的檢查太過寬鬆。如果想進行調整，則需要了解 Mypy 的設定細節，這部分請參考<a href="https://mypy.readthedocs.io/en/stable/config_file.html">官方文件</a>。</p><hr><h2 id="二、安裝-django-stubs"><a href="#二、安裝-django-stubs" class="headerlink" title="二、安裝 django-stubs"></a>二、安裝 django-stubs</h2><p>Type hints 是在 Python 3.5 才引入的功能，而在此之前誕生的套件和框架，<strong>自然不會有 type hints。</strong></p><p>少部分的套件可能會在後期加入 type hints，比如 Flask，在 2.0 版本加入了極大量的 type hints，但大多數套件仍需要額外的 stubs 檔來補充。</p><h3 id="什麼是-Stubs？"><a href="#什麼是-Stubs？" class="headerlink" title="什麼是 Stubs？"></a>什麼是 Stubs？</h3><p>所謂的 stubs（不是測試的那種），是指用來補充那些沒有 type hints 的模組或框架的<strong>檔案</strong>。它們通常是 <code>.pyi</code> 格式，類似於<strong>介面定義檔案</strong>，提供了函式、類別、方法等的<strong>型別資訊</strong>——但不會包含實際邏輯。</p><p>舉例而言，這是 Django ORM QuerySet 方法中的<code>bulk_create</code>的 stubs：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bulk_create</span>(<span class="params"></span></span><br><span class="line"><span class="params">   self,</span></span><br><span class="line"><span class="params">   objs: Iterable[_T],</span></span><br><span class="line"><span class="params">   batch_size: <span class="built_in">int</span> | <span class="literal">None</span> = ...,</span></span><br><span class="line"><span class="params">   ignore_conflicts: <span class="built_in">bool</span> = ...,</span></span><br><span class="line"><span class="params">   update_conflicts: <span class="built_in">bool</span> | <span class="literal">None</span> = ...,</span></span><br><span class="line"><span class="params">   update_fields: <span class="type">Sequence</span>[<span class="built_in">str</span>] | <span class="literal">None</span> = ...,</span></span><br><span class="line"><span class="params">   unique_fields: <span class="type">Sequence</span>[<span class="built_in">str</span>] | <span class="literal">None</span> = ...,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">list</span>[_T]: ...</span><br></pre></td></tr></table></figure><p><a href="https://github.com/typeddjango/django-stubs/tree/master">django-stubs</a> 就是為 Django 提供的 type hints 補充包，使用 <code>django-stubs</code> 可以讓 Django 在不修改原始程式碼的情況下，享受到 type hints 的優勢。</p><hr><h2 id="三、VS-Code-Mypy-套件整合"><a href="#三、VS-Code-Mypy-套件整合" class="headerlink" title="三、VS Code Mypy 套件整合"></a>三、VS Code Mypy 套件整合</h2><p>如果你使用 VS Code IDE，那 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker">Mypy 套件</a>肯定是必須的，它能讓你在開發的當下就得知 Mypy 的型別錯誤提示。</p><p>該套件也會自動讀取專案根目錄下的 Mypy 設定檔，如果有設定檔，建議就<strong>不要</strong>在 VS Code 的 <code>settings.json</code>再額外<a href="https://github.com/microsoft/vscode-mypy?tab=readme-ov-file#settings">設定 Mypy 套件</a>的行為，以免衝突。</p><p>和其它<strong>開發類套件</strong>（如 linter、formatter）相同，該套件已自帶了一個 Mypy 版本，但如果你的虛擬環境中有安裝 Mypy，則會優先使用虛擬環境中的版本。</p><p>VS Code 的 Mypy 套件整合很簡單，卻非常實用。強烈建議你安裝。</p><hr><h2 id="四、pre-commit（與相關問題）"><a href="#四、pre-commit（與相關問題）" class="headerlink" title="四、pre-commit（與相關問題）"></a>四、pre-commit（與相關問題）</h2><p>Mypy 有 pre-commit 的 <a href="https://github.com/pre-commit/mirrors-mypy">hook</a>，但存在一些整合問題。</p><p>我遇到的問題是，Mypy hook 雖然可以正常執行，但<strong>無法正確讀取專案的 Mypy 設定檔</strong>。也就是說，<strong>它只會照「預設模式」來執行檢查</strong>，這就不太實用了。</p><p>即使在 pre-commit 的 hook 設定檔中加入下列參數也沒用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hooks:</span><br><span class="line">  - <span class="built_in">id</span>: mypy</span><br><span class="line">    args: [--config-file=mypy.ini]</span><br></pre></td></tr></table></figure><p>我後來還是找不到原因。我們知道，pre-commit 每一個 hook 都擁有自己獨立的執行虛擬環境——顯然這個環境還不健全！</p><blockquote><p><code>2024/09/09</code>更新：Mypy 的 pre-commit 設定確實相對複雜，網友 <a href="https://github.com/geminixiang">geminixiang</a> 提供了一個不錯的做法，不需要使用 local hook，而我也依此修改了一個自己的版本。詳情請見下方留言區。</p></blockquote><h3 id="本地-Hook"><a href="#本地-Hook" class="headerlink" title="本地 Hook"></a>本地 Hook</h3><p>一個釜底抽薪之計，就是建立 Mypy 的 本地 pre-commit hook。</p><p>不過做法上較為複雜，而且可能在不同開發者之間產生環境差異，我感覺也不是特別好的辦法。</p><p>有興趣的人可以參考這篇〈<a href="https://jaredkhan.com/blog/mypy-pre-commit">Running Mypy in Pre-commit</a>〉，裡面有詳細的步驟。</p><p>基於上述理由，本次範例專案的程式碼改動，<strong>沒有</strong>加入 Mypy pre-commit 設定。</p><p>我想最好的辦法，還是在 CI 階段執行 Mypy。這個我們另篇文章再談吧！</p><hr><h2 id="結語：Type-Hints-與未來"><a href="#結語：Type-Hints-與未來" class="headerlink" title="結語：Type Hints 與未來"></a>結語：Type Hints 與未來</h2><p>Mypy 與 Django 的整合，雖然需要花一些心思，但一旦完成，對於程式碼的穩定性與可維護性都會帶來顯著提升。</p><p>希望透過這篇文章，你已經掌握了如何為 Django 專案加入 Mypy 的基本步驟，並了解了在整合過程中可能遇到的挑戰。</p><p>期許未來所有 Python 專案使用 type hints 的比例，會愈來愈高，這樣我們就能更好地利用 Python 的動態特性，同時又享受到靜態型別語言的優勢。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lyxUZv1.png&quot; alt=&quot;Let&amp;#39;s Django！&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是 &lt;a href=&quot;/tags/Django-Tutorial/&quot;&gt;&lt;strong&gt;Django Tutorial&lt;/strong&gt;&lt;/a&gt; 的第 10 篇。&lt;/p&gt;
&lt;p&gt;範例程式碼可參考我的 &lt;a href=&quot;https://github.com/kyomind/Django-Tutorial&quot;&gt;&lt;strong&gt;GitHub 專案&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文相關的程式碼改動，都集中在這個 &lt;a href=&quot;https://github.com/kyomind/Django-Tutorial/pull/5&quot;&gt;&lt;strong&gt;PR&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在〈&lt;a href=&quot;/robust-python-01/&quot;&gt;《強健的 Python》筆記（一）Type Hints 的成本與挑戰&lt;/a&gt;〉一文中，我們探討了 &lt;a href=&quot;https://docs.python.org/3/library/typing.html&quot;&gt;type hints&lt;/a&gt;（type annotation）對 Python 專案開發的重要性，並在〈&lt;a href=&quot;/mypy/&quot;&gt;Python type checker：Mypy 介紹&lt;/a&gt;〉中介紹了&lt;strong&gt;目前最常用的 Python 型別檢查器——Mypy。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我想，&lt;strong&gt;是時候為你的 Python 專案加入型別檢查了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文介紹如何在 Django 專案中整合 Mypy，並提供一些實際例子來幫助你快速上手。透過這些步驟，你將能夠更好地利用型別檢查來提高程式碼的穩定性和可維護性。&lt;/p&gt;
&lt;h3 id=&quot;系列：Mypy-三部曲&quot;&gt;&lt;a href=&quot;#系列：Mypy-三部曲&quot; class=&quot;headerlink&quot; title=&quot;系列：Mypy 三部曲&quot;&gt;&lt;/a&gt;系列：Mypy 三部曲&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/robust-python-01/&quot;&gt;《強健的 Python》筆記（一）Type Hints 的成本與挑戰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mypy/&quot;&gt;Python type checker：Mypy 介紹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django 專案加入 Mypy 指南&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    <content src="https://i.imgur.com/lyxUZv1.png" type="image"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/categories/Django/"/>
    
    
    <category term="Python" scheme="https://blog.kyomind.tw/tags/Python/"/>
    
    <category term="Django Tutorial" scheme="https://blog.kyomind.tw/tags/Django-Tutorial/"/>
    
    <category term="Mypy" scheme="https://blog.kyomind.tw/tags/Mypy/"/>
    
    <category term="Type Hints" scheme="https://blog.kyomind.tw/tags/Type-Hints/"/>
    
  </entry>
  
  <entry>
    <title>37，加入健身房，專注 Zone 2</title>
    <link href="https://blog.kyomind.tw/weekly-review-37/"/>
    <id>https://blog.kyomind.tw/weekly-review-37/</id>
    <published>2024-08-28T06:55:48.000Z</published>
    <updated>2024-08-29T23:46:58.380Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>就在今天，我加入了住處附近的健身房會員，正式成為一個可以在健身房打卡的人。</p><p>事實上，我本來就有配合的健身教練（在別的地方），所以報名附近健身房並不是為了重訓，而是<strong>為了可以更常做有氧運動。</strong></p><p>這裡的有氧運動指的不是跑步。除了我實在不愛跑步，右膝的不平衡也讓我不敢讓它承受更大的衝擊力。</p><p>所以絕大部分時候，<strong>走路和健行</strong>才是我的首選——但現在不同了。</p><hr><p>今年 5 月做了年度例行體檢，沒想到偏瘦的我（當時 60 公斤，BMI 不到 20） ，體脂測出來竟然有 23% XD。報告直接給了我紅字！</p><p>難道這就是傳說中的<strong>「隱性肥胖」（Skinny Fat）</strong>嗎？ 我無法接受😂</p><h2 id="一週走-30-公里"><a href="#一週走-30-公里" class="headerlink" title="一週走 30 公里"></a>一週走 30 公里</h2><p>因此，在 6、7 月間，我增加了步行量，主要是平日晚餐後的走路，還有假日出遊。一週總距離落在 30-40 公里，總步數 7-10 萬步。</p><p>配合 4 月開始會不定期自煮中餐。這些改變讓我的體重進一步下降，現在只有 57 公斤左右。</p><p>瘦是瘦了，但這不是我主要的追求，我更關注的是體脂，而體脂還未臻理想。</p><p>畢竟上述運動， 強度有限，我需要尋找其他方法來改善。</p><p>經過一番查詢，我發現 Zone 2 訓練<strong>可能是一個好的選擇。</strong></p><span id="more"></span><hr><h2 id="Zone-2-介紹"><a href="#Zone-2-介紹" class="headerlink" title="Zone 2 介紹"></a>Zone 2 介紹</h2><p>Zone 2 訓練是一種<strong>中低強度的有氧運動</strong>，通常被定義為心率<strong>介於最大心率的 60% 到 70% 之間</strong>。</p><p>這種訓練方法<strong>可以有效提高身體的基礎代謝率和心肺功能，同時不會給身體帶來過大的壓力</strong>。對於想要提高整體健康水平和運動表現的人來說，Zone 2 是一個很不錯的選擇。</p><p>這兩年流行的超慢跑就是 Zone 2 的一種實踐。這種跑步方式強調以較慢的速度跑步，讓心率維持在 Zone 2 範圍內，從而達到最佳的脂肪燃燒效果。</p><h2 id="兩則-Zone-2-相關影片"><a href="#兩則-Zone-2-相關影片" class="headerlink" title="兩則 Zone 2 相關影片"></a>兩則 Zone 2 相關影片</h2><p>在運動方面， 遇事不決看修修。</p><p>我推薦下列這兩個跟 Zone 2 有關的影片：</p><ul><li><a href="https://youtu.be/yC5Hgm5tJ0U?si=UM1whqCkqbFz-rUr">一次弄懂 Zone 2 訓練、低心率、超慢跑，讓你提高燃脂效率又長壽</a></li><li><a href="https://youtu.be/KurzStE46vk?si=SWshms1VHsaiMnL4">運動科學專家：Zone 2 訓練怎麼做？你身上最重要的2個指標、減肥的熱量迷思｜【初日會客室】張修修</a></li></ul><p>看完之後，這樣的概念確實深得我心，我最喜歡這種<strong>中等強度</strong>的東西了。</p><p>肯定有人不認同，但我一直覺得，沒事不要追求極限——<strong>因為極限是不可持續的。</strong> 我喜歡持續不斷的小進步， 而非英雄般的大躍進。</p><p>（好吧，我承認，如果可以，誰不想當一回英雄呢XD）</p><p>總之，看完這些影片後，我內心更加篤定了。</p><hr><h2 id="一旦開始並持續，你已經贏過-80-的人"><a href="#一旦開始並持續，你已經贏過-80-的人" class="headerlink" title="一旦開始並持續，你已經贏過 80% 的人"></a>一旦開始並持續，你已經贏過 80% 的人</h2><p>上一段說，小進步就很不錯了，至少在運動方面，我認為這簡直是<strong>真理</strong>！</p><p>為什麼這麼說呢？</p><p>第二則影片中提到了政府提倡的「333」：</p><ul><li>每週運動 3 次</li><li>每次 30 分鐘</li><li>心率達到 130 以上</li></ul><blockquote><p>更具體的內容，可參考國民健康署的<a href="https://www.hpa.gov.tw/Pages/Detail.aspx?nodeid=333&pid=882">這個網頁</a>，內涵大同小異。</p></blockquote><p>張修修說，全台灣能做到 333 應該不到一半。</p><h3 id="不到一半？"><a href="#不到一半？" class="headerlink" title="不到一半？"></a>不到一半？</h3><p>我認為這個說法還是<strong>太含蓄了</strong>！仔細思考我身邊親朋好友，有可能持續達到 333 標準的人，基本上只有兩類：</p><ol><li>固定去健身房運動的人，</li><li>常常進行戶外活動（跑步、爬山、打球）的人。</li></ol><p>這樣的人多嗎？對我來說，屈指可數。當然這其中有「圈子」問題——我不是運動圈的人。</p><p>但我仍敢大膽妄論，真的達到 333，甚至能持續（養成習慣）的人，全台灣<strong>不是不到一半，而是低於兩成。</strong></p><p>換句話說，雖然 333 理論上是一個入門低標，但如果你能持續做到，你實際上已經贏過 80% 的人了。</p><hr><h2 id="小結：均衡與人生"><a href="#小結：均衡與人生" class="headerlink" title="小結：均衡與人生"></a>小結：均衡與人生</h2><p>有些事情，你得<strong>拼盡全力</strong>才能獲得， 比如在大公司升職加薪、<a href="https://medium.com/code-and-me/datalog-%E5%91%8A%E5%88%A5%E6%B3%95%E5%BE%8B-ccec58db9acb">律師國考</a>，或是在重要的比賽中名列前茅。</p><p>然而，還有另外一些事情， <strong>你根本不需要（也不應該）使出全力——只要六、七分力就夠了</strong>。它們更期望你在每一天、每一周、每個月，持續投入，穩步前進。</p><p>這個過程往往<strong>沒有太多激情</strong>，就像在健身房裡的 Zone 2 一樣，平淡無奇，卻能帶來長期的健康效益。</p><p>就這樣，一段時間過去，你可能會發現——你好像有點厲害🐸</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;就在今天，我加入了住處附近的健身房會員，正式成為一個可以在健身房打卡的人。&lt;/p&gt;
&lt;p&gt;事實上，我本來就有配合的健身教練（在別的地方），所以報名附近健身房並不是為了重訓，而是&lt;strong&gt;為了可以更常做有氧運動。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這裡的有氧運動指的不是跑步。除了我實在不愛跑步，右膝的不平衡也讓我不敢讓它承受更大的衝擊力。&lt;/p&gt;
&lt;p&gt;所以絕大部分時候，&lt;strong&gt;走路和健行&lt;/strong&gt;才是我的首選——但現在不同了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今年 5 月做了年度例行體檢，沒想到偏瘦的我（當時 60 公斤，BMI 不到 20） ，體脂測出來竟然有 23% XD。報告直接給了我紅字！&lt;/p&gt;
&lt;p&gt;難道這就是傳說中的&lt;strong&gt;「隱性肥胖」（Skinny Fat）&lt;/strong&gt;嗎？ 我無法接受😂&lt;/p&gt;
&lt;h2 id=&quot;一週走-30-公里&quot;&gt;&lt;a href=&quot;#一週走-30-公里&quot; class=&quot;headerlink&quot; title=&quot;一週走 30 公里&quot;&gt;&lt;/a&gt;一週走 30 公里&lt;/h2&gt;&lt;p&gt;因此，在 6、7 月間，我增加了步行量，主要是平日晚餐後的走路，還有假日出遊。一週總距離落在 30-40 公里，總步數 7-10 萬步。&lt;/p&gt;
&lt;p&gt;配合 4 月開始會不定期自煮中餐。這些改變讓我的體重進一步下降，現在只有 57 公斤左右。&lt;/p&gt;
&lt;p&gt;瘦是瘦了，但這不是我主要的追求，我更關注的是體脂，而體脂還未臻理想。&lt;/p&gt;
&lt;p&gt;畢竟上述運動， 強度有限，我需要尋找其他方法來改善。&lt;/p&gt;
&lt;p&gt;經過一番查詢，我發現 Zone 2 訓練&lt;strong&gt;可能是一個好的選擇。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="張修修" scheme="https://blog.kyomind.tw/tags/%E5%BC%B5%E4%BF%AE%E4%BF%AE/"/>
    
    <category term="健康" scheme="https://blog.kyomind.tw/tags/%E5%81%A5%E5%BA%B7/"/>
    
    <category term="Zone 2" scheme="https://blog.kyomind.tw/tags/Zone-2/"/>
    
  </entry>
  
  <entry>
    <title>36，預計創作「訂戶限定」內容</title>
    <link href="https://blog.kyomind.tw/weekly-review-36/"/>
    <id>https://blog.kyomind.tw/weekly-review-36/</id>
    <published>2024-08-23T13:14:23.000Z</published>
    <updated>2024-09-04T06:12:12.779Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>這幾天在思考，如何有效利用目前使用的電子報服務，讓訂戶感到更有價值。</p><p>畢竟一年也要付給供應商——<a href="https://buttondown.com/refer/kyo">Buttondown</a>——90 美元，要讓這筆錢花得值得。</p><blockquote><p>相關文章：<a href="/weekly-review-26/">26，改用 Buttondown 作為文章訂閱服務</a></p></blockquote><p>現階段我並不打算製作「付費訂閱」內容，只是想要為我的<strong>電子郵件訂閱者</strong>，嘗試寫作「<strong>專屬</strong>」內容——也就是「<a href="https://kyomind.notion.site/40b324f98ca94827921a6831b0d7a38f?v=4fa52cd0f4864800927c463d93078ee6">訂戶限定</a>」內容。</p><p>作為感謝這些讀者，願意留下自己 email 的小小心意。</p><p>對作者而言，有人願意訂閱，是一種<strong>不言而喻的信任。</strong></p><hr><p>「用戶郵件清單」無疑是現代行銷中的一大顯學，所以許多以「變現」為目標的網站、創作者，都會想方設法吸引用戶留下 email。</p><p>我雖然沒有要變現（至少短期內無此打算），但站在創作者的角度，文章一發布就有人看見，誰能拒絕這樣的誘惑呢？</p><p>所以很多網站會把<strong>訂閱電子報</strong>放在最顯眼的位置，甚至會有「訂閱即可獲得免費禮物」的活動。</p><p>這些我多少明白，但依舊沒有這麼做。</p><span id="more"></span><h2 id="為什麼我很少呼籲讀者訂閱我的電子報？"><a href="#為什麼我很少呼籲讀者訂閱我的電子報？" class="headerlink" title="為什麼我很少呼籲讀者訂閱我的電子報？"></a>為什麼我很少呼籲讀者訂閱我的電子報？</h2><p>如你所知，我目前的電子報，實際上只是<strong>部落格新文章的 RSS 轉發。</strong></p><p>然而，即使如此，其實還是可以多多呼籲讀者來訂閱，<strong>為什麼沒有積極做這件事？</strong></p><p>主要有兩個原因：</p><ol><li>我是<strong>雜食性創作者。</strong></li><li>我有 <strong>UI&#x2F;UX 潔癖。</strong></li></ol><h3 id="雜食性創作者"><a href="#雜食性創作者" class="headerlink" title="雜食性創作者"></a>雜食性創作者</h3><p>我是一個雜食性創作者，寫的主題相對多元，主要有幾大主軸：寫作、程式開發、筆記軟體、書評、生活感悟等等。</p><p>雖然「原則」上是技術部落客，但不滿足於只寫程式相關內容。</p><p>好處是，吸引的讀者群可以更廣泛，不會因為只寫技術文章而被限制。</p><p>不過這是把<strong>雙面刃</strong>，因為讀者缺乏一個<strong>非常明確的「期待」。</strong></p><p>換句話說，如果要呼籲讀者訂閱，我不知道該給讀者<strong>怎麼樣的承諾</strong>。我大概只能保證我會認真寫。</p><p>這是第一點，<strong>主題分散不利於吸引特定用戶</strong>。如果要搞自媒體，這種「不鮮明」應該是挺吃虧的。</p><h3 id="UI-UX-潔癖"><a href="#UI-UX-潔癖" class="headerlink" title="UI&#x2F;UX 潔癖"></a>UI&#x2F;UX 潔癖</h3><p>第二點，是我對於 UI&#x2F;UX 的潔癖。</p><p>這部分可參考「<a href="/weekly-review-12/#%E4%BA%8C%E3%80%81%E8%A8%82%E9%96%B1%E6%8C%89%E9%88%95%E6%94%BE%E5%93%AA%E5%A5%BD%EF%BC%9F">二、訂閱按鈕放哪好？</a>」，我有過較為詳細的討論。</p><p>我不喜歡網站上充斥「訂閱電子報」的按鈕，尤其是那種彈出式的——太煩了！</p><p>一直用彈出視窗來「提醒」我訂閱的網站，<strong>我會直接關掉。</strong></p><p>退而求其次的做法是，在每一篇文章最後，加上一個「訂閱電子報」的按鈕。讀者看完文章，如果覺得不錯，就可以順手訂閱。</p><p>但對我而言，這樣的「重複性」還是太高了！（尤其對於<strong>已經訂閱</strong>的讀者）</p><p>所以我最終選擇只放在右上角導覽列中一個連結——「<a href="/subscribe/">訂閱</a>」。</p><p>平心而論，<strong>我不認為這是一個很好的做法</strong>，它只是很簡潔，但往往不夠有效。</p><hr><h2 id="付費牆的兩難"><a href="#付費牆的兩難" class="headerlink" title="付費牆的兩難"></a>付費牆的兩難</h2><p>談到「訂戶限定」內容，就不得不提到「付費牆」。</p><p>雖然如前所述，我並不打算製作「付費訂閱」內容，但內容的「<strong>封閉性</strong>」，確實就像一道「<strong>牆</strong>」。</p><p>這構成一個<strong>常見的兩難</strong>：封閉內容有其<strong>特殊價值</strong>（比如最常見的<strong>收費</strong>），可是封閉內容<strong>無法讓更多人接觸</strong>，一定程度阻礙了創作者的影響力。</p><p>常見的解法是「部分內容開放」，這樣可以讓更多人看到，但同時也可以吸引有興趣的讀者進而付費。</p><p>我雖然沒有要收費，但我想要做的「訂戶限定」內容，也是一種「封閉」。</p><p>所以<strong>我多少需要調和這樣的矛盾。</strong></p><p>暫時我還沒有明確的想法——畢竟我根本還沒開始寫！</p><p>因此，這些「訂戶限定」內容，目前就是<strong>實驗性質、純封閉、不收費</strong>，只是為了讓訂戶感到更有價值。</p><p>不過考慮到未必每個人都有興趣，<strong>所以標題會特別標註「訂戶限定」</strong>，讓讀者可以自行選擇是否閱讀。</p><hr><h2 id="「訂戶限定」的創作方向"><a href="#「訂戶限定」的創作方向" class="headerlink" title="「訂戶限定」的創作方向"></a>「訂戶限定」的創作方向</h2><p>有一種電子報創作模式是我<strong>絕不考慮</strong>的，那就是「聚合型內容」。</p><p>聚合型指的是「<strong>就特定主題收集最新資訊</strong>」類的內容，畢竟我還信誓旦旦說過：<a href="/weekly-review-11/">我絕不當資訊的聚合者</a>XD</p><p>另一方面，聚合型內容已經有很多人在寫，我其實也寫不過人家😅，而且我對這種類型的創作沒有太多熱情。</p><p>又或者，把一些<strong>進階元素</strong>放在「訂戶限定」部分，這對於「付費訂閱」確實是不錯的做法，也相當合理。但顯然並不適合我這種<strong>以公開內容為主軸</strong>的創作者。</p><p>所以我現階段能想到的內容方向就是：<strong>個人化！</strong></p><h3 id="個人化"><a href="#個人化" class="headerlink" title="個人化"></a>個人化</h3><p>比 <a href="/weekly-review-25/#%E6%9B%B4%E7%A7%81%E4%BA%BA%E3%80%81%E6%9B%B4%E7%9B%B4%E7%99%BD">Weekly Review</a> 更個人的東西！</p><p>其中一種個人化，是表達<strong>對特定人事物的好惡</strong>。</p><p>畢竟你知道的，公開寫作，總是有一些東西不太方便寫，或者不太適合寫。我雖然沒有什麼「利益糾葛」，但發文之前還是不免會「自我審查」一下XD</p><p>在「訂戶限定」內容中，我可以更加<strong>放開自己</strong>，無須太過擔心。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文章，算是一個「預告」，也是一個「自我承諾」。</p><p>反正這東西是實驗性且不定期的，應該不會有太大的壓力。</p><p>我只要盡力確保，這些「訂戶限定」內容，是真的有價值，就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;這幾天在思考，如何有效利用目前使用的電子報服務，讓訂戶感到更有價值。&lt;/p&gt;
&lt;p&gt;畢竟一年也要付給供應商——&lt;a href=&quot;https://buttondown.com/refer/kyo&quot;&gt;Buttondown&lt;/a&gt;——90 美元，要讓這筆錢花得值得。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相關文章：&lt;a href=&quot;/weekly-review-26/&quot;&gt;26，改用 Buttondown 作為文章訂閱服務&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現階段我並不打算製作「付費訂閱」內容，只是想要為我的&lt;strong&gt;電子郵件訂閱者&lt;/strong&gt;，嘗試寫作「&lt;strong&gt;專屬&lt;/strong&gt;」內容——也就是「&lt;a href=&quot;https://kyomind.notion.site/40b324f98ca94827921a6831b0d7a38f?v=4fa52cd0f4864800927c463d93078ee6&quot;&gt;訂戶限定&lt;/a&gt;」內容。&lt;/p&gt;
&lt;p&gt;作為感謝這些讀者，願意留下自己 email 的小小心意。&lt;/p&gt;
&lt;p&gt;對作者而言，有人願意訂閱，是一種&lt;strong&gt;不言而喻的信任。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;「用戶郵件清單」無疑是現代行銷中的一大顯學，所以許多以「變現」為目標的網站、創作者，都會想方設法吸引用戶留下 email。&lt;/p&gt;
&lt;p&gt;我雖然沒有要變現（至少短期內無此打算），但站在創作者的角度，文章一發布就有人看見，誰能拒絕這樣的誘惑呢？&lt;/p&gt;
&lt;p&gt;所以很多網站會把&lt;strong&gt;訂閱電子報&lt;/strong&gt;放在最顯眼的位置，甚至會有「訂閱即可獲得免費禮物」的活動。&lt;/p&gt;
&lt;p&gt;這些我多少明白，但依舊沒有這麼做。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="電子報" scheme="https://blog.kyomind.tw/tags/%E9%9B%BB%E5%AD%90%E5%A0%B1/"/>
    
    <category term="Buttondown" scheme="https://blog.kyomind.tw/tags/Buttondown/"/>
    
  </entry>
  
  <entry>
    <title>Cursor IDE 心得：三大亮點與三個阻礙</title>
    <link href="https://blog.kyomind.tw/cursor/"/>
    <id>https://blog.kyomind.tw/cursor/</id>
    <published>2024-08-10T06:14:07.000Z</published>
    <updated>2024-09-03T03:07:03.042Z</updated>
    
    <content type="html"><![CDATA[<!-- ![](https://i.imgur.com/VhSp2Jb.png) --><p><img src="https://i.imgur.com/8qdJkr4.png"></p><p>主打 AI 輔助寫程式的編輯器——<a href="https://cursor.com/">Cursor</a>，這陣子非常火紅。</p><p>剛好我在上星期經朋友推薦，認真試用了一下，還接了 OpenAI GPT-4o mini API 作為編輯器的 AI 助手。</p><p>本文會分享我試用 Cursor 的心得，以及我<strong>仍不打算</strong>從 VS Code 遷移至 Cursor 的<strong>三個理由</strong>。</p><p>雖然是從個人角度出發，但我會考慮不同狀況、不同需求的讀者，給出不同的建議。</p><hr><h2 id="Cursor-Editor-簡介"><a href="#Cursor-Editor-簡介" class="headerlink" title="Cursor Editor 簡介"></a>Cursor Editor 簡介</h2><p>Cursor 是一款主打 AI 輔助寫程式的新型態 IDE，它並非單純在既有編輯器加上外掛，而是<strong>將 AI 深度整合進編輯器中</strong>。</p><p>它直接使用了 VS Code 的開源程式碼來建構。</p><p>這意味著，Cursor 在介面與操作邏輯上都與 VS Code 極為相似，對於那些想要從 VS Code 遷移過來的使用者來說，幾乎不需要花費額外的時間適應，就能快速上手。</p><p>它的最大亮點，是<strong>內建了強大的 AI 功能（名為：Copilot++）</strong>，可以根據你的指令，自動生成程式碼、提供程式碼建議，甚至幫你 debug。</p><p>不過這些其實 <a href="https://github.com/features/copilot">GitHub Copilot</a> 也能做到。所以，我認為，真正讓 Cursor 脫穎而出的，是以下三點。</p><span id="more"></span><h2 id="Cursor-的三大賣點"><a href="#Cursor-的三大賣點" class="headerlink" title="Cursor 的三大賣點"></a>Cursor 的三大賣點</h2><p>在我看來，<strong>Cursor 的賣點（或說亮點）</strong>主要有三個：</p><ol><li>強大的<strong>專案 RAG 問答</strong>。</li><li>強大的<strong>自動完成</strong>。</li><li>用戶可以<strong>自行選擇</strong>回答問題的語言模型：GPT-4o、Claude、Gemini，隨你選。</li></ol><p>這三點足以支撐它目前得到的關注和好評——因為真的很厲害。</p><p>我只有認真使用過第一、三點，但已<strong>足夠讓我感到驚艷。</strong></p><p>話說回來，Cursor 的實際功能細節，非並本文重點。所以請容我引用<a href="https://blog.huli.tw/about/">胡立</a>剛出爐不久的這篇 <a href="https://www.facebook.com/huli.blog/posts/pfbid02rddupRmi7KgHvA6ZYdZShrJL2qAEbqRjHXTgeY17XmS9VEtfno2hhndk5tjUpGzQl">Cursor 心得</a>，來具體表達上述三點中的<strong>前兩點。</strong></p><h3 id="專案-RAG-問答"><a href="#專案-RAG-問答" class="headerlink" title="專案 RAG 問答"></a>專案 RAG 問答</h3><blockquote><p>第一個是我剛講的，我問他說：「專案裡面有用到跟 websocket 很像的機制，會從 server 推訊息過來，請問在哪裡？」，同樣的問題拿去問 GitHub Copilot，他只會回你應該怎麼去找，而不是跟你講答案。</p></blockquote><blockquote><p><strong>而問了 Cursor 之後，他直接把對應的檔案跟內容印出來，而且不止 websocket，連用到 Server-Sent Event 的地方都找出來了。</strong></p></blockquote><p>這部分也是我覺得 Cursor 最厲害的地方，它的專案 RAG 體驗實在比 GitHub Copilot 要好得太多。</p><p>真正做到了「<strong>隨時隨地和專案對話、問答</strong>」的感覺。</p><h3 id="自動完成"><a href="#自動完成" class="headerlink" title="自動完成"></a>自動完成</h3><blockquote><p>但下一步，我跟 Cursor 說「請幫我也應用到 Deleted, Published, Sold, Locked 這幾個狀態的細節頁面上」，<strong>接著他就出現了其他四個檔案的改動，我只要一直點 apply，就完成了。</strong></p></blockquote><p>這相當於 GitHub Copilot 的自動完成<strong>大幅增強版</strong>，不僅能夠生成程式碼，還能夠直接大範圍應用。而不需要你一步一步地去修改。</p><p>難怪有人說「<strong>自從用了 Cursor，軟體開發就是不斷地按 tab</strong>」，哈哈哈，我相信！</p><hr><h2 id="我的-Cursor-心得"><a href="#我的-Cursor-心得" class="headerlink" title="我的 Cursor 心得"></a>我的 Cursor 心得</h2><p>其實早在去年中，我就安裝過 Cursor，當時的版本還不那麼成熟，加上<strong>知道自己不太可能輕易離開 VS Code</strong>，所以也沒有認真對待。</p><p>現在不同了。</p><p>上面提到的第一個強大功能——RAG 問答，真是個<strong>殺手級應用。</strong></p><p>雖然 GitHub Copilot 也有類似實作，但效果實在差太多，用起來非常不便，還有很大的進步空間。</p><p><strong>這種能「和專案對話」的價值，主要體現在幾個場景：</strong></p><ol><li><strong>快速熟悉不是自己開發的專案</strong>，包括開源專案、新接手的專案等。</li><li><strong>快速找到專案中的某個功能，與相關的程式碼</strong>。因為可能散落在很多個地方，能一口氣找出來，真的非常方便。</li><li>就現有的程式碼，<strong>開發新功能</strong>。</li></ol><p><strong>這無疑是所有開發者都夢寐以求的。</strong></p><p>然而，儘管如此，我還是<strong>沒打算以 Cursor 作為我主要的 IDE</strong>——至少目前沒有。</p><hr><h2 id="我仍不打算改用-Cursor-的三個理由"><a href="#我仍不打算改用-Cursor-的三個理由" class="headerlink" title="我仍不打算改用 Cursor 的三個理由"></a>我仍不打算改用 Cursor 的三個理由</h2><p>毫無疑問，Cursor 是一個非常值得期待的編輯器，它的 AI 功能確實讓人驚艷。</p><p>現在，我會使用 Cursor 作為我的「<strong>RAG 專用機</strong>」，幫助我快速熟悉專案、找到相關的程式碼。</p><p>但我<strong>還是會繼續使用 VS Code，而非全面遷移至 Cursor。</strong></p><p>以下是我仍不打算改用 Cursor 的三個理由。</p><h2 id="理由一：快捷鍵衝突"><a href="#理由一：快捷鍵衝突" class="headerlink" title="理由一：快捷鍵衝突"></a>理由一：快捷鍵衝突</h2><p>雖然 Cursor 是基於 VS Code，但因為加上了自己開發的 AI 功能，所以必然會有一些預設的快捷鍵和 VS Code 不同。</p><p>我已經習慣了 VS Code 的快捷鍵，其中一些快捷鍵在 Cursor 中<strong>存在衝突或不起作用。</strong></p><p>最經典的是<code>Cmd + Shift + K</code>，在 VS Code 中是<strong>刪除游標所在的當前行</strong>，而在 Cursor 中是叫出 AI 助手。</p><p>雖然也是有替代方案，比如改用<code>Ctrl + Shift + K</code>，但就是得<strong>改變我的使用習慣</strong>。（重設快捷鍵道理相同）</p><p>Cursor 的<code>Cmd + K</code>也是叫出 AI 助手，而在 VS Code 中則是用來當「<strong>組合鍵</strong>」，比如<code>Cmd + K &amp;&amp; Cmd + S</code>是「打開快捷鍵設定」——我很常用。</p><p>這個改動顯然影響更大。</p><p>總之，對於已習慣 VS Code 快捷鍵的使用者來說，<strong>需要重設部分快捷鍵並重新適應。</strong></p><h2 id="理由二：比較醜"><a href="#理由二：比較醜" class="headerlink" title="理由二：比較醜"></a>理由二：比較醜</h2><p>說 Cursor 比 VS Code 醜，可能有點主觀，而且兩者不是<strong>同源</strong>的產品嗎？</p><p>沒錯，在 UI 上，99% 都是相同的——都是 VS Code 的 UI。</p><p>除了<strong>側邊欄</strong>的一些變化，以及 AI 助手的介面，Cursor 基本上就是 VS Code。</p><p>但就是這些自訂部分，總讓我感到有股「<strong>山寨味</strong>」XD</p><p>（老實說，我覺得 Copilot++ 這個名稱也很山寨）</p><p>所幸，和快捷鍵相比，這算不上什麼大問題。如果不喜歡 Cursor 的預設側邊欄樣式，可<a href="https://forum.cursor.com/t/getting-used-to-the-orientation-of-the-primary-sidebar/20/4">透過設定調回原版</a>。總之，適應一下即可。</p><h2 id="理由三：要付費-Pro-才能取得完整功能"><a href="#理由三：要付費-Pro-才能取得完整功能" class="headerlink" title="理由三：要付費 Pro 才能取得完整功能"></a>理由三：要付費 Pro 才能取得完整功能</h2><p><strong>我想這第 3 點才是最重要的。</strong></p><p>Cursor 是一個商業產品，它的 AI 功能需要<a href="https://www.cursor.com/pricing">付費</a>。當然，你可以不付錢，先享用一定的免費額度，但這些額度<strong>只夠你淺嘗輒止。</strong></p><p>想要用它來作為開發主力，還是得付費。</p><p>雖然說，編輯器允許你<strong>自行串接語言模型 API</strong>，可以一定程度上緩解這個問題。但人家也不是吃素的。</p><h3 id="付費成為-Pro"><a href="#付費成為-Pro" class="headerlink" title="付費成為 Pro"></a>付費成為 Pro</h3><p><strong>自行接 API 和付費成為 Pro，待遇終究有所不同。</strong></p><p>比如，胡立文章中提到的「<strong>apply</strong>」功能，目前<strong>只有 Pro 用戶才能使用，而這個又非常重要——不然就得自己複製貼上。</strong></p><p><img src="https://i.imgur.com/NeTrCMs.png" alt="想要 apply？請付費"><span class="cap">想要 apply？請付費</span></p><p>自行複製貼上？這顯然<strong>不現實</strong>，直接讓開發效率<strong>大打折扣。</strong></p><p>由此可見，想要<strong>完整享受</strong> Cursor 的強大與便利，<strong>你就是得付費！</strong></p><h3 id="我暫時不想付費"><a href="#我暫時不想付費" class="headerlink" title="我暫時不想付費"></a>我暫時不想付費</h3><p>現在的 AI 應用，動不動就要收你<strong>一個月 20 美元</strong>，這不是筆小數目。</p><p>更別說，手上可能已不止一個 20 美元的 AI 工具訂閱。</p><p>對我來說，要我每月拿出 20 美元，需要有一定的「<strong>泛用性</strong>」，否則很難說服我。</p><p>Cursor 如果還不是我的開發主力，那我自然不願意。</p><h3 id="那你要付費嗎？"><a href="#那你要付費嗎？" class="headerlink" title="那你要付費嗎？"></a>那你要付費嗎？</h3><p>以下三類人，值得認真考慮付費：</p><ol><li>VS Code 用戶，但只是輕度用戶，想要比 GitHub Copilot 更好的 AI 功能。</li><li>才剛開始程式之路的新手，對 IDE 還未形成明顯偏好。</li><li>對 AI 的主要訴求就是寫程式——「我就是要最好的 AI 開發助手！」</li></ol><p><strong>在 AI 時代，我們都要當一個挑剔的消費者😎</strong></p><hr><h2 id="結語：競爭是好事"><a href="#結語：競爭是好事" class="headerlink" title="結語：競爭是好事"></a>結語：競爭是好事</h2><p>要說服我從 VS Code 遷移到 Cursor，還有一段路要走——但並非不可能。</p><p>它的 AI 功能真的強大到，讓我不禁懷疑 GitHub Copilot 開發團隊<strong>是否用了太多力氣在不重要的地方</strong>；而 Cursor 則是用盡全力把 AI 功能做到極致。</p><p>我期待 Cursor 能夠持續發展，並且<strong>為 GitHub Copilot 帶來更多的競爭壓力</strong>。</p><p>畢竟，廠商之間有競爭，對消費者總是好事，到時候再來選擇，也還不遲。</p>]]></content>
    
    
    <summary type="html">&lt;!-- ![](https://i.imgur.com/VhSp2Jb.png) --&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8qdJkr4.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;主打 AI 輔助寫程式的編輯器——&lt;a href=&quot;https://cursor.com/&quot;&gt;Cursor&lt;/a&gt;，這陣子非常火紅。&lt;/p&gt;
&lt;p&gt;剛好我在上星期經朋友推薦，認真試用了一下，還接了 OpenAI GPT-4o mini API 作為編輯器的 AI 助手。&lt;/p&gt;
&lt;p&gt;本文會分享我試用 Cursor 的心得，以及我&lt;strong&gt;仍不打算&lt;/strong&gt;從 VS Code 遷移至 Cursor 的&lt;strong&gt;三個理由&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;雖然是從個人角度出發，但我會考慮不同狀況、不同需求的讀者，給出不同的建議。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Cursor-Editor-簡介&quot;&gt;&lt;a href=&quot;#Cursor-Editor-簡介&quot; class=&quot;headerlink&quot; title=&quot;Cursor Editor 簡介&quot;&gt;&lt;/a&gt;Cursor Editor 簡介&lt;/h2&gt;&lt;p&gt;Cursor 是一款主打 AI 輔助寫程式的新型態 IDE，它並非單純在既有編輯器加上外掛，而是&lt;strong&gt;將 AI 深度整合進編輯器中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;它直接使用了 VS Code 的開源程式碼來建構。&lt;/p&gt;
&lt;p&gt;這意味著，Cursor 在介面與操作邏輯上都與 VS Code 極為相似，對於那些想要從 VS Code 遷移過來的使用者來說，幾乎不需要花費額外的時間適應，就能快速上手。&lt;/p&gt;
&lt;p&gt;它的最大亮點，是&lt;strong&gt;內建了強大的 AI 功能（名為：Copilot++）&lt;/strong&gt;，可以根據你的指令，自動生成程式碼、提供程式碼建議，甚至幫你 debug。&lt;/p&gt;
&lt;p&gt;不過這些其實 &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; 也能做到。所以，我認為，真正讓 Cursor 脫穎而出的，是以下三點。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/8qdJkr4.png" type="image"/>
    
    
    <category term="軟體開發" scheme="https://blog.kyomind.tw/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
    <category term="VS Code" scheme="https://blog.kyomind.tw/tags/VS-Code/"/>
    
    <category term="Cursor" scheme="https://blog.kyomind.tw/tags/Cursor/"/>
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>35，開始備戰 2024 iThome 鐵人賽</title>
    <link href="https://blog.kyomind.tw/weekly-review-35/"/>
    <id>https://blog.kyomind.tw/weekly-review-35/</id>
    <published>2024-08-04T07:06:14.000Z</published>
    <updated>2024-08-08T17:53:51.070Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>轉眼間就八月了！我的天，時間過得真快。</p><p>渡過了相對低迷的七月，這個月我要好好備戰鐵人賽——不然也沒有時間了XD</p><p>本期講一下我對於鐵人賽的看法、準備（雖然才剛開始），與個人期待。</p><hr><h2 id="iThome-鐵人賽"><a href="#iThome-鐵人賽" class="headerlink" title="iThome 鐵人賽"></a>iThome 鐵人賽</h2><p>2024 iThome 鐵人賽的<a href="https://ithelp.ithome.com.tw/2024ironman/event">官方頁面</a>已經上線，報名時間從八月到九月中。</p><p>今年新增了 <a href="https://ithelp.ithome.com.tw/2024ironman/python#ir-list">Python 組</a>和 <a href="https://ithelp.ithome.com.tw/2024ironman/javascript#ir-list">JavaScript 組</a>，這是個好消息，作為一個 Python 開發者，能在 Python 組參賽是最好。</p><p>尤其這是我第一次參加 iThome 鐵人賽，別具意義。</p><p>早在〈<a href="/weekly-review-32/">32，下半年寫作目標</a>〉中，我就<a href="/weekly-review-32/#%E4%BA%8C%E3%80%81%E5%8F%83%E5%8A%A0-iThome-%E9%90%B5%E4%BA%BA%E8%B3%BD">宣布要參加鐵人賽</a>，結果一個月過去，現在才開始動工😂</p><p>那時收到了一位，我覺得很厲害的開發者的來信，表示對鐵人賽如果有什麼疑問，可以協助，我當下真的是又驚又喜！</p><p>不過隨著七月一整個月的低迷（包括前半月的生病），這份驚喜逐漸轉變為一種<strong>淡淡的罪惡感</strong>：「可惡，我怎麼還沒開始！這樣豈不是浪費了別人的好意？」</p><span id="more"></span><hr><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>個性使然，我做很多事都很講究事前準備，有時難免帶來一種<strong>變相的拖延</strong>。</p><p>不過，只要把其中的「<strong>度</strong>」拿捏好，<strong>事前準備往往是很值得的。</strong></p><p>讀者之中也許有跟我一樣，今年第一次參加鐵人賽的朋友，在此分享一下我的事前準備事項與想法。</p><h2 id="一、避開太常見的主題"><a href="#一、避開太常見的主題" class="headerlink" title="一、避開太常見的主題"></a>一、避開太常見的主題</h2><p>前人已經寫過太多的主題，讀者容易審美疲勞。</p><p>就像在〈<a href="/ruff/">Python 開發：Ruff Linter、Formatter 介紹 + 設定教學</a>〉中<a href="https://blog.kyomind.tw/ruff/#%E6%9C%AC%E6%96%87%E4%B8%BB%E6%97%A8%E8%88%87%E7%9B%AE%E6%A8%99%E8%AE%80%E8%80%85">提到的</a>，我真的很不喜歡重複別人寫過的內容——<strong>尤其是那些人家已經寫得很好的內容。</strong></p><p>所以雖然一直有在部落格寫作，卻遲至今年才參加鐵人賽，也是因為此前我只能想到「Python 入門」之類的主題，這些都已經被寫爛了。</p><p>很難別出心裁不說，寫得可能也沒有前人好。</p><p>當然，<strong>這只是我個人的看法，或說偏好</strong>。寫作畢竟是為了自己——還有讀者。顧慮太多往往沒什麼必要。</p><p>如果心中真的有一個很想寫的主題，那就寫吧！不要被我這種想法給限制住，哪怕是個尋常的主題，也可以注入自己<strong>獨一無二的愛</strong>🥹</p><h2 id="二、觀摩得獎作品的結構與表達"><a href="#二、觀摩得獎作品的結構與表達" class="headerlink" title="二、觀摩得獎作品的結構與表達"></a>二、觀摩得獎作品的結構與表達</h2><p>這就要先提到<a href="https://s.itho.me/vendor/2024/iThome/iThome%E9%90%B5%E4%BA%BA%E8%B3%BD%E6%B4%BB%E5%8B%95%E7%B0%A1%E7%AB%A0-20240614.pdf">活動簡章</a>中的「陸、主題競賽評審要點」：</p><blockquote><ul><li><strong>主題</strong>：主題規劃符合該組別的立意，並能充份切合所選參賽主題下，參賽者所訂定之議題</li><li><strong>結構</strong>：<strong>30 篇文章組織良好、其所規劃結構足以引導讀者理解參賽者訂定之議題</strong></li><li><strong>內容</strong>：文章內容的技術或經驗具備專業性、豐富性、深入性</li><li><strong>表達</strong>：透過適當文字、圖片、程式碼或影片等方式，讓人更容易理解</li></ul></blockquote><p>其中我覺得相當重要的是「結構」與「表達」，尤其是這段「所規劃結構<strong>足以引導讀者理解</strong>」。</p><p>過去的得獎作品，肯定相當程度符合了上述標準。觀摩這些作品，可以幫助我們更好地理解<strong>如何組織文章</strong>，以及<strong>如何呈現</strong>。</p><p>畢竟<strong>系列長篇創作</strong>不同於<strong>單篇文章</strong>，<strong>結構的合理性</strong>對於讀者的理解與學習<strong>至關重要。</strong></p><h2 id="三、與-AI-討論-30-天標題"><a href="#三、與-AI-討論-30-天標題" class="headerlink" title="三、與 AI 討論 30 天標題"></a>三、與 AI 討論 30 天標題</h2><p>想達到「30 篇文章組織良好」，<strong>絕不是一件容易的事。</strong></p><p>這就需要一個<strong>合理的寫作計畫</strong>，這個計畫不僅要考慮到<strong>系列主題的選擇</strong>，還要考慮<strong>每篇文章的標題、內容</strong>，包括可能的篇幅大小。</p><p>先有一個<strong>粗略的計畫</strong>，無疑是好的、必要的。</p><p>此時 AI（ChatGPT、Claude、Gemini 等）就派上用場了，我們可以先和它討論一下，看看它有什麼建議。</p><p>我覺得一次就要決定好 30 天標題，未免強人所難，不太現實。不如退而求其次，優先討論<strong>前十天</strong>的內容，了解 AI 有什麼想法、回饋。</p><p>尤其要讓它當你的「<strong>編輯</strong>」，站在「<strong>讀者</strong>」的角度，看看這十天的內容安排——也就是<strong>結構</strong>——是否合理。</p><hr><h2 id="個人期待"><a href="#個人期待" class="headerlink" title="個人期待"></a>個人期待</h2><p>當然是得獎啦！哈哈哈，誰不想得獎呢？</p><p>具體的獎項，依照<a href="https://ithelp.ithome.com.tw/2024ironman/event#awardDiv">規則</a>，每一參賽組別都有「冠軍」、「優選」、「佳作」三種：</p><h4 id="冠軍"><a href="#冠軍" class="headerlink" title="冠軍"></a>冠軍</h4><ul><li>冠軍（每組 1 名）</li><li>頒發獎金 1 萬元、2024 賽季紀念品以及獎盃 1 座。各組完賽人數達 100 人，每逾 50 人，額外增設 1 個名額。</li></ul><h4 id="優選"><a href="#優選" class="headerlink" title="優選"></a>優選</h4><ul><li>優選（每組 2 名）</li><li>頒發2024 賽季紀念品以及獎盃 1 座。各組完賽人數達 100 人，每逾 50 人，額外增設 2 個名額。</li></ul><h4 id="佳作"><a href="#佳作" class="headerlink" title="佳作"></a>佳作</h4><ul><li>佳作（若干名）</li><li>獲頒2024 賽季紀念品以及獎牌 1 面。不分組別，由評審委員會依賽事整體作品水準，議定標準、擇優入選，名額不限。</li></ul><p>「冠軍 + 優選」其實就是傳統意義上的前三名。而且依組別<strong>參賽人數不同</strong>，想要獲得前三名的<strong>競爭激烈程度</strong>也不盡相同。（PS：較多人參賽組別，達一定條件有<strong>增設名額</strong>規定，如上）</p><p>相較之下，「佳作」則是意味著<strong>你的作品是否達到一定水準。</strong></p><p>我的目標是「佳作」以上，不容退讓。</p><p>至於「冠軍」或「優選」，<strong>我覺得「期待」本身需要適度控制</strong>，這樣的心態會讓我比較<strong>自然、放鬆</strong>，是我喜歡的。</p><p>當然，你也可以<a href="https://life.huli.tw/2024/07/10/the-story-behind-my-xss-book/">像胡立一樣</a>，就是衝著「出書」的目標去的！</p><hr><h2 id="小結：以鐵人賽為主"><a href="#小結：以鐵人賽為主" class="headerlink" title="小結：以鐵人賽為主"></a>小結：以鐵人賽為主</h2><p>鐵人賽畢竟要寫 30 篇文章，一篇算 1000 字，30 篇就是 3 萬字，實在是一個不小的挑戰。</p><p>我希望在開賽前可以先寫完一半以上，這樣完賽的壓力才不會那麼大。因此最快要九月才會開始。</p><p>這段時間，<strong>我將以準備鐵人賽為主，其他技術文章暫時停止</strong>。Weekly Review 可能再發個一、兩篇。</p><p>我不是一個擅長壓榨自己，進而超越極限之人。反之，我更希望以<strong>平和的心態、穩定的節奏</strong>來面對這個挑戰，所以<strong>取捨</strong>是必要的。</p><p>總之，有捨有得囉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;轉眼間就八月了！我的天，時間過得真快。&lt;/p&gt;
&lt;p&gt;渡過了相對低迷的七月，這個月我要好好備戰鐵人賽——不然也沒有時間了XD&lt;/p&gt;
&lt;p&gt;本期講一下我對於鐵人賽的看法、準備（雖然才剛開始），與個人期待。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;iThome-鐵人賽&quot;&gt;&lt;a href=&quot;#iThome-鐵人賽&quot; class=&quot;headerlink&quot; title=&quot;iThome 鐵人賽&quot;&gt;&lt;/a&gt;iThome 鐵人賽&lt;/h2&gt;&lt;p&gt;2024 iThome 鐵人賽的&lt;a href=&quot;https://ithelp.ithome.com.tw/2024ironman/event&quot;&gt;官方頁面&lt;/a&gt;已經上線，報名時間從八月到九月中。&lt;/p&gt;
&lt;p&gt;今年新增了 &lt;a href=&quot;https://ithelp.ithome.com.tw/2024ironman/python#ir-list&quot;&gt;Python 組&lt;/a&gt;和 &lt;a href=&quot;https://ithelp.ithome.com.tw/2024ironman/javascript#ir-list&quot;&gt;JavaScript 組&lt;/a&gt;，這是個好消息，作為一個 Python 開發者，能在 Python 組參賽是最好。&lt;/p&gt;
&lt;p&gt;尤其這是我第一次參加 iThome 鐵人賽，別具意義。&lt;/p&gt;
&lt;p&gt;早在〈&lt;a href=&quot;/weekly-review-32/&quot;&gt;32，下半年寫作目標&lt;/a&gt;〉中，我就&lt;a href=&quot;/weekly-review-32/#%E4%BA%8C%E3%80%81%E5%8F%83%E5%8A%A0-iThome-%E9%90%B5%E4%BA%BA%E8%B3%BD&quot;&gt;宣布要參加鐵人賽&lt;/a&gt;，結果一個月過去，現在才開始動工😂&lt;/p&gt;
&lt;p&gt;那時收到了一位，我覺得很厲害的開發者的來信，表示對鐵人賽如果有什麼疑問，可以協助，我當下真的是又驚又喜！&lt;/p&gt;
&lt;p&gt;不過隨著七月一整個月的低迷（包括前半月的生病），這份驚喜逐漸轉變為一種&lt;strong&gt;淡淡的罪惡感&lt;/strong&gt;：「可惡，我怎麼還沒開始！這樣豈不是浪費了別人的好意？」&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>34，宜蘭二日遊與近況回顧</title>
    <link href="https://blog.kyomind.tw/weekly-review-34/"/>
    <id>https://blog.kyomind.tw/weekly-review-34/</id>
    <published>2024-07-22T03:37:27.000Z</published>
    <updated>2024-08-03T15:19:49.353Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>七月上旬不慎感冒，不知為何，這回特別嚴重。足足過了近兩星期，才逐漸恢復正常。</p><p>而且，整個七月至今，<strong>狀態都不太好</strong>。不僅是身體，心情也低落，<strong>有一種找不到出口的感覺。</strong></p><p>這樣的心情間接影響了我的寫作士氣，讓我感到心有餘而力不足。</p><p>這星期四、五，和女友去了宜蘭，雖然是一次的短暫旅行，但至少能夠<strong>打破既有的生活節奏，讓自己放鬆一下。</strong></p><p>宜蘭我還算熟悉，畢竟曾在宜蘭工作了 5 年多，想起這段過往，覺得人生真的有很多變化。</p><p>本期結合旅記和近況回顧，篇幅會比以往略長。</p><span id="more"></span><hr><h2 id="第一天：頭城"><a href="#第一天：頭城" class="headerlink" title="第一天：頭城"></a>第一天：頭城</h2><p>頭城的海岸一直是它最迷人的地方，不過這次沒有造訪，原因也很簡單——太熱了。</p><p>七、八月的台灣平地，到處都是頂著 32 度以上的高溫，這種天氣在海邊走路，恐怕會讓自己加更疲憊。</p><p>所以去吃了當地美食，龍記牛肉麵。我可是對牛肉麵十分挑剔之人，這個……還行啦！但不會特地再去。</p><h3 id="巷弄裡的那家書店"><a href="#巷弄裡的那家書店" class="headerlink" title="巷弄裡的那家書店"></a>巷弄裡的那家書店</h3><p>頭城還有一個值得回憶的地方，車站外的頭城文創園區，其中一棟木造建築，是 10 年前的偶像劇《<a href="https://zh.wikipedia.org/zh-tw/%E5%B7%B7%E5%BC%84%E8%A3%A1%E7%9A%84%E9%82%A3%E5%AE%B6%E6%9B%B8%E5%BA%97">巷弄裡的那家書店</a>》中的主要場景。</p><p>男主角失憶後，跑到宜蘭開書店，就在這裡取景（部分場景已拆除）。當時我還在宜蘭工作，所以對這部戲印象深刻，把頭城拍得很美。</p><p>不過劇本身就有點虎頭蛇尾，差強人意。</p><h2 id="第一天：礁溪"><a href="#第一天：礁溪" class="headerlink" title="第一天：礁溪"></a>第一天：礁溪</h2><p>吃完午餐才 1 點，飯店還未開放入住，只能先搭火車到礁溪，找個地方坐坐。</p><p>礁溪，我們都是去「<a href="https://www.facebook.com/gigipsjh/?locale=zh_TW">工藝咖啡</a>」啦！</p><p>老闆是退休老師，上次跟他聊了一下，他說退休後還打算繼續工作，但不知道做什麼，去了職訓局學 C++ 寫遊戲，覺得自己不太適合，後來又做了不少嘗試，最後開了這家咖啡店。</p><p>我心想：「是啊！老闆，你學 C++，那一定會失敗的。如果當初是學 Python 的話——你會更早開這家咖啡店。」</p><h3 id="五峰旗、聖母朝聖地"><a href="#五峰旗、聖母朝聖地" class="headerlink" title="五峰旗、聖母朝聖地"></a>五峰旗、聖母朝聖地</h3><p>我的旅行，總是伴隨著大量的走路，所以，光吃吃喝喝是不夠的！</p><p>Check-in 後稍作休息，還是要<strong>痛苦地開走XD</strong>——真的是滿痛苦的，到達風景區之前，高溫又沒什麼遮蔽，我自己也走到有點懷疑人生。</p><p>上次來五峰旗應該是 5 年前或更久，風景區入口一帶，現在看來更加整潔、商業化，但也失去了一些原始的味道。</p><p>後續的步道可以走挺遠的，但時間和體力都不允許，我們決定走到<a href="https://jiaosi.e-land.gov.tw/cp.aspx?n=64B920AC3F264020&s=BCBC32670055B558">聖母朝聖地</a>就好。</p><hr><h2 id="第二天：蘇澳"><a href="#第二天：蘇澳" class="headerlink" title="第二天：蘇澳"></a>第二天：蘇澳</h2><p>第二天的中餐還是在礁溪解決，然後才搭火車到蘇澳。</p><p>依循第一天的模式，正午 34 度的高溫，還是得找一家咖啡店先待著，誰會這時想不開爬山呢？</p><p>選了「<a href="https://www.facebook.com/lightenCafe/?locale=zh_TW">光覺咖啡</a>」，待到下午 2 點左右。</p><p>其實，中午 12 點或下午 2 點，還不都一樣熱？但一直坐著也不是辦法，頂著酷熱還是決定先出發，前往這次宜蘭行，我最為期待的景點：七星嶺。</p><h3 id="七星嶺步道"><a href="#七星嶺步道" class="headerlink" title="七星嶺步道"></a>七星嶺步道</h3><p><strong>真的要這個時候走嗎？</strong>——我也猶豫了。但考慮到時間，無法等到傍晚。</p><p>所幸，從步道入口到六星觀海的這一段，幾乎都有樹蔭，天氣雖熱，走起來還算舒服。不過想到 1300 餘階的階梯，這個時候走，還是有點瘋狂。</p><p>七星嶺真的是一個非常推薦的地方，步道自帶遊戲中常見的「成就系統」，每走一段，就會有一個能眺望遠處美景的<strong>休息平台</strong>，它們分別是：</p><ol><li>一星觀泉。</li><li>二星觀澳。</li><li>三星觀山。</li><li>四星觀樹。</li><li>五星觀港。</li><li>六星觀海。</li></ol><p>而且，即使是往同一個方向看，不同的高度有不同的視野，這跟人生非常相似。</p><p>話說回來，能夠想到這些名堂，我深深佩服設計者的想像力。</p><p>我們最終目的地是整個步道的最高點——<strong>星嶺公園</strong>。</p><h3 id="星嶺公園"><a href="#星嶺公園" class="headerlink" title="星嶺公園"></a>星嶺公園</h3><p>星嶺公園距離六星觀海尚有約 1.1 公里，主要是碎石路，先下後上，走起來有點辛苦。我本來想放棄的XD，還好女友堅持，才有幸拍到這般美景。</p><p><img src="https://i.imgur.com/y7enzCU.jpeg" alt="從星嶺公園眺望蘭陽平原"><span class="cap">從星嶺公園眺望蘭陽平原</span></p><p>當天的視野相當不錯，我在網路上找到的其它照片，遠處的海平面，都沒有這麼清晰。</p><p>僅憑這一張照片，我覺得這次宜蘭行，值得了。</p><p>很想挑戰 <a href="/weekly-review-33/#%E4%BA%8C%E3%80%81%E6%88%91%E6%9C%80%E5%96%9C%E6%AD%A1%E7%9A%84-Tony-Huang-%E5%BD%B1%E7%89%87">Tony Huang 的 31 公里</a>的<strong>精簡版</strong>，不過需要等到天氣稍涼一點。</p><hr><h2 id="一些感想與近況回顧"><a href="#一些感想與近況回顧" class="headerlink" title="一些感想與近況回顧"></a>一些感想與近況回顧</h2><p>宜蘭行確實收獲不少，旅途中，我不斷在思考一些人生問題。</p><blockquote><p>如果一直待在宜蘭當公務員，或者乾脆就是一直當公務員，現在的我會如何？</p></blockquote><p>這實在難以想像。</p><p>可以說，轉職前後的我，<strong>在某些部分，幾乎是完全不同的兩個人。</strong></p><p>不同的職業有不同的挑戰、不同的煩惱。公職有體制保護，同時也有體制束縛，不一定適合每個人——至少不適合我。</p><h2 id="AI-時代的生存指南"><a href="#AI-時代的生存指南" class="headerlink" title="AI 時代的生存指南"></a>AI 時代的生存指南</h2><p>我曾寫過兩篇關於 AI 思考的文章：</p><ol><li><a href="/weekly-review-17/">17，AI 時代的生存指南（一）我對 AI 工具的投入與觀望</a></li><li><a href="/weekly-review-19/">19，AI 時代的生存指南（二）數位斷捨離</a></li></ol><p>現在看來，這兩篇的切入方向，還是相對合理的。</p><p>沒有繼續再寫第 3、4 篇，一個可能的原因是：AI 依舊對我帶來了<strong>比較強烈的焦慮感</strong>。</p><p>雖然我必須說，至少就我而言，<strong>很難回到沒有 AI 輔助的時代——我認為軟體工程師是最需要 AI 輔助、最應該<a href="/good-vscode-extensions/#AI-%E8%BC%94%E5%8A%A9%E5%AF%AB-Code">與 AI 共舞</a>的職業，沒有之一。</strong></p><hr><h2 id="未完成與小展望"><a href="#未完成與小展望" class="headerlink" title="未完成與小展望"></a>未完成與小展望</h2><p>我只能猜想，文章開頭提到的「找不到出口的感覺」，可能在於，我還沒有真正找到，能讓自己在這個不斷變化的 AI 時代，<strong>能自信立足的生存之道。</strong></p><p>接下來，我的目標是尋找這個出口，至少要看見從出口透出的微光。</p><p>這不僅僅是一個職業上的挑戰，更是對自我價值和人生方向的重新審視。</p><p>旅行是一種尋找的方法，寫作也是，還有更多的閱讀和學習。當然，這些都有一個共同元素——<strong>行動</strong>。</p><p>試著找到它！是我接下來的重要目標，甚至是唯一的目標。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;七月上旬不慎感冒，不知為何，這回特別嚴重。足足過了近兩星期，才逐漸恢復正常。&lt;/p&gt;
&lt;p&gt;而且，整個七月至今，&lt;strong&gt;狀態都不太好&lt;/strong&gt;。不僅是身體，心情也低落，&lt;strong&gt;有一種找不到出口的感覺。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這樣的心情間接影響了我的寫作士氣，讓我感到心有餘而力不足。&lt;/p&gt;
&lt;p&gt;這星期四、五，和女友去了宜蘭，雖然是一次的短暫旅行，但至少能夠&lt;strong&gt;打破既有的生活節奏，讓自己放鬆一下。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;宜蘭我還算熟悉，畢竟曾在宜蘭工作了 5 年多，想起這段過往，覺得人生真的有很多變化。&lt;/p&gt;
&lt;p&gt;本期結合旅記和近況回顧，篇幅會比以往略長。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="旅行" scheme="https://blog.kyomind.tw/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>《Python 工匠》筆記（三）有關「變數」的程式設計建議</title>
    <link href="https://blog.kyomind.tw/python-craftsman-03/"/>
    <id>https://blog.kyomind.tw/python-craftsman-03/</id>
    <published>2024-07-13T06:10:32.000Z</published>
    <updated>2024-07-13T09:25:04.474Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/beoEztr.png" alt="Python 工匠"><span class="cap">Python 工匠</span></p><p>這是《<a href="https://www.tenlong.com.tw/products/9786263245174">Python 工匠｜案例、技巧與開發實戰</a>》筆記的第 3 篇，你可以把它當作是一則重點整理，加上我個人的開發經驗與心得。</p><p>如第一篇所言，這是一本關於「Clean Code in Python」的書。</p><p>上一篇我整理書中了第 13 章「<strong>有關單元測試的建議</strong>」的內容（以及我的看法）。這次我們要再回到一開始，繼續學習如何寫好程式碼。</p><p>本文整理自書中的第 1 章第 3 節，為了不過度重複書中內容，下筆點到為止，並加上我自己的理解。</p><span id="more"></span><hr><p><strong>變數</strong>是程式碼中的<strong>基本元素</strong>，它們幾乎<strong>無所不在</strong>。</p><p>老實說，看這本書之前，我也想沒到，原來<strong>變數的使用</strong>有這麼多的學問！</p><p>以下就讓我們來一探究竟。</p><h2 id="一、保持變數的一致性"><a href="#一、保持變數的一致性" class="headerlink" title="一、保持變數的一致性"></a>一、保持變數的一致性</h2><p>這裡有兩種一致性：</p><ol><li><strong>名字一致性</strong>：在同一專案、模組、函式中，變數名稱應該保持一致。意思是，<strong>對「同一件事物」，不要用不同名稱。</strong></li><li><strong>型態一致性</strong>：變數的型態（型別）應該保持一致。意思是，<strong>不要把同一個變數，重新指向不同型態的資料。</strong></li></ol><p>老實說，這兩件事，就我的經驗，如果團隊沒有特別要求，那就<strong>一定會有人違反。</strong></p><p>乍看這好像也沒什麼，但當你的程式碼規模變得越來越龐大，這些<strong>不一致</strong>就會變成<strong>隱藏的 bug</strong>——魔鬼真的藏在細節裡。</p><p>所幸 Mypy <strong>不允許</strong>你變更變數型態，它的檢查確保了型態一致性。但命名上的一致性，只能靠人來保證。</p><p>關於「<strong>一致性</strong>」的議題，我們還會另篇討論——這真的非常重要。</p><h3 id="重新把變數指向不同型態的資料"><a href="#重新把變數指向不同型態的資料" class="headerlink" title="重新把變數指向不同型態的資料"></a>重新把變數指向不同型態的資料</h3><p>這真的是一個很常見的「巨大壞味道」。當你在程式碼中看到這樣的事情，就應該<strong>立刻警覺</strong>。</p><p>雖然許多時候它可能不會「真的」造成問題（所以才不受重視），但這樣的寫法會讓你的程式碼變得<strong>難以理解</strong>——為什麼前面是 list，後面卻變成了 dict？</p><p>而真正造成問題的時候，又很難 debug。</p><p>以前我也會做這種事，而且從 Python 語法角度，這「完全合法」呀！</p><p>後來自己被「坑」到以後，才理解這樣的寫法是<strong>多麼危險</strong>——難怪 Mypy 會禁止這樣的行為。</p><p>一個簡單避免這類行為的手段，就是<strong>重新命名一個新變數</strong>吧！還有安裝 Mypy，讓工具來幫你檢查。</p><hr><h2 id="二、變數宣告儘量靠近使用處"><a href="#二、變數宣告儘量靠近使用處" class="headerlink" title="二、變數宣告儘量靠近使用處"></a>二、變數宣告儘量靠近使用處</h2><p>這是一個<strong>好習慣</strong>，也是<strong>讓程式碼更易讀</strong>的方法。</p><p>如果我還要跨越好幾百行才能找到一個變數是怎麼宣告的，那會讓人絕望。</p><p>當然幾百行是誇張了，但如果是長函式，然後變數宣告在<strong>函式的開頭</strong>，那至少也是幾十行的事——太累了。</p><p>我們希望變數的宣告與使用能夠<strong>愈近愈好。</strong></p><p>這樣的好處是，你可以<strong>快速理解</strong>這個變數是幹嘛的，而不用一直往上找。</p><hr><h2 id="三、宣告「臨時變數」提升可讀性"><a href="#三、宣告「臨時變數」提升可讀性" class="headerlink" title="三、宣告「臨時變數」提升可讀性"></a>三、宣告「臨時變數」提升可讀性</h2><p>我覺得這是平時開發中，非常容易忽略的一點——因為這很<strong>反人性</strong>！</p><p>當你在寫程式碼時，通常你會<strong>想到什麼就寫什麼</strong>，而不會去想到「這裡可以宣告一個臨時變數，讓程式碼更好讀」。</p><p>這真的很難XD</p><p>我們直接看書中的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 為所有性別為女性，或者等級大於 3 的活躍使用者發放 10000 個金幣</span></span><br><span class="line"><span class="keyword">if</span> user.is_active <span class="keyword">and</span> (user.sex == <span class="string">&#x27;female&#x27;</span> <span class="keyword">or</span> user.level &gt; <span class="number">3</span>):</span><br><span class="line">    user.add_coins(<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>因為直接照著「業務邏輯」寫，程式碼隨著業務邏輯的複雜度增加，<strong>變得難以閱讀</strong>。</p><p>此時，我們可以宣告一個「<strong>臨時變數</strong>」，讓程式碼更易讀：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 為所有性別為女性，或者等級大於 3 的活躍使用者發放 10000 個金幣</span></span><br><span class="line">user_is_eligible = user.is_active <span class="keyword">and</span> (</span><br><span class="line">    user.sex == <span class="string">&#x27;female&#x27;</span> <span class="keyword">or</span> user.level &gt; <span class="number">3</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> user_is_eligible:</span><br><span class="line">    user.add_coins(<span class="number">10000</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>我覺得這真的堪稱神來一筆——這樣的寫法，<strong>讓程式碼更易讀</strong>，也<strong>更易維護</strong>。</p><p>你看完可能覺得，這好像也沒什麼，難嗎？</p><p>我覺得其中的難點在於：<strong>你恰好意識到，臨時變數在這個場景的必要性。</strong></p><p>這需要<strong>很細微的心思</strong>，與<strong>為他人著想的精神</strong>。因為你自己寫、自己讀，其實不需要這麼麻煩。</p><p>我稱這樣的臨時變數為——<strong>良心事業</strong>！</p><hr><h2 id="四、能不宣告變數就別宣告"><a href="#四、能不宣告變數就別宣告" class="headerlink" title="四、能不宣告變數就別宣告"></a>四、能不宣告變數就別宣告</h2><p>當然你看完上一條建議，決心想要好好適時宣告變數，當一個「貼心的人」的時候。</p><p>這條建議就是要<strong>防止你矯枉過正</strong>，濫用上述建議XD</p><p>這正是程式設計可以稱為「藝術」的地方——<strong>平衡</strong>。</p><blockquote><p>定義臨時變數可以提高可讀性。但有時，把不必要的東西賦值成臨時變數反而會讓程式碼<strong>顯得囉嗦</strong>：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_best_trip_by_user_id</span>(<span class="params">user_id</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># OS：『嗯，這個值未來說不定會修改/二次使用』，讓我們先把它定義成變數吧！</span></span><br><span class="line">    user = get_user(user_id)</span><br><span class="line">    trip = get_best_trip(user_id)</span><br><span class="line">    result = &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: user,</span><br><span class="line">        <span class="string">&#x27;trip&#x27;</span>: trip</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>其實，這段程式碼裡的三個臨時變數完全可以去掉，變成這樣：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_best_trip_by_user_id</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: get_user(user_id),</span><br><span class="line">        <span class="string">&#x27;trip&#x27;</span>: get_best_trip(user_id)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>簡言之，變數是「<strong>我現在就需要</strong>」才宣告——包括臨時變數。</p><hr><h2 id="五、空行也是一種「註解」"><a href="#五、空行也是一種「註解」" class="headerlink" title="五、空行也是一種「註解」"></a>五、空行也是一種「註解」</h2><p>說真的，我本來是打算把這段的標題作為文章標題，但這樣顯然有點「文不對題」。</p><p>空行是<strong>程式碼的一部分</strong>，它可以讓程式碼<strong>更易讀</strong>。</p><p>看看書上怎麼說：</p><blockquote><p>程式碼裡的註解不只是那些常規的描述性語句，有時候，沒有一個字元的空行，也算得上一種特殊的「註解」。</p></blockquote><blockquote><p>在寫程式碼時，我們可以適當地在程式碼中插入空行，<strong>把程式碼按不同的邏輯塊分隔開，這樣能有效提升程式碼的可讀性。</strong></p></blockquote><p>這些道理大家都懂，但<strong>真正做到</strong>的人，可能還不算太多。</p><p>部分開發者對於「空行」的態度，還是比較隨心所欲，未必是著眼於<strong>程式碼的可讀</strong>。</p><p>因此讓人感覺<strong>缺乏一致性</strong>：相同的情況，有時候會空行，有時候又不會。</p><p>所以我才會很想把本段作為文章標題，來強調「空行」的重要性XD</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/beoEztr.png&quot; alt=&quot;Python 工匠&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是《&lt;a href=&quot;https://www.tenlong.com.tw/products/9786263245174&quot;&gt;Python 工匠｜案例、技巧與開發實戰&lt;/a&gt;》筆記的第 3 篇，你可以把它當作是一則重點整理，加上我個人的開發經驗與心得。&lt;/p&gt;
&lt;p&gt;如第一篇所言，這是一本關於「Clean Code in Python」的書。&lt;/p&gt;
&lt;p&gt;上一篇我整理書中了第 13 章「&lt;strong&gt;有關單元測試的建議&lt;/strong&gt;」的內容（以及我的看法）。這次我們要再回到一開始，繼續學習如何寫好程式碼。&lt;/p&gt;
&lt;p&gt;本文整理自書中的第 1 章第 3 節，為了不過度重複書中內容，下筆點到為止，並加上我自己的理解。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/beoEztr.png" type="image"/>
    
    
    <category term="書評 × 筆記" scheme="https://blog.kyomind.tw/categories/%E6%9B%B8%E8%A9%95-%C3%97-%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="Python" scheme="https://blog.kyomind.tw/tags/Python/"/>
    
    <category term="書" scheme="https://blog.kyomind.tw/tags/%E6%9B%B8/"/>
    
    <category term="Clean Code" scheme="https://blog.kyomind.tw/tags/Clean-Code/"/>
    
    <category term="讀書心得" scheme="https://blog.kyomind.tw/tags/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>《Python 功力提升的樂趣》心得與總結：給 Python 開發者的 Clean Code 入門指南</title>
    <link href="https://blog.kyomind.tw/beyond-the-basic-stuff-with-python/"/>
    <id>https://blog.kyomind.tw/beyond-the-basic-stuff-with-python/</id>
    <published>2024-06-30T02:58:44.000Z</published>
    <updated>2024-07-06T10:17:52.386Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/tS78Ke0.png" alt="Python 功力提升的樂趣"><span class="cap">Python 功力提升的樂趣</span></p><p>這是「<a href="/series/#Python-%E5%85%A5%E9%96%80%E4%B8%89%E9%83%A8%E6%9B%B2">Python 入門三部曲</a>」的最後一篇！歷時 2 年，終於要為這個系列劃下句點。</p><p>在此之前，我已寫下 3 篇關於《<a href="https://www.tenlong.com.tw/products/9789865027711">Python 功力提升的樂趣</a>》的筆記與心得。本文建立在它們之上，但會從<strong>更高的俯視角度</strong>來介紹與推薦這本書。</p><p>從全書的<strong>輪廓與定位</strong>切入，讓初學者更容易掌握觀念，不至於迷失在細節中。對於已有經驗的 Python 開發者，則可以藉由一篇篇的筆記，直接找到自己感興趣的章節。</p><p>所以，<strong>本文不會在內容上重複前文，或在細節上多加著墨</strong>，而是<strong>更多的回顧與比較</strong>。</p><p>這是為什麼我要<strong>先寫筆記</strong>，最後再完成這篇<strong>閱讀心得</strong>的原因。</p><p>當然，<strong>不是每一本書都值得你如此對待</strong>。畢竟其中要投入時間精力甚多，這是我第一次——可能也是最後一次，這麼詳細地介紹一本書。</p><p>但這本書，我認為值得。</p><h3 id="系列：Python-入門三部曲"><a href="#系列：Python-入門三部曲" class="headerlink" title="系列：Python 入門三部曲"></a>系列：Python 入門三部曲</h3><blockquote><ol><li><a href="/introducing-python/">《精通 Python 第二版》心得：給入門者的 Python 學習藍圖</a></li><li><a href="/the-quick-python-book/">最佳 Python 入門書——《Python 技術者們 - 練功！》心得與導讀</a></li><li><strong>《Python 功力提升的樂趣》心得與總結：給 Python 開發者的 Clean Code 入門指南</strong></li></ol></blockquote><h3 id="系列：Python-功力提升的樂趣"><a href="#系列：Python-功力提升的樂趣" class="headerlink" title="系列：Python 功力提升的樂趣"></a>系列：Python 功力提升的樂趣</h3><blockquote><ol><li><a href="/beyond-the-basic-stuff-with-python-01/">《Python 功力提升的樂趣》筆記（一）Black、命名、壞味道</a></li><li><a href="/beyond-the-basic-stuff-with-python-02/">《Python 功力提升的樂趣》筆記（二）Pythonic、行話、陷阱</a></li><li><a href="/beyond-the-basic-stuff-with-python-03/">《Python 功力提升的樂趣》筆記（三）函式、註解、docstring</a></li><li><strong>《Python 功力提升的樂趣》心得與總結：給 Python 開發者的 Clean Code 入門指南</strong></li></ol></blockquote><span id="more"></span><hr><p>有鑑於本文是上述兩個系列的<strong>最後一篇</strong>，我打算嘗試一個<strong>與以往截然不同的寫法</strong>。</p><p>改用<strong>回顧與分析</strong>的方式，一步一步地梳理過去各篇文章的<strong>關鍵著眼點</strong>，最後<strong>勾勒</strong>出本書的<strong>核心價值</strong>。為兩個系列同時劃下句點。</p><p>我認為，和其它文章內容的互相比較，更能突顯<strong>本書的整體定位</strong>。</p><p>這或許是我所能想到，最好也<strong>最有趣</strong>的收尾方式。</p><hr><h2 id="「Python-入門書系列」的定位與回顧"><a href="#「Python-入門書系列」的定位與回顧" class="headerlink" title="「Python 入門書系列」的定位與回顧"></a>「Python 入門書系列」的定位與回顧</h2><p>我們先來看看「<strong>Python 入門三部曲</strong>」部分。</p><h3 id="精通-Python-第二版"><a href="#精通-Python-第二版" class="headerlink" title="精通 Python 第二版"></a>精通 Python 第二版</h3><p>第一本我選擇了，可能是全台最暢銷的 Python 書籍——《<a href="https://www.tenlong.com.tw/products/9789865024864">精通 Python 第二版</a>》。</p><p>這是一個「<strong>大而全</strong>」的選擇，儘管它的內容不算深入，而且對於初學者來說，很多部分我覺得也稱不上平易近人。比如介紹 <a href="https://flask.palletsprojects.com/en/3.0.x/">Flask</a> 框架。</p><p>不過它的<strong>基礎語法教學</strong>很值得肯定。</p><p>之所以必須如此，是因為 <strong>Python 使用者實在太多樣化</strong>。彼此的目的不同、需求不同，學習 Python 的方式也必然有所差異。</p><p>所以我們要先準備一張「<strong>藍圖</strong>」，讓我們縱觀 Python 的<strong>全貌</strong>，以及它所能做的到所有事情，再從中做出<strong>屬於自己的取捨</strong>。</p><p>而本書顯然是扮演藍圖角色的絕佳選擇。</p><h3 id="Python-技術者們-練功！"><a href="#Python-技術者們-練功！" class="headerlink" title="Python 技術者們 - 練功！"></a>Python 技術者們 - 練功！</h3><p>有了全局輪廓之後，我們真的要來「<strong>練功</strong>」了。</p><p>對於有特定目標的 Python 使用者，比如使用 Python 進行<strong>資料分析</strong>，可以不必完整地看完這本書，就可以開始動手實作。</p><p>因為很多工作其實<strong>更需要對特定套件的熟悉與了解</strong>，而不是 Python 語言本身。</p><p>可以說，本書的<strong>目標客群</strong>還是更加著眼於「<strong>Python 開發者</strong>」，而不是「Python 使用者」（兩者沒有明確的分界，但仍有些區別）。</p><p>因此，如果你的目標是<strong>成為一名 Python 開發者</strong>，那麼這本書就是你的最佳入門選擇。</p><h3 id="Python-功力提升的樂趣"><a href="#Python-功力提升的樂趣" class="headerlink" title="Python 功力提升的樂趣"></a>Python 功力提升的樂趣</h3><p>最後是我們的主角——《<a href="https://www.tenlong.com.tw/products/9789865027711">Python功力提升的樂趣：寫出乾淨程式碼的最佳實務</a>》。</p><p>為什麼是第三位出場的呢？原因不難理解。</p><p>首先我們要知道 <strong>Python 能做什麼</strong>，然後問自己<strong>想用 Python 做什麼</strong>。</p><p>經過思考，決定成為一個 Python 開發者後，才是如何寫出<strong>乾淨</strong>的 Python 程式碼。</p><p>換句話說，對於主要把 Python 當作<strong>完成工作的工具</strong>的使用者而言，是否能寫出乾淨的 Python 程式碼，恐怕不是特別重要——完成目標才是第一位。</p><p>所以，如果覺得自己不太需要看完上述第二本書，那本書則更加不是必讀。</p><p>這是取捨的<strong>優先順序</strong>，也是<strong>選擇的藝術</strong>。</p><hr><h2 id="誰需要看《Python-功力提升的樂趣》？"><a href="#誰需要看《Python-功力提升的樂趣》？" class="headerlink" title="誰需要看《Python 功力提升的樂趣》？"></a>誰需要看《Python 功力提升的樂趣》？</h2><p>當然是<strong>自認已經或將要成為 Python 開發者</strong>的人。</p><h3 id="Python-開發者"><a href="#Python-開發者" class="headerlink" title="Python 開發者"></a>Python 開發者</h3><p>我們還是試著簡單定義一下，怎麼樣算是一個 Python 開發者：</p><ul><li><strong>熟悉 Python 語法</strong>，使用 Python 開發應用程式、服務或系統。</li><li>你寫的 Python 程式碼<strong>不只要能完成工作</strong>，還會<strong>被讓他人閱讀、維護</strong>。</li><li>對於「<strong>最佳實踐</strong>」有一定追求。不只關心結果，<strong>還關心過程。</strong>因為這將會影響到產出的程式碼<strong>品質</strong>。</li></ul><p>我終究只能列舉一些條件，因為 Python 開發者的定義實在太廣泛了。</p><p>簡而言之，你希望自己的 Python 程式碼<strong>更加乾淨、易讀、易維護</strong>，那麼這本書就是你的好幫手。</p><p>而在我看來，有這樣的心態，就<strong>已經算是</strong>一個 Python 開發者了。</p><hr><h2 id="為什麼要寫乾淨的-Python-程式碼？"><a href="#為什麼要寫乾淨的-Python-程式碼？" class="headerlink" title="為什麼要寫乾淨的 Python 程式碼？"></a>為什麼要寫乾淨的 Python 程式碼？</h2><p><strong>為什麼 Clean Code 很重要？</strong></p><p>乾淨的程式碼有兩個<strong>不可取代</strong>的優點：</p><ol><li><strong>易讀性</strong>：程式碼不僅是給自己，同時也是<strong>給別人看的</strong>。</li><li><strong>易維護性</strong>：當程式碼變得更加複雜時，乾淨的程式碼可以讓你<strong>更容易找到問題</strong>。</li></ol><p>這兩件事，說到底，就是<strong>減少痛苦與省下時間！</strong></p><p>其它都不論，<strong>省下寶貴的時間</strong>就是王道。</p><p>Bug 越少，修 bug 的時間就越少；程式碼越好讀，你就越快找到問題所在。</p><p>誰不想要快樂工作、快樂生活呢？</p><hr><h2 id="「Python-功力提升的樂趣」系列定位與回顧"><a href="#「Python-功力提升的樂趣」系列定位與回顧" class="headerlink" title="「Python 功力提升的樂趣」系列定位與回顧"></a>「Python 功力提升的樂趣」系列定位與回顧</h2><p>好，那我們就來看看，了解了 Python 基本功後，究竟要如何更進一步讓自己的程式碼乾淨、好讀。</p><h3 id="筆記（一）Black、命名、壞味道"><a href="#筆記（一）Black、命名、壞味道" class="headerlink" title="筆記（一）Black、命名、壞味道"></a>筆記（一）Black、命名、壞味道</h3><p>工欲善其事，必先利其器。</p><p>如果專案沒有使用 linter、formatter 來進行開發，那我<strong>幾乎無法想像</strong>，這個專案程式碼會有多麼的雜亂。</p><p>整潔的程式碼有<strong>很多層次</strong>，就像<strong>金字塔</strong>一樣。而機器能夠代勞的，就讓它們代勞吧！</p><p>作者推薦 <a href="https://github.com/psf/black">Black</a>，這是很好的選擇。而現在的我一律推薦 <a href="https://github.com/astral-sh/ruff">Ruff</a>。</p><blockquote><p>相關文章：<a href="/ruff/">Python 開發：Ruff Linter、Formatter 介紹 + 設定教學</a></p></blockquote><p>總之，有這些工具輔助，我們未必能寫出乾淨的程式碼。</p><p>但沒有它們，<strong>一切都只是空談。</strong></p><h3 id="筆記（二）Pythonic、行話、陷阱"><a href="#筆記（二）Pythonic、行話、陷阱" class="headerlink" title="筆記（二）Pythonic、行話、陷阱"></a>筆記（二）Pythonic、行話、陷阱</h3><p>Pythonic 是一個很有趣的概念，它代表了 Python 的<strong>獨特風格</strong>，以及<strong>最佳實務</strong>。</p><p>要達到 Pythonic，就必須要<strong>熟悉 Python 的特性</strong>，並且<strong>適時運用</strong>。</p><p>這需要<strong>長時間的經驗與累積</strong>。</p><p>事實上，只要不是「<strong>有意識地追求</strong>」，無論你寫了再久的 Python，都不一定能夠寫出 Pythonic 的程式碼。</p><p>這不是時間問題，而是「<strong>心態</strong>」問題。</p><p>當然我並不認為每一個 Python 開發者都需要追求 Pythonic，但如果你也想，那本書是一個<strong>很好的開始</strong>。</p><h3 id="筆記（三）函式、註解、docstring"><a href="#筆記（三）函式、註解、docstring" class="headerlink" title="筆記（三）函式、註解、docstring"></a>筆記（三）函式、註解、docstring</h3><p>這篇的重點應該是 <a href="https://en.wikipedia.org/wiki/Docstring">docstring</a>。</p><p>我在許多文章中都強調過 docstring 的重要性。它遠遠不止是單純的註解或文件，應該視為<strong>程式碼的一部分</strong>。</p><p>我很清楚——我非常清楚：一則<strong>用心撰寫</strong>的 docstring，<strong>可以為一個「複雜函式」降低多少「認知負擔」</strong>。可以為函式的閱讀者省下多少理解時間（和腦細胞）。</p><p>然而，<strong>docstring 在實際開發中被輕忽的程度，幾乎與它所帶來的價值一樣巨大。</strong></p><p>在我看來，不寫 docstring、不知道怎麼寫好 docstring，都是<strong>非常非常可惜</strong>的事。</p><p>以後我會專門寫一篇文章，示範如何寫好 Python docstring。我們只需要先知曉：</p><blockquote><p><strong>專案程式碼</strong>不是一堆待執行的指令，做完就好。而是<strong>需要理解與維護的有機體</strong>，docstring 更是其中重要的一環。</p></blockquote><hr><h2 id="結語：Beyond-the-Basic-Stuff-with-Python"><a href="#結語：Beyond-the-Basic-Stuff-with-Python" class="headerlink" title="結語：Beyond the Basic Stuff with Python"></a>結語：Beyond the Basic Stuff with Python</h2><p>沒有人能夠<strong>只因為寫得久</strong>，就自動變成真正的 Python 大師。</p><p>無論是 Pythonic 或 Clean Code，都需要我們在開發這條路上一次又一次捫心自問：</p><blockquote><p>這樣寫，是不是最好的方式？</p></blockquote><p>而本書的最大價值，在於讓這個「起點」<strong>變得清晰且平易近人</strong>。</p><p>因為再往後的 Clean Code 之路，就不再只是表面的程式碼風格，而是需要你了解更多 Python 的<strong>進階特性</strong>，才能夠理解這些設計的<strong>長短得失</strong>與<strong>取捨之道</strong>。</p><p>我們需要一本書，幫助我們打好基礎，培養能力去面對未來更加錯綜複雜的情況。</p><p>而《Python 功力提升的樂趣》無疑是一個<strong>非常稱職的選擇。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/tS78Ke0.png&quot; alt=&quot;Python 功力提升的樂趣&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是「&lt;a href=&quot;/series/#Python-%E5%85%A5%E9%96%80%E4%B8%89%E9%83%A8%E6%9B%B2&quot;&gt;Python 入門三部曲&lt;/a&gt;」的最後一篇！歷時 2 年，終於要為這個系列劃下句點。&lt;/p&gt;
&lt;p&gt;在此之前，我已寫下 3 篇關於《&lt;a href=&quot;https://www.tenlong.com.tw/products/9789865027711&quot;&gt;Python 功力提升的樂趣&lt;/a&gt;》的筆記與心得。本文建立在它們之上，但會從&lt;strong&gt;更高的俯視角度&lt;/strong&gt;來介紹與推薦這本書。&lt;/p&gt;
&lt;p&gt;從全書的&lt;strong&gt;輪廓與定位&lt;/strong&gt;切入，讓初學者更容易掌握觀念，不至於迷失在細節中。對於已有經驗的 Python 開發者，則可以藉由一篇篇的筆記，直接找到自己感興趣的章節。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;本文不會在內容上重複前文，或在細節上多加著墨&lt;/strong&gt;，而是&lt;strong&gt;更多的回顧與比較&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;這是為什麼我要&lt;strong&gt;先寫筆記&lt;/strong&gt;，最後再完成這篇&lt;strong&gt;閱讀心得&lt;/strong&gt;的原因。&lt;/p&gt;
&lt;p&gt;當然，&lt;strong&gt;不是每一本書都值得你如此對待&lt;/strong&gt;。畢竟其中要投入時間精力甚多，這是我第一次——可能也是最後一次，這麼詳細地介紹一本書。&lt;/p&gt;
&lt;p&gt;但這本書，我認為值得。&lt;/p&gt;
&lt;h3 id=&quot;系列：Python-入門三部曲&quot;&gt;&lt;a href=&quot;#系列：Python-入門三部曲&quot; class=&quot;headerlink&quot; title=&quot;系列：Python 入門三部曲&quot;&gt;&lt;/a&gt;系列：Python 入門三部曲&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/introducing-python/&quot;&gt;《精通 Python 第二版》心得：給入門者的 Python 學習藍圖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/the-quick-python-book/&quot;&gt;最佳 Python 入門書——《Python 技術者們 - 練功！》心得與導讀&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;《Python 功力提升的樂趣》心得與總結：給 Python 開發者的 Clean Code 入門指南&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;系列：Python-功力提升的樂趣&quot;&gt;&lt;a href=&quot;#系列：Python-功力提升的樂趣&quot; class=&quot;headerlink&quot; title=&quot;系列：Python 功力提升的樂趣&quot;&gt;&lt;/a&gt;系列：Python 功力提升的樂趣&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/beyond-the-basic-stuff-with-python-01/&quot;&gt;《Python 功力提升的樂趣》筆記（一）Black、命名、壞味道&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/beyond-the-basic-stuff-with-python-02/&quot;&gt;《Python 功力提升的樂趣》筆記（二）Pythonic、行話、陷阱&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/beyond-the-basic-stuff-with-python-03/&quot;&gt;《Python 功力提升的樂趣》筆記（三）函式、註解、docstring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;《Python 功力提升的樂趣》心得與總結：給 Python 開發者的 Clean Code 入門指南&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    <content src="https://i.imgur.com/tS78Ke0.png" type="image"/>
    
    
    <category term="書評 × 筆記" scheme="https://blog.kyomind.tw/categories/%E6%9B%B8%E8%A9%95-%C3%97-%E7%AD%86%E8%A8%98/"/>
    
    
    <category term="Python" scheme="https://blog.kyomind.tw/tags/Python/"/>
    
    <category term="書" scheme="https://blog.kyomind.tw/tags/%E6%9B%B8/"/>
    
    <category term="Clean Code" scheme="https://blog.kyomind.tw/tags/Clean-Code/"/>
    
    <category term="讀書心得" scheme="https://blog.kyomind.tw/tags/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
</feed>
