<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/favicon-32x32.png</icon>
  <subtitle>Kyo 的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2025-01-16T00:10:38.416Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>Kyo Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>壓力太大怎麼辦？——接受殘缺與遺憾</title>
    <link href="https://blog.kyomind.tw/weekly-review-40/"/>
    <id>https://blog.kyomind.tw/weekly-review-40/</id>
    <published>2025-01-07T09:36:03.000Z</published>
    <updated>2025-01-16T00:10:38.416Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>各位朋友們，新年快樂！2025 年到了！而我又好一段時間沒寫 Weekly Review 了😅</p><p>這是第 40 期。從本期開始，我決定不再於標題前方放期數前綴，讓它看起來更自然。</p><p>對我來說，一篇文章究竟要放「<a href="/categories/%E5%BF%83%E5%BE%97/">心得</a>」還是「<a href="/categories/Weekly-Review/">Weekly Review</a>」，有時候真是想破頭——作繭自縛的範例。</p><p>兩者其實很難有明確的分界，真要說的話，較零碎、個人的部分我會放這裡。較完整、面向客觀事物的看法，則偏好放心得。</p><p>這篇文章想分享一些最近的雜感，有點零散，請多見諒。</p><span id="more"></span><hr><p>前幾天，我發了一篇關於<a href="/bbc-6-minute-english/">學英文的文章</a>。不知道你是否好奇：「我是不是一個沒事都在想著學習的人？」</p><p>答案——好像是如此！</p><p>但我覺得這並不是一件好事，至少不完全是。因為<strong>學習不等於創造價值</strong>，如果學習最終只成為了<strong>自我滿足</strong>，而無法帶來實際的影響，那我<strong>寧可不學</strong>。</p><p>隨著時間的推移，我愈明白一件事——<strong>人生有限，我更希望為自己和他人創造價值</strong>。</p><p>因為當生命走到終點時，或許最讓人感到欣慰的，並不是「學到了多少」，而是「<strong>做到了多少</strong>」。</p><p>當然，誰學習不是想創造價值呢？可惜很多時候都<strong>事與願違</strong>而已。</p><p>而且我覺得，所謂熱衷學習，往往也會帶來不少的<strong>額外壓力</strong>。</p><p>你是否也有同感，光看到〈<a href="/network-101-course/">《給網站工程師的網路課》心得：Web 開發者的網路學習指南</a>〉、〈<a href="/grind-leetcode-with-ai-preparation/">與 AI 共舞——我的 LeetCode 刷題之道（準備篇）</a>〉這類的文章標題，就不禁帶給人一種壓力😰</p><p>至少我有啦！</p><h2 id="求職壓力與刷題"><a href="#求職壓力與刷題" class="headerlink" title="求職壓力與刷題"></a>求職壓力與刷題</h2><p>壓力百百種，但「<strong>軟體工程師求職</strong>」的壓力正是讓人很想逃避的那種XD</p><p>作為一個軟體工程師，面試不只是談談過去的專案與技術經驗，還需要刷題、學習系統設計等等。</p><p>尤其是<strong>刷題</strong>，需要額外投入一定的時間和心力，是智識上的一大挑戰。</p><p>我不愛刷題，但我也理解，刷題對於了解這些資料結構、演算法，確實有其價值。</p><p>而且退萬步言，這就是目前公司用來篩選人才的方式之一。</p><p>即使不喜歡，該做的準備還是要做。</p><hr><h2 id="反脆弱與-aMCC"><a href="#反脆弱與-aMCC" class="headerlink" title="反脆弱與 aMCC"></a>反脆弱與 aMCC</h2><p>求職的日子，也讓我開始重新思考<strong>自己與挑戰、壓力之間的關係</strong>。</p><p>剛好，昨天聽到 JR Lee 的 Podcast〈<a href="https://www.youtube.com/watch?v=hPdrI2zi3Kg">什麼是反脆弱？如何面對壓力，讓自己變得更強？｜The JR Lee Podcast Ep067</a>〉。</p><p>JR Lee 是我很喜歡的一位創作者。我不只喜歡他的內容本身，更欣賞他對創作的態度——為那一小群願意支持深度內容的讀者與觀眾，全心全意地投入創作。</p><p>這樣的「創作魂」讓我感動，儘管這注定不是大眾路線，但我深表認同。</p><p>所以看到一半時，我又「抖內」了 500 塊😘</p><h3 id="aMCC-與抗壓力"><a href="#aMCC-與抗壓力" class="headerlink" title="aMCC 與抗壓力"></a>aMCC 與抗壓力</h3><p>在這期節目裡，有段內容讓我印象深刻：（整理 by NotebookLM）</p><blockquote><p>節目提到一個大腦區域——<strong>aMCC</strong>（Anterior Mid-Cingulate Cortex，前扣帶皮層中部），它和人類的意志力、求生本能有很大的關聯。</p></blockquote><blockquote><p>雖然目前對 aMCC 的研究還處於初期階段，但科學家們相信 aMCC 不僅與意志力有關，更與求生意志密切相關。<strong>擁有較大的 aMCC 代表著更強大的意志力和求生意志，這能幫助人們在面對挑戰和壓力時，更能堅持下去，並最終克服挑戰。</strong></p></blockquote><blockquote><p>科學家發現，aMCC 的大小<strong>會隨著個人狀態改變</strong>。例如，肥胖者的 aMCC 較小，但節食後會變大；運動員的 aMCC 通常較大，而<strong>那些經常挑戰自我、克服困難的人，aMCC 甚至可以「持續變大」。</strong></p></blockquote><p>那麼，<strong>如何讓 aMCC 變大？</strong></p><blockquote><p>從事讓你<strong>感到厭惡、但具挑戰性的事情</strong>。 當你投入精力去做那些困難、讓你抗拒的事時，aMCC 就會增長。<strong>反之，當你過於安於現狀時，aMCC 會逐漸縮小。</strong></p></blockquote><p>這段理論讓我得到了一絲慰藉——至少在面對求職壓力時，可以勇敢安慰自己：「我的 aMCC 正在變大呢！」😆</p><hr><h2 id="降低期待，減少焦慮"><a href="#降低期待，減少焦慮" class="headerlink" title="降低期待，減少焦慮"></a><strong>降低期待，減少焦慮</strong></h2><p>作為一個高敏感型人格（HSP）、I 型人，我很希望自己能<strong>對壓力沒那麼敏感</strong>、不要那麼容易焦慮。</p><p>按照上述內容，看起來想辦法讓 aMCC 增大是一個方向XD</p><p>但這畢竟需要一定的時間和精力（還得「勉強」自己🥹），有沒有更簡單的辦法？有！</p><p>節目中還提到了一個我很喜歡的觀念，那就是——<strong>不要太認真</strong>！簡單來說，就是要學會「<strong>降低期待</strong>」。</p><p>很多事情（真的很多），<strong>70 分就是滿分</strong>。當你不再追求 80、90 分時，<strong>反而更容易發揮出好表現</strong>，因為你的大腦不會因為害怕失敗、壓力過大而<strong>認知癱瘓</strong>。</p><p>這也是我在準備面試時最大的感悟：只求沒有明顯弱點XD，別想著面面俱到。</p><p>當然，完全不準備是不可行的，<strong>但在某些細節上學會適可而止，往往能保持更好的心理狀態。</strong></p><p>講白了就是：<strong>請為自己鬆一口氣😇</strong></p><hr><h2 id="小結：接受殘缺與遺憾"><a href="#小結：接受殘缺與遺憾" class="headerlink" title="小結：接受殘缺與遺憾"></a>小結：接受殘缺與遺憾</h2><p>最後，我想分享一段話，來自我之前的文章〈<a href="/less-is-more/#%E7%B5%90%E8%AA%9E%EF%BC%9A%E6%8E%A5%E5%8F%97%E6%AE%98%E7%BC%BA%E8%88%87%E9%81%BA%E6%86%BE">為什麼你「不需要」所謂的人生管理系統</a>〉：</p><blockquote><p>手段可以殘缺。唯有本質的完整，才值得我們一心追求——至死方休。</p></blockquote><blockquote><p>接受殘缺並不意味著放棄進步，而是在進步的過程中，<strong>試著學會區分：哪些只是手段，而哪些才是本質。</strong></p></blockquote><blockquote><p>擺脫對系統的「<strong>依賴</strong>」後，甚至會發現，我們的生產力<strong>其實已經有了顯著的提升</strong>。這樣的提升，<strong>來自於我們對「自身侷限」的理解和接受。</strong></p></blockquote><blockquote><p>這種心態的轉變，不僅提高了生產力，更重要的是：<strong>減少了不必要的壓力和焦慮。</strong></p></blockquote><p>重新看完後，我不禁心想：「這文章，也寫得太好了吧！」</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;各位朋友們，新年快樂！2025 年到了！而我又好一段時間沒寫 Weekly Review 了😅&lt;/p&gt;
&lt;p&gt;這是第 40 期。從本期開始，我決定不再於標題前方放期數前綴，讓它看起來更自然。&lt;/p&gt;
&lt;p&gt;對我來說，一篇文章究竟要放「&lt;a href=&quot;/categories/%E5%BF%83%E5%BE%97/&quot;&gt;心得&lt;/a&gt;」還是「&lt;a href=&quot;/categories/Weekly-Review/&quot;&gt;Weekly Review&lt;/a&gt;」，有時候真是想破頭——作繭自縛的範例。&lt;/p&gt;
&lt;p&gt;兩者其實很難有明確的分界，真要說的話，較零碎、個人的部分我會放這裡。較完整、面向客觀事物的看法，則偏好放心得。&lt;/p&gt;
&lt;p&gt;這篇文章想分享一些最近的雜感，有點零散，請多見諒。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="生活" scheme="https://blog.kyomind.tw/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>BBC 6 Minute English：提升英文聽力的好夥伴</title>
    <link href="https://blog.kyomind.tw/bbc-6-minute-english/"/>
    <id>https://blog.kyomind.tw/bbc-6-minute-english/</id>
    <published>2025-01-04T09:07:18.000Z</published>
    <updated>2025-01-05T16:06:47.623Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/aL3kCBo.jpeg" alt="6 Minute English by BBC Learning English"><span class="cap">6 Minute English by BBC Learning English</span></p><p>眾所周知，<strong>學英文</strong>不僅是軟體工程師的常見需求，更是許多台灣人的長期課題。</p><p>我自然也不例外。</p><p>為了彌補自己在英文<strong>聽力</strong>和<strong>閱讀</strong>之間的落差，我最近開始重新<strong>練習英文聽力</strong>。而我使用的素材，如標題所言，正是 <a href="https://www.youtube.com/playlist?list=PLcetZ6gSk96-FECmH9l7Vlx5VDigvgZpt">BBC 6 Minute English</a> 節目——外加 AI 🤖</p><hr><h2 id="為什麼開始練習聽力？"><a href="#為什麼開始練習聽力？" class="headerlink" title="為什麼開始練習聽力？"></a>為什麼開始練習聽力？</h2><p>多年前第一次轉職求職之際，曾考過一次多益（當公務員時完全不需要這東西XD），我的總分為 785 分，閱讀拿到 440 分，聽力則只有 345 分。</p><p>兩者相差了 95 分。</p><p>這樣的差距與<strong>不均</strong>，難免讓人不快，也反映了許多台灣人的常見問題：我們能讀懂英文文章，卻<strong>無法聽懂簡單的日常對話</strong>。</p><p>提升英文聽力的動機很多，比如希望<strong>進入外商工作</strong>，或是在國外旅遊時能<strong>與當地人交流</strong>等等。我應該屬於前者。</p><p>在台灣，生活中缺乏自然的英文環境，我們必須自行尋找適合自己的練習方式。</p><p>在嘗試多種方法後，我發現目前的方式相對簡單且可持續，<strong>不會太過負擔</strong>。</p><p>至於有沒有效，等我實踐一段時間後，再向大夥報告🫡</p><span id="more"></span><h2 id="為何選擇-BBC-6-Minute-English？"><a href="#為何選擇-BBC-6-Minute-English？" class="headerlink" title="為何選擇 BBC 6 Minute English？"></a>為何選擇 BBC 6 Minute English？</h2><p><a href="https://www.bbc.co.uk/learningenglish/english/features/6-minute-english">BBC 6 Minute English</a> 是一個圍繞熱門話題和實用知識進行探討的節目，內容涵蓋新聞事件、科普、文化背景等不同主題。</p><p>兩位主持人透過<strong>輕鬆的對談形式</strong>，引導聽眾學習<strong>關鍵詞彙</strong>並理解背景資訊，很適合用來提升聽力並增加英文詞彙量。</p><p>你可以在 <strong>BBC Learning English</strong> 的 <a href="https://www.youtube.com/@bbclearningenglish">YouTube 頻道</a>上看到所有集數。</p><p>主持人<strong>語速適中</strong>，雖然是英國腔，但由於是<strong>針對英語學習者設計的內容</strong>，因此發音清晰標準，不會構成太多理解障礙，是理想的聽力學習素材。</p><p>相比動輒 40 分鐘或一小時的影集，這樣的短節目更容易融入日常生活、減少負擔。</p><p>不過有一點需要留意：6 Minute English 的<strong>難度定位</strong>是 <strong>Intermediate level（中級）</strong>，真正的初學者可以考慮 <a href="https://learningenglish.voanews.com/">VOA</a>（Voice of America）等更簡單的節目。</p><hr><h2 id="其他方法的嘗試與反省"><a href="#其他方法的嘗試與反省" class="headerlink" title="其他方法的嘗試與反省"></a>其他方法的嘗試與反省</h2><p>在找到 BBC 6 Minute English 之前，我嘗試過其他方法，但效果有限——應該說<strong>難以持續</strong>。</p><h3 id="1-影集學習法"><a href="#1-影集學習法" class="headerlink" title="1. 影集學習法"></a>1. 影集學習法</h3><p>看美劇學英文！你可能不陌生，但我覺得很難XD</p><p>首先，我平常看劇就是為了放鬆，這和「學習」這個目標<strong>恰好相反</strong>，難免有些心理上的排斥。</p><p>而且實際操作時，我很難專心聽完整集（其實半集也無法），劇情進展速度常超過對話理解能力。與其說在「練習聽力」，更像是被劇情牽著走，效果不彰。</p><p>當然，這很可能是我聽力太弱了。但我想強調的是：我個人並不喜歡這個方式。</p><h3 id="2-VoiceTube"><a href="#2-VoiceTube" class="headerlink" title="2. VoiceTube"></a>2. VoiceTube</h3><p>我也使用過 VoiceTube 這個學習平台，影片長度約 5 分鐘，這大幅和緩了<strong>專注力不足</strong>的問題。</p><p>甚至還訂了一年份的「<a href="https://www.google.com/search?q=VoiceTube%20Hero">VoiceTube Hero</a>」，因為看到網路上一片好評，加上 YouTube 網紅的折扣，所以忍不住刷卡了！</p><p>說真的，當下也是充滿信心，覺得口說、聽力應該有救了XD</p><p>然而事與願違，用了一個月後，前幾天我提交了退費申請，因為我覺得<strong>課程設計不符合我的需求</strong>。具體細節有機會再另篇說明，畢竟這不是本文重點。</p><p>這裡不是說它無效，願意聽肯定有效，只是我無法持續下去。</p><p>話說回來，單就那些影片，我認為還是很不錯的聽力素材。</p><hr><h2 id="BBC-6-Minute-English-AI"><a href="#BBC-6-Minute-English-AI" class="headerlink" title="BBC 6 Minute English + AI"></a>BBC 6 Minute English + AI</h2><p>接觸 BBC 6 Minute English 後，我確定了<strong>結合 AI 工具來輔助並提升聽力</strong>的練習流程。終於不用再尋尋覓覓，因為這就是我要的。</p><p>所謂的 AI，具體而言就像「<a href="https://blog.kyomind.tw/gpts-for-leetcode/#%E4%B8%80%E3%80%81%E3%80%8C%E5%93%A9%E5%93%A9%E6%89%A3%E6%89%A3%E3%80%8DGPTs-%E4%BB%8B%E7%B4%B9">哩哩扣扣</a>」，它也是一個 GPTs，負責幫我「出選擇題」來進行聽力測驗。</p><p>這要感謝 BBC 6 Minute English <strong>每一集都有字幕（逐字稿）</strong>，只要把字幕提供給 AI，它就能知道這一集的內容，然後出題。</p><p>這個 GPTs 叫「<a href="https://chatgpt.com/g/g-6760497918c8819187ea4b7209ba30b6-earwise">EarWise</a>」，只有我自己在用，但因為寫了這篇文章我就直接公開了，有興趣可以自行試試，起手式就是<strong>把字幕上傳餵給它，然後送出</strong>。</p><p>它的第一次回應大概如下（每次不盡相同）：</p><p><img src="https://i.imgur.com/kvdZbte.png" alt="EarWise"><span class="cap">EarWise</span></p><p>剩下的部分，如圖，你應該知道怎麼做了。有機會我們再另篇介紹。</p><p>不止 BBC，其實它<strong>可以用在任何英文節目</strong>！有沒有覺得活在 AI 時代真的很幸福😇</p><hr><h2 id="具體流程與實踐"><a href="#具體流程與實踐" class="headerlink" title="具體流程與實踐"></a>具體流程與實踐</h2><p>以下是我練習聽力的整體流程！大概需要 30 分鐘。</p><h3 id="1-初次聆聽節目"><a href="#1-初次聆聽節目" class="headerlink" title="1. 初次聆聽節目"></a>1. 初次聆聽節目</h3><p>完整聆聽 6 分鐘的內容，不使用任何字幕輔助，專注於理解主持人的對話脈絡。</p><p>俗稱「<strong>裸聽</strong>」。</p><h3 id="2-利用-AI-生成練習題（選擇題）"><a href="#2-利用-AI-生成練習題（選擇題）" class="headerlink" title="2. 利用 AI 生成練習題（選擇題）"></a>2. <strong>利用 AI 生成練習題（選擇題）</strong></h3><p>將該集字幕丟給 AI，生成選擇題，看看每一題內容，嘗試作答。</p><p>有些題目你可能會了，有些則還沒有聽清楚，沒關係，請先「<strong>記得這些題目</strong>」。</p><p><img src="https://i.imgur.com/6mMZo8i.png" alt="EarWise"><span class="cap">EarWise</span></p><h3 id="3-第二次，帶著問題重新聆聽"><a href="#3-第二次，帶著問題重新聆聽" class="headerlink" title="3. 第二次，帶著問題重新聆聽"></a>3. 第二次，帶著問題重新聆聽</h3><p><strong>帶著問題學習</strong>有助於記憶和理解，聽力也不例外。</p><p>看完聽力練習題後，再次聆聽內容，這次我們就可以<strong>集中在與選擇題有關的部分</strong>。</p><p>這就跟你<strong>看完目錄才開始讀書</strong>是類似的，你會<strong>更有「問題意識」</strong>。</p><p>這會增進你的聽力與理解——因為<strong>認知的範圍縮小了</strong>。</p><h3 id="4-作答選擇題、產出筆記"><a href="#4-作答選擇題、產出筆記" class="headerlink" title="4. 作答選擇題、產出筆記"></a>4. 作答選擇題、產出筆記</h3><p>依序使用下列三個指令對內容進行解析，這個很好懂，就不多解釋：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a (--answers)：提供選擇題答案與解析</span><br><span class="line">-n (--notes)：產生內容與語言學習重點筆記</span><br><span class="line">-t (--take-offs)：從筆記中萃取關鍵學習重點</span><br></pre></td></tr></table></figure><p>我通常會把<code>-t</code>的內容整理到 Notion，但會不會複習我就不敢說了😅</p><h3 id="5-聽第三次，開字幕！"><a href="#5-聽第三次，開字幕！" class="headerlink" title="5. 聽第三次，開字幕！"></a>5. 聽第三次，開字幕！</h3><p>沒錯，還沒完，而且這一步非常重要，可謂——last but not the least。</p><p>最後一次聆聽，<strong>開啟字幕來確認自己的理解是否正確</strong>。</p><p>這個步驟不僅能夠幫助我確認之前<strong>可能聽錯的部分</strong>，還能加深對單字和片語的印象。在這個階段，我會特別注意那些之前<strong>聽不清楚</strong>的段落。</p><p>我認為，如果少了這最後一次的聽力練習，那整體的學習效果可能會<strong>大打扣折</strong>。</p><hr><h2 id="做法與思路解析"><a href="#做法與思路解析" class="headerlink" title="做法與思路解析"></a>做法與思路解析</h2><p>法律系畢業的我，酷愛對任何重要事情的<strong>想法、思路</strong>進行整理，已經到了<strong>偏執狂</strong>的地步——寫程式也是如此😈</p><p>因此，對於「<strong>如何練習並增進英文聽力</strong>」這個議題，我也有一些話要說。這些想法主要源自過去的經驗和偏好，你看看就好。</p><p>我個人並不喜歡聽西洋歌曲，美劇也是可看可不看。所以很難用這方面（娛樂）來驅動自己學習英文，尤其是聽力。</p><p>所以，對我來說，我更需要「<strong>簡單、可重複</strong>」的策略。</p><p>這個策略的重點是<strong>阻力很低（簡單）</strong>，而且<strong>方便每天進行（可重複）</strong>。這樣就足夠了！</p><p>上述兩種「失敗」方法，對我來說不僅阻力大，就結果而言，常常也是三天曬網、兩天捕魚，難以堅持。</p><h3 id="方法簡評"><a href="#方法簡評" class="headerlink" title="方法簡評"></a>方法簡評</h3><p>BBC 6 Minute English 結合 AI，不僅縮短了單次學習的時間負擔——因為一集不長。藉由 AI 解說，更提升了你<strong>對細節的理解</strong>。</p><p>對於聽力還在起步階段的人（我也是），強烈建議避免「貪多」，可以從短節目開始，專注於重複聆聽，以獲得<strong>相對穩定的學習熟練度</strong>。</p><p>此外，<strong>降低學習過程中的阻力</strong>非常重要。</p><p>尤其對於工作或生活中<strong>不常用到英文</strong>的人，<strong>減少阻力</strong>可說是持續學習的<strong>唯一</strong>關鍵。</p><p>因此我選擇每集約 5-6 分鐘的內容，這樣的時長不會帶來太多負擔，反而更容易融入日常生活——任何時候開始都可以。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>你覺得，學英文是必要的嗎？我不認為。</p><p>個人非常認同 <a href="https://www.facebook.com/will.fans/?locale=zh_TW">Will 保哥</a>在《<a href="https://www.accupass.com/event/2408150700092666728070">ChatGPT 進階語音互動：打造個人化的英語口說教練</a>》這堂課中說的：「學語言如果沒有動機就別學了！」——事倍功半。</p><p>既然要學，就選擇擇一個<strong>不會太痛苦，又容易持續</strong>的方式，畢竟刻苦不是我的 style 😇</p><p>我認為「BBC 6 Minute English + AI」就是這樣的方式。</p><p>希望我們都能在每一天的練習中，逐步提升自己。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aL3kCBo.jpeg&quot; alt=&quot;6 Minute English by BBC Learning English&quot;&gt;&lt;/p&gt;
&lt;p&gt;眾所周知，&lt;strong&gt;學英文&lt;/strong&gt;不僅是軟體工程師的常見需求，更是許多台灣人的長期課題。&lt;/p&gt;
&lt;p&gt;我自然也不例外。&lt;/p&gt;
&lt;p&gt;為了彌補自己在英文&lt;strong&gt;聽力&lt;/strong&gt;和&lt;strong&gt;閱讀&lt;/strong&gt;之間的落差，我最近開始重新&lt;strong&gt;練習英文聽力&lt;/strong&gt;。而我使用的素材，如標題所言，正是 &lt;a href=&quot;https://www.youtube.com/playlist?list=PLcetZ6gSk96-FECmH9l7Vlx5VDigvgZpt&quot;&gt;BBC 6 Minute English&lt;/a&gt; 節目——外加 AI 🤖&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;為什麼開始練習聽力？&quot;&gt;&lt;a href=&quot;#為什麼開始練習聽力？&quot; class=&quot;headerlink&quot; title=&quot;為什麼開始練習聽力？&quot;&gt;&lt;/a&gt;為什麼開始練習聽力？&lt;/h2&gt;&lt;p&gt;多年前第一次轉職求職之際，曾考過一次多益（當公務員時完全不需要這東西XD），我的總分為 785 分，閱讀拿到 440 分，聽力則只有 345 分。&lt;/p&gt;
&lt;p&gt;兩者相差了 95 分。&lt;/p&gt;
&lt;p&gt;這樣的差距與&lt;strong&gt;不均&lt;/strong&gt;，難免讓人不快，也反映了許多台灣人的常見問題：我們能讀懂英文文章，卻&lt;strong&gt;無法聽懂簡單的日常對話&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;提升英文聽力的動機很多，比如希望&lt;strong&gt;進入外商工作&lt;/strong&gt;，或是在國外旅遊時能&lt;strong&gt;與當地人交流&lt;/strong&gt;等等。我應該屬於前者。&lt;/p&gt;
&lt;p&gt;在台灣，生活中缺乏自然的英文環境，我們必須自行尋找適合自己的練習方式。&lt;/p&gt;
&lt;p&gt;在嘗試多種方法後，我發現目前的方式相對簡單且可持續，&lt;strong&gt;不會太過負擔&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;至於有沒有效，等我實踐一段時間後，再向大夥報告🫡&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/aL3kCBo.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="語言學習" scheme="https://blog.kyomind.tw/tags/%E8%AA%9E%E8%A8%80%E5%AD%B8%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title>我的 LeetCode 筆記：記錄刷題的簡單做法</title>
    <link href="https://blog.kyomind.tw/leetcode-notes-method/"/>
    <id>https://blog.kyomind.tw/leetcode-notes-method/</id>
    <published>2024-12-24T06:19:26.000Z</published>
    <updated>2024-12-24T09:47:03.942Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/g9WO9S7.jpeg"></p><p>系列的前兩篇中，我們首先介紹了準備工作、學習資源和基本的刷題原則，這些內容<strong>特別適合初學者或希望減少刷題壓力的讀者</strong>。畢竟我也不喜歡刷題😂</p><p>接著，在第二篇裡，我們討論了如何使用 AI 工具（我設計的 <a href="https://chatgpt.com/g/g-6731960a3a2081909fe1975e05c034c4-li-li-kou-kou">GPTs</a>）來提高刷題效率（或說提高「意願」），以及使用 AI 輔助刷題時的一些重點與注意事項。</p><p>如果你還沒看過前兩篇，建議可以先看看，會對整個學習脈絡有更清楚的理解。</p><h3 id="系列：我的-LeetCode-刷題之道"><a href="#系列：我的-LeetCode-刷題之道" class="headerlink" title="系列：我的 LeetCode 刷題之道"></a>系列：我的 LeetCode 刷題之道</h3><ul><li><a href="https://blog.kyomind.tw/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93">文章清單（連載中）</a></li></ul><p>本文將聚焦於刷題過程中的<strong>筆記</strong>環節，採取簡單、實用的筆記方式，讓你的學習過程更有條理，並在複習時更加輕鬆。</p><p>話不多說，讓我們開始。</p><span id="more"></span><hr><h2 id="為什麼要做筆記？"><a href="#為什麼要做筆記？" class="headerlink" title="為什麼要做筆記？"></a>為什麼要做筆記？</h2><p>學習是否一定要做筆記？不同的人有不同看法。我也遇過很厲害但不太做筆記的人。</p><p><a href="https://www.facebook.com/will.fans/">保哥</a>在其臉書發文中提過：</p><p><img src="https://i.imgur.com/lvzlAud.png"></p><p>這段內容<strong>讓我最有感觸</strong>的是「<strong>只有不到 1% 會重看一次</strong>」，你也有類似經驗嗎？</p><p>我學習時幾乎都會做筆記。不過，不得不承認，「做了卻沒複習」這件事也很常發生。</p><p>而且我覺得，筆記如果沒有被複習，<strong>那其實和沒做差不多</strong>——都是船過水無痕。</p><p>所以，筆記建議不要寫太多、太長，組織上也不要太複雜，夠用就好。</p><blockquote><p>延伸閱讀：<a href="/less-is-more/">為什麼你「不需要」所謂的人生管理系統</a></p></blockquote><p>我的 LeetCode 筆記法相對簡單，沒有使用任何專門的筆記軟體，只是將程式碼和筆記緊密結合在一起，放在 Git repo（repository）中。</p><p>接下來，我將分享具體的做法、思路與注意事項。</p><hr><h2 id="Git-Repo-介紹"><a href="#Git-Repo-介紹" class="headerlink" title="Git Repo 介紹"></a>Git Repo 介紹</h2><p>把刷題筆記放在一個 repo 中，是「簡單筆記」的第一步——可能是最重要的一步。</p><p>我將所有寫過的 LeetCode 題目與筆記放在一個 Git repo 裡，並同步到 GitHub，名為「<a href="https://github.com/kyomind/Grind-75">Grind-75</a>」。</p><p>這個名稱顯然是「致敬」第一篇提到的刷題清單「<a href="https://www.techinterviewhandbook.org/grind75/">Grind 75</a>」，同時也是期許自己刷個 75 題就好。</p><p>Repo 的結構非常簡單，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── pyproject.toml</span><br><span class="line">└── solutions</span><br><span class="line">    ├── 1. Two Sum.md</span><br><span class="line">    ├── 1. Two Sum.py</span><br><span class="line">    ├── 102. Binary Tree Level Order Traversal.md</span><br><span class="line">    ├── 102. Binary Tree Level Order Traversal.py</span><br><span class="line">    ├── ...(中略)</span><br><span class="line">    ├── 973. K Closest Points to Origin.md</span><br><span class="line">    ├── 973. K Closest Points to Origin.py</span><br><span class="line">    └── 98. Validate Binary Search Tree.py</span><br></pre></td></tr></table></figure><p>每道題目都會有一個同名的 Python 檔案。（我用 Python 刷題）</p><p>此外，複習時會再建立一個同名的 Markdown 筆記，補充更多內容。兩者的搭配構成了我的筆記總合。</p><p>這樣的組織方式有幾個好處：</p><ol><li><strong>檔名與題目名稱一致</strong>：能快速定位到需要查看的題目。</li><li><strong>版本管理（版控）</strong>：版控的重要性在開發時自不待言，寫筆記倒是還好。主要的好處應該是：要刪內容時可以「大方」一點，反正有 Git！</li><li><strong>相互對照</strong>：放在同一個地方，筆記和程式碼方便快速對照。</li></ol><p>Git repo 也方便上傳到 GitHub 分享、供他人參考。雖然除了自己應該沒人會想看🤣，但至少是個足跡！</p><hr><h2 id="筆記方法與流程"><a href="#筆記方法與流程" class="headerlink" title="筆記方法與流程"></a>筆記方法與流程</h2><p>刷題時，我分兩個階段建立筆記。</p><p>這些做法目前都還在<strong>實驗階段</strong>，可作為參考。</p><p>如果後續有更新或不同想法，我會再回來修正、補充。</p><h2 id="第一次刷題：記錄在-Python-檔中"><a href="#第一次刷題：記錄在-Python-檔中" class="headerlink" title="第一次刷題：記錄在 Python 檔中"></a>第一次刷題：記錄在 Python 檔中</h2><p>在第一次刷題時，我的重心在於「理解」。此時大部分時候都不是我獨立完成答案，而是與 AI 協作。</p><p>在這階段，我會將筆記以「程式碼註解」形式寫在 Python 檔裡，格式有兩種：</p><ol><li><strong>使用「單行註解」記錄重點</strong>：說明解題意圖、做法，或需要特別注意的細節。</li><li><strong>使用「多行字串」記錄長筆記</strong>：例如思路分析或 AI 提供的重要觀念。</li></ol><p>範例如下，來自「<a href="https://github.com/kyomind/Grind-75/blob/main/solutions/102.%20Binary%20Tree%20Level%20Order%20Traversal.py">102. Binary Tree Level Order Traversal.py</a>」：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 BFS 進行層序遍歷 + queue</span></span><br><span class="line"><span class="comment"># 這過程和爬蟲一個網站非常像</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root</span>):</span><br><span class="line">        levels = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> levels</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化佇列，將根節點加入佇列</span></span><br><span class="line">        <span class="comment"># XXX 這裡使用 list 來模擬 queue，在移除第一個元素時，效率較低</span></span><br><span class="line">        <span class="comment"># 可以使用 collections.deque 來實現，移除時則使用 popleft() 方法</span></span><br><span class="line">        <span class="comment"># queue = deque([root])</span></span><br><span class="line">        queue = [root]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 開始 BFS</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>我會適時使用「<code>XXX</code>」這類 Code Tags 來標註特別重要的部分。如上述第 10 行。</p><h2 id="第一次複習：建立-Markdown-筆記"><a href="#第一次複習：建立-Markdown-筆記" class="headerlink" title="第一次複習：建立 Markdown 筆記"></a>第一次複習：建立 Markdown 筆記</h2><p>當我第二次接觸這道題目（第一次複習）時，會再新增一個 Markdown 檔案，<strong>進一步補充</strong>筆記內容。</p><p>這些 Markdown 筆記通常包括：</p><ul><li>和 AI 的<strong>關鍵環節問答</strong>。</li><li>具體的<strong>易錯點</strong>分析。</li><li>自己對解題的<strong>額外補充或心得</strong>。</li></ul><p>範例如下，取自「<a href="https://github.com/kyomind/Grind-75/blob/main/solutions/567.%20Permutation%20in%20String.md">567. Permutation in String.md</a>」：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2024-12-13</span></span><br><span class="line"><span class="section">## 我反對使用 range() 來滑動視窗</span></span><br><span class="line">在LeetCode官方的題目tag中，給的是「Hash Table Two Pointers String Sliding Window」</span><br><span class="line">如果用range，其實就沒有突顯Two Pointers的實作，要用while才有</span><br><span class="line">我覺得range方法雖然「簡潔」，但理解負擔也很大——更加抽象，而且更加「不通用」(無法離開Python)</span><br><span class="line"></span><br><span class="line"><span class="section">##  ChatGPT</span></span><br><span class="line">你說得非常有道理！在 <span class="strong">**LeetCode 官方標籤**</span> 中，明確提到 <span class="strong">**Two Pointers**</span>，但如果我們使用 <span class="code">`range`</span> 搭配索引來寫，雖然程式碼簡潔，但這種寫法：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**沒有突顯 Two Pointers**</span> 的概念：雙指標本質上是維護兩個獨立的索引來滑動視窗，而非透過單個索引來完成。</span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**抽象度較高**</span>：對於初學者來說，<span class="code">`range(len(s1), len(s2))`</span> 的邏輯並不直觀，理解它為什麼能模擬視窗移動較為困難。</span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**不通用**</span>：這種寫法過於依賴 Python 語言特性，無法直接轉換到其他語言（如 C++、Java）。</span><br><span class="line"></span><br><span class="line">...(下略)</span><br></pre></td></tr></table></figure><p>Markdown 的內容通常會比較長，而且會標註日期——即複習日。</p><p>這份 Markdown，就是傳統意義上的筆記，和程式碼放在一起。</p><hr><h2 id="筆記的價值與兩難"><a href="#筆記的價值與兩難" class="headerlink" title="筆記的價值與兩難"></a>筆記的價值與兩難</h2><p>話說回來，這些筆記，我日後真的都會回去看嗎？</p><p>就像前面引用保哥的那段話，說真的，我自己也不敢肯定。</p><p>但可以確定的是，當我要複習時，這些筆記能讓我<strong>快速回復記憶、重新建立大腦的答題情境</strong>。</p><p>考慮到「<strong>筆記愈長，複習意願愈低</strong>」的人性，我們應盡可能只記錄關鍵部分，避免未來回顧時需要費力過濾內容。</p><p>隨著刷題的進展與對一些概念的熟悉，不需要的筆記也要<strong>狠心將其刪除</strong>。</p><p>這正是為何要在 Git repo 中寫筆記——你可以大膽刪內容！</p><hr><h2 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h2><p>以下幾個常見問題，是我在過程中反覆思考過的部分。</p><h3 id="為什麼不使用筆記軟體？"><a href="#為什麼不使用筆記軟體？" class="headerlink" title="為什麼不使用筆記軟體？"></a>為什麼不使用筆記軟體？</h3><p>雖然我是筆記與筆記軟體的重度用戶，但我認為在刷題情境下，筆記最好直接和程式碼緊密結合即可。</p><p>如果把筆記放在 Notion、Logseq 等工具中，<strong>程式碼、筆記間的對照會變得麻煩，間接影響複習意願。</strong></p><h3 id="為什麼要分成兩種筆記？"><a href="#為什麼要分成兩種筆記？" class="headerlink" title="為什麼要分成兩種筆記？"></a>為什麼要分成兩種筆記？</h3><p>因為程式碼註解主要用於記錄細節和立即的想法，而 Markdown 則整理較完整的思路與學習心得。</p><p>兩者各有<strong>擅長與不擅長</strong>之處：</p><table><thead><tr><th></th><th>程式碼註解</th><th>Markdown 筆記</th></tr></thead><tbody><tr><td>優點一</td><td>通常簡短有力，適合即時記錄</td><td>排版多元，可讀性遠高於註解</td></tr><tr><td>優點二</td><td>直接與程式碼結合</td><td>格式完整、方便編輯</td></tr><tr><td>缺點一</td><td>排版弱，不適合稍長或頻繁換行的內容</td><td>必須和程式碼兩兩對照</td></tr><tr><td>缺點二</td><td><strong>太多註解會影響程式碼閱讀</strong></td><td><strong>筆記容易長篇大論、失焦</strong></td></tr></tbody></table><p>這種分工讓筆記更有條理，也更容易維護。</p><h3 id="還能更簡單嗎？"><a href="#還能更簡單嗎？" class="headerlink" title="還能更簡單嗎？"></a>還能更簡單嗎？</h3><blockquote><p>Markdown 筆記能不能併入程式碼？比如用多行註解取代。</p></blockquote><p>可以是可以，但我認為<strong>分開的好處大於合併</strong>。</p><p>首先，程式碼應盡量保持簡潔，過多的註解會影響閱讀；其次，Markdown 更適合整理筆記，哪怕只是排版上的「<strong>換行</strong>」，也比註解方便許多。</p><p>此外，分開管理也讓我們能更靈活地調整和刪減筆記。</p><h3 id="如何確保筆記品質？"><a href="#如何確保筆記品質？" class="headerlink" title="如何確保筆記品質？"></a>如何確保筆記品質？</h3><p>做筆記時很容易想要追求完整、多多益善，這是<strong>筆記愛好者的通病</strong>，我也不例外😷</p><p>有一個簡單暴力但有效的方法：<strong>限制 Markdown 筆記的行數上限！</strong></p><p>我目前的想法是：</p><ol><li>Easy：上限 100行。</li><li>Medium：上限 200 行。</li><li>Hard：上限 300 行。（實際上我沒有打算寫 Hard 題😅）</li></ol><p>超過上限就要刪減內容！（這裡留有一個餘地：你可以一行寫長一點XD）</p><p>這些數字是否適合，要實驗一段時間後才知道。但可以確信的是：<strong>有上限絕對比沒上限好得多</strong>。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本文分享了我在刷題時的筆記方法。這套方法雖然簡單，卻能幫助我們梳理學習思路，同時避免筆記變得過於冗長。</p><p>本系列一直將刷題視為一種<strong>學習方式</strong>，而不僅是通過面試的手段。</p><p>至於怎麼樣的方式適合自己，需要一定的嘗試與調整。這也是我寫這個系列的初衷——希望能讓刷題變得有趣、有多元價值。</p><p>但願我們都能在這個過程中，找到一點屬於自己的成就感。</p><h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>系列的下一篇，我會分享我如何複習這些筆記——畢竟筆記就是拿來複習的。</p><p>這部分都還在持續實踐與構思中，敬請期待。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/g9WO9S7.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;系列的前兩篇中，我們首先介紹了準備工作、學習資源和基本的刷題原則，這些內容&lt;strong&gt;特別適合初學者或希望減少刷題壓力的讀者&lt;/strong&gt;。畢竟我也不喜歡刷題😂&lt;/p&gt;
&lt;p&gt;接著，在第二篇裡，我們討論了如何使用 AI 工具（我設計的 &lt;a href=&quot;https://chatgpt.com/g/g-6731960a3a2081909fe1975e05c034c4-li-li-kou-kou&quot;&gt;GPTs&lt;/a&gt;）來提高刷題效率（或說提高「意願」），以及使用 AI 輔助刷題時的一些重點與注意事項。&lt;/p&gt;
&lt;p&gt;如果你還沒看過前兩篇，建議可以先看看，會對整個學習脈絡有更清楚的理解。&lt;/p&gt;
&lt;h3 id=&quot;系列：我的-LeetCode-刷題之道&quot;&gt;&lt;a href=&quot;#系列：我的-LeetCode-刷題之道&quot; class=&quot;headerlink&quot; title=&quot;系列：我的 LeetCode 刷題之道&quot;&gt;&lt;/a&gt;系列：我的 LeetCode 刷題之道&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93&quot;&gt;文章清單（連載中）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文將聚焦於刷題過程中的&lt;strong&gt;筆記&lt;/strong&gt;環節，採取簡單、實用的筆記方式，讓你的學習過程更有條理，並在複習時更加輕鬆。&lt;/p&gt;
&lt;p&gt;話不多說，讓我們開始。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/g9WO9S7.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="LeetCode" scheme="https://blog.kyomind.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>《給網站工程師的網路課》心得：Web 開發者的網路學習指南</title>
    <link href="https://blog.kyomind.tw/network-101-course/"/>
    <id>https://blog.kyomind.tw/network-101-course/</id>
    <published>2024-12-21T02:30:00.000Z</published>
    <updated>2024-12-21T02:49:26.678Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sl3ouFQ.jpeg"></p><p>上星期日，我參加了<a href="https://azole.medium.com/">小賴</a>的《給網站工程師的網路課》，獲益良多，有必要寫一篇文章分享。</p><p>但<strong>本文並不是上課筆記</strong>，而是想談談我作為一個轉職軟體工程師，學習網路知識的<strong>不同階段歷程</strong>，以及這堂課<strong>如何彌補了過去的不足</strong>。</p><p>如果你對這堂課感興趣，但不知道自己適不適合，推薦參考下面兩篇文章：</p><ul><li><a href="https://azole.medium.com/%E7%B5%A6%E7%B6%B2%E7%AB%99%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E7%B6%B2%E8%B7%AF%E8%AA%B2-21157b1d47d1">給網站工程師的網路課</a>：講者小賴對課程內容的專文介紹。</li><li><a href="https://anna-su.com/tech/internet-course-for-web-developers">給網站工程師的網路課 - 上課心得筆記</a>：實際參與學員的上課心得與筆記。</li></ul><p>看完之後，能一定程度了解這堂課的內容、定位與輪廓。</p><p>這是一堂實體課，時長為一個下午（約 4 小時），但資訊量明顯超過 4 小時能講完的內容，可說是非常充實。</p><p>如果你也是 Web 開發者，卻仍對網路感到一知半解，相信本文能帶給你一些方向。</p><span id="more"></span><hr><p>讓我們直接開始吧！</p><h2 id="Web-開發者需要了解網路嗎？"><a href="#Web-開發者需要了解網路嗎？" class="headerlink" title="Web 開發者需要了解網路嗎？"></a>Web 開發者需要了解網路嗎？</h2><p>答案自然是「Yes」——不然我就不會寫這篇文章了😂，但也<strong>沒那麼簡單</strong>。</p><p>無論前端、後端，還是全端工程師，我們的主要工作都圍繞著 Web 展開，且大部分的產出都必須透過 HTTP 來運作。</p><p>而 HTTP 建立在 TCP&#x2F;IP 協議之上，因此網路知識的重要性不言而喻。</p><p>但我們也得承認，對大多數 Web 開發者而言，<strong>網路往往不是工作中的主角。</strong></p><p>日常的功能開發，往往是以「<strong>框架</strong>」為主角，無論是前端的 Vue、React，或是我熟悉的 Django。網路常常是作為「<strong>配角</strong>」，在背後默默運作。</p><h3 id="重要的「配角」"><a href="#重要的「配角」" class="headerlink" title="重要的「配角」"></a>重要的「配角」</h3><p>但有些時候，網路問題「確實」會直接影響到你的開發效率，甚至讓你感到<strong>無力</strong>。</p><p>舉個例子，網站部署後出現發現<strong>網頁載入緩慢</strong>，這究竟是前端請求問題、伺服器端設定問題，還是網路出了問題？</p><p>又或者，你的 API 平時運作良好，但<strong>偶爾會出現 Timeout</strong>，究竟<strong>該從哪裡開始排查</strong>？</p><p>這類問題雖與功能無關，但<strong>直接影響了功能的實現</strong>，不得不處理。在缺乏基礎網路知識的情況下，往往只能靠「<strong>試誤、碰運氣</strong>」來排查問題，甚至可能因此卡關好幾天。</p><p>所以，網路雖然不屬於核心技能範疇，但同時也是避不開、需要好好了解的一部分。</p><hr><h2 id="我的網路學習三階段"><a href="#我的網路學習三階段" class="headerlink" title="我的網路學習三階段"></a>我的網路學習三階段</h2><p>說是這麼說，我對網路的學習也稱不上多認真啦🤣</p><p>在介紹這三個階段之前，還是不免俗地強調：每個人的學習路徑不盡相同，以下僅是我個人的經驗。</p><h2 id="第一階段：從-HTTP-開始"><a href="#第一階段：從-HTTP-開始" class="headerlink" title="第一階段：從 HTTP 開始"></a>第一階段：從 HTTP 開始</h2><p>幾年前，我曾在<a href="https://time.geekbang.org/">極客時間</a>購買了一堂課，叫《<a href="https://time.geekbang.org/column/intro/100029001">透視 HTTP 協議</a>》。（有興趣的話，也可透過我的<a href="https://time.geekbang.org/column/intro/100029001?code=q-hHhk4l1RmUbh/YwVDnxx78GI0QO2uJ7UJ1JqX2S8Q=">分享連結</a>購買，我會得到一點點佣金，感謝支持！）</p><p>這堂課對我了解 HTTP 知識有很大的幫助，像是請求方法、body、狀態碼、header 的作用等。深入淺出，學起來很踏實。</p><p>雖然這些知識在網路上可能都找得到，但這堂課幫你整理得更有體系，我不必自己尋尋覓覓，就能循序漸進地掌握 HTTP 中各個重要概念。</p><p>總之，我覺得這是前期對我很有幫助的教材。但它對於 HTTP 以外的內容（TCP&#x2F;IP、DNS），則著墨較少，所以只適合作為一個開端。</p><hr><h2 id="第二階段：用-ChatGPT-補一補"><a href="#第二階段：用-ChatGPT-補一補" class="headerlink" title="第二階段：用 ChatGPT 補一補"></a>第二階段：用 ChatGPT 補一補</h2><p>隨著 ChatGPT 等 AI 工具的出現，基礎知識的學習變得更方便了！</p><p>你或許聽過 <a href="https://github.com/JushBJJ/Mr.-Ranedeer-AI-Tutor">Mr. Ranedeer</a> 這個設計精巧的 <a href="https://chatgpt.com/g/g-9PKhaweyb-mr-ranedeer">GPTs</a>，號稱可以讓你自學任何主題。</p><p>雖然不一定有那麼神（而且很多知識也不是以文字呈現的），但拿來學一些<strong>軟體開發的通用知識</strong>確實挺不錯。</p><p>比如給它這樣的提示詞（prompt）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/plan 關於「從瀏覽器輸入網址到取得回應，中間發生了什麼事？」這個主題的開發者必知知識</span><br></pre></td></tr></table></figure><p>它會列出下列的學習清單（回答我有多次調整過，但格式不變，截圖僅為部分）：</p><p><img src="https://i.imgur.com/IsbOjTW.png" alt="Mr. Ranedeer"><span class="cap">Mr. Ranedeer</span></p><p>這種學習方式有幾個好處：</p><ol><li>可以<strong>快速獲得該主題的輪廓與流程。</strong></li><li>可以針對不懂的細節<strong>反覆詢問</strong>，逐步加深理解。就像我的「<a href="https://blog.kyomind.tw/gpts-for-leetcode/#%E4%B8%80%E3%80%81%E3%80%8C%E5%93%A9%E5%93%A9%E6%89%A3%E6%89%A3%E3%80%8DGPTs-%E4%BB%8B%E7%B4%B9">哩哩扣扣</a>」一樣。</li></ol><h3 id="靠-AI-自學的缺點"><a href="#靠-AI-自學的缺點" class="headerlink" title="靠 AI 自學的缺點"></a>靠 AI 自學的缺點</h3><p><strong>但缺點也很明顯：AI 不知道你「不知道什麼」。</strong></p><p>網路知識龐雜，初學者不易分辨哪些概念屬於基礎，哪些則是進階——其實自己看書也有類似困境，所以我幾乎不太想直接去啃那些大部頭的網路書籍。</p><p>更困難的是，作為初學者，我們往往不知道哪些知識<strong>對現階段的自己最重要！</strong>（這情況在學習新技術時經常發生）</p><p>AI 確實能提供答案，但它不一定知道你的<strong>學習困境</strong>所在（而我們自己也不清楚），更無法取代經驗豐富老師的引導。</p><p>總之，AI 在原來的基礎上，幫我補足了第一階段課程中的缺憾，但仍缺少一個完整的框架與指引。只能算是聊勝於無。</p><hr><h2 id="第三階段：上小賴的《給網站工程師的網路課》"><a href="#第三階段：上小賴的《給網站工程師的網路課》" class="headerlink" title="第三階段：上小賴的《給網站工程師的網路課》"></a>第三階段：上小賴的《給網站工程師的網路課》</h2><p>這次參加小賴的課程，讓我真正體會到什麼叫做「<strong>把零散的知識串聯起來</strong>」。</p><p>就像<a href="https://www.threads.net/@kyomind.tw/post/DDqc75PSu_2">我在 Threads 上說的</a>：「這是<strong>知識與快樂的螺旋</strong>！」</p><p>之前的學習，我本以為已經算是「相對有體系」了，但上完這堂課後，才知道自己還是太天真了😅——這很正常啦！畢竟網路世界博大精深。</p><h3 id="課程亮點"><a href="#課程亮點" class="headerlink" title="課程亮點"></a>課程亮點</h3><p>這堂課從「輸入網址、按完 Enter」後的 DNS 查詢開始，一路講到 TCP、IP 協議，並串聯起路徑上的各個環節。</p><p>用淺顯易懂的方式解釋網路運作，並輔以具體的例子、圖片；操作 <a href="https://www.wireshark.org/">Wireshark</a> 讓我對網路封包有了更多視覺上的理解。（比如看到 TCP 中的 port number 值）</p><p>光 DNS 部分，就讓我有一種打通任督二脈的感覺——雖然有學過，但發現自己的了解仍稍嫌片面。</p><p>和單純的記憶知識相比，我想其中的關鍵差別在於「<strong>經驗</strong>」。這堂課有很多小賴的實戰經驗，<strong>它們讓知識變得更加真實、栩栩如生。</strong></p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>總的來說，這是一堂讓我獲益良多的課程。</p><p>我之前所學的 HTTP 與 AI 提供的網路知識，相較之下仍像是散落的拼圖，而這次課程把這些拼圖組合起來，讓我看到<strong>一幅更清晰的全景</strong>。</p><p>這堂課是針對 <strong>Web 開發者</strong>設計，難度拿捏得宜，不會過於深奧，也不流於表面，適合想補足網路知識的工程師。</p><p>如果你是 Web 開發者，正在摸索網路相關的學習路徑，這堂課也許就是你的下一站。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sl3ouFQ.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;上星期日，我參加了&lt;a href=&quot;https://azole.medium.com/&quot;&gt;小賴&lt;/a&gt;的《給網站工程師的網路課》，獲益良多，有必要寫一篇文章分享。&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;本文並不是上課筆記&lt;/strong&gt;，而是想談談我作為一個轉職軟體工程師，學習網路知識的&lt;strong&gt;不同階段歷程&lt;/strong&gt;，以及這堂課&lt;strong&gt;如何彌補了過去的不足&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你對這堂課感興趣，但不知道自己適不適合，推薦參考下面兩篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://azole.medium.com/%E7%B5%A6%E7%B6%B2%E7%AB%99%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E7%B6%B2%E8%B7%AF%E8%AA%B2-21157b1d47d1&quot;&gt;給網站工程師的網路課&lt;/a&gt;：講者小賴對課程內容的專文介紹。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://anna-su.com/tech/internet-course-for-web-developers&quot;&gt;給網站工程師的網路課 - 上課心得筆記&lt;/a&gt;：實際參與學員的上課心得與筆記。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看完之後，能一定程度了解這堂課的內容、定位與輪廓。&lt;/p&gt;
&lt;p&gt;這是一堂實體課，時長為一個下午（約 4 小時），但資訊量明顯超過 4 小時能講完的內容，可說是非常充實。&lt;/p&gt;
&lt;p&gt;如果你也是 Web 開發者，卻仍對網路感到一知半解，相信本文能帶給你一些方向。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/sl3ouFQ.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="HTTP" scheme="https://blog.kyomind.tw/tags/HTTP/"/>
    
    <category term="課程心得" scheme="https://blog.kyomind.tw/tags/%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>GPTs 介紹：AI 刷題助手與使用方式</title>
    <link href="https://blog.kyomind.tw/gpts-for-leetcode/"/>
    <id>https://blog.kyomind.tw/gpts-for-leetcode/</id>
    <published>2024-11-30T15:06:21.000Z</published>
    <updated>2024-12-18T07:02:16.897Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/g9WO9S7.jpeg"></p><blockquote><p>本來只打算寫兩篇，現在變成 4 篇了，大綱可參考「<a href="/grind-leetcode-with-ai-preparation/#%E7%B3%BB%E5%88%97%E6%A6%82%E8%BF%B0%E8%88%87%E5%B0%8E%E8%AE%80">系列概述與導讀</a>」。</p></blockquote><p>上一篇，我們介紹了 LeetCode 刷題的準備與基本原則，本篇則要介紹我刷題時搭配的 AI 工具——自定義的 <a href="https://openai.com/index/introducing-gpts/">GPTs</a>。</p><p>不過有一點需要提醒：你得先訂閱 <a href="https://openai.com/index/chatgpt-plus/">ChatGPT Plus</a>，才能直接使用他人建立的 GPTs。</p><p>話不多說，直接開始正文。</p><h3 id="系列：我的-LeetCode-刷題之道"><a href="#系列：我的-LeetCode-刷題之道" class="headerlink" title="系列：我的 LeetCode 刷題之道"></a>系列：我的 LeetCode 刷題之道</h3><ul><li><a href="/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93">文章清單（連載中）</a></li></ul><span id="more"></span><hr><h2 id="一、「哩哩扣扣」GPTs-介紹"><a href="#一、「哩哩扣扣」GPTs-介紹" class="headerlink" title="一、「哩哩扣扣」GPTs 介紹"></a>一、「哩哩扣扣」GPTs 介紹</h2><p>隆眾介紹你的 AI 刷題助手——<a href="https://chatgpt.com/g/g-6731960a3a2081909fe1975e05c034c4-li-li-kou-kou">哩哩扣扣</a>。</p><p><img src="https://i.imgur.com/I1EGApi.png" alt="哩哩扣扣"><span class="cap">哩哩扣扣</span></p><p>我們都知道，任何一個 AI 都能夠回答你關於 LeetCode 的問題與解析，因為這類資料對於大語言模型來說，<strong>可說是再熟悉不過了。</strong></p><p>這個 GPTs 是專為「<strong>深入了解 LeetCode 題目</strong>」打造的，回答模式偏向<strong>學習取向</strong>，而非單純提供答案。</p><p>輸入題目時，推薦使用完整截圖方式，這樣 AI 更能知曉題目的條件限制等細節。</p><p>我個人都是用<strong>長截圖</strong>一氣呵成，但分段多次截圖也無妨。</p><p>當然，如果你只想了解題目大概或掌握重點解法，那麼提供題號和標題就足夠了。</p><hr><h2 id="二、學習取向的回答模式"><a href="#二、學習取向的回答模式" class="headerlink" title="二、學習取向的回答模式"></a>二、學習取向的回答模式</h2><p>這個 GPTs 的最大特色，就是它的「第一次回答」。</p><p>共分成五大部分：</p><ol><li>題目解析</li><li>核心演算法與資料結構</li><li>解題思路與方法比較</li><li>相關題目與延伸概念</li><li>常見錯誤與陷阱</li></ol><p>這樣的回答，可以說是把該題的重點，<strong>完整地為你梳理一遍</strong>，讓你在首次接觸時，就能有一個<strong>相對完整的輪廓</strong>。</p><h3 id="題目解析"><a href="#題目解析" class="headerlink" title="題目解析"></a>題目解析</h3><p>先以第一部分「<strong>題目解析</strong>」為例，以下是回答的截圖：（<a href="https://leetcode.com/problems/two-sum/description/">1. Two Sum</a>）</p><p><img src="https://i.imgur.com/fVdelfK.png" alt="哩哩扣扣"><span class="cap">哩哩扣扣</span></p><p>第一部分又分成三個小節。首先是<strong>規則講解</strong>，將題目要求用中文說明，幫助非英語母語者快速抓住重點，或確認自己沒有理解錯誤，非常實用。</p><p>接著是<strong>核心概念</strong>，指出這題與哪些演算法重點相關。</p><p>最後，GPTs 還會對題目進行<strong>重要性評估</strong>，幫助你快速判斷該題<strong>對面試和學習的價值</strong>。</p><h3 id="解題思路與方法比較"><a href="#解題思路與方法比較" class="headerlink" title="解題思路與方法比較"></a>解題思路與方法比較</h3><p>回答的第三部分，是「<strong>解題思路與方法比較</strong>」，這是我覺得最有價值的地方。</p><p>例示如下：（<a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/description/">3. Longest Substring Without Repeating Characters</a>）</p><p><img src="https://i.imgur.com/tOJNLlz.png" alt="哩哩扣扣"><span class="cap">哩哩扣扣</span></p><p>如你所見，它會幫你整理本題的常用解法，大致說明解題的思路——包括<strong>直接但不效率的暴力解法</strong>。畢竟作為學習者，知曉什麼是「不佳的做法」也是學習的一部分。</p><p>最後會用表格呈現<strong>各種解法的優缺點</strong>，讓你一目瞭然。</p><hr><p>大致了解 GPTs 的特色後，再來講述一下我實際上是怎麼用它刷題的。</p><h2 id="三、我的使用方式與刷題流程"><a href="#三、我的使用方式與刷題流程" class="headerlink" title="三、我的使用方式與刷題流程"></a><strong>三、我的使用方式與刷題流程</strong></h2><p>我練習<strong>新題目</strong>的流程大致如下：</p><ol><li>看刷題清單，做到哪裡了，選定今天要刷的題目。</li><li>看 LeetCode 網站上的題目內容，了解題目規則，思考 5-10 分鐘。</li><li>如果有想法，可以先試著在 VS Code 作答。如果沒有，直接看 AI 對本題的介紹。尤其是前述的「<strong>解題思路與方法比較</strong>」部分。</li><li>基於 AI 的回答，看看是否知道怎麼解了，嘗試作答。如果還是不明白，請 AI 給出「詳細的解法流程」。</li><li>從 AI 第一次回答開始，只要有疑問，<strong>直接繼續提問</strong>，不一定要急著作答。</li></ol><p>以上就是我使用 AI 工具輔助刷題的流程。</p><p>光這樣講可能還有點籠統，以下是其中兩個重點環節的說明。</p><h3 id="理解題目後，要思考多久？"><a href="#理解題目後，要思考多久？" class="headerlink" title="理解題目後，要思考多久？"></a>理解題目後，要思考多久？</h3><p>一開始我對此也有一些困惑，但做了大概十幾二十題後，我有一個心得，那就是——真的不用思考太久。</p><p>Easy 類的題目，還在入門階段，可以思考稍微久一點，10 分鐘到 15 分鐘是可以的。</p><p>Medium 以上的題目，<strong>套路成分會更重</strong>，第一次接觸時，你要靠自己想出解法的難度很高，所以這個時候我覺得思考 5 到 10 分鐘就足夠了。</p><p>總之，我們的重點是要掌握這些題目的<strong>上手方式和正確的寫法</strong>，至於第一次做題能不能靠自己想出來，其實不是很重要。</p><h3 id="第一次學習時的重點"><a href="#第一次學習時的重點" class="headerlink" title="第一次學習時的重點"></a>第一次學習時的重點</h3><p>第一次學習時，我會花比較多的時間跟 AI 討論，了解一些<strong>重要基本元素</strong>，比如<strong>雙指針（左右、快慢指針）</strong>、<strong>二分搜尋的開閉問題</strong>（雙閉區間、左閉右開）等等主題。</p><p>這些都不是題目裡面會直接告訴你的，但它們卻是<strong>題目的重要組成部分</strong>。</p><p>當你不太懂時，可以直接跟 AI 討論。</p><p>AI 可以回答關於刷題的任何問題，所以這個時候多花一點時間是值得的，因為這正是<strong>理解與鞏固基礎</strong>的時機。</p><hr><h2 id="四、注意事項"><a href="#四、注意事項" class="headerlink" title="四、注意事項"></a><strong>四、注意事項</strong></h2><p>使用 AI 輔助刷題，其實為了幫助我們<strong>更輕鬆地「思考」</strong>——而不是獲得答案。</p><p>因此，程式碼答案本身其實是<strong>最不值錢</strong>的部分。理解為什麼要這樣寫，以及掌握其中的關鍵細節，才是這個強大工具能夠給你的最大幫助。</p><p>我們可以想像，以前的人要深入理解題目<strong>需要花費大量時間</strong>：要先閱讀相關書籍來學習解題模式，解完題後還要到 LeetCode 討論區研究其他人的解法和技巧。</p><p>這些都是<strong>很費功夫</strong>的過程，但現在 AI 可以完成其中絕大部分的工作，<strong>而你只需要向它認真提問即可。</strong></p><p>為了用好 AI，以下是我認為值得注意的部分：</p><ul><li><strong>避免過度依賴</strong>：直接複製 AI 給出的程式碼不是太大的問題，只要你詳細和它討論過，而且<strong>理解每一步的邏輯</strong>。（我會在複習階段才自己全手工寫一遍）</li><li><strong>不宜讓對話過長</strong>：我會有意地<strong>避免問一些無關緊要的問題</strong>，以免對話因過長而失焦。日後要複習時，<strong>不至於讓自己看得眼花撩亂</strong>。這是個人偏好，僅供參考。</li><li><strong>不止提問，更要思考</strong>：思考 AI 的回答是否<strong>合理</strong>，也是學習中的重要一環，不止是一直提問——最好還能夠反駁它！</li><li><strong>保持獨立思考</strong>：AI 的回答具有一定的<strong>隨機性</strong>，雖然刷題這件事，它做得<strong>非常好</strong>，但仍可能因為你<strong>提問方式的不同</strong>而給出不同的回答方向，這點必須留意。</li></ul><hr><h2 id="五、總結與下一步"><a href="#五、總結與下一步" class="headerlink" title="五、總結與下一步"></a><strong>五、總結與下一步</strong></h2><p>AI 是刷題的強大助手，但要真正發揮其價值，需要你以合適的方式使用它。</p><p>這篇文章與第一篇相隔超過一個月，遠比預期的晚，原因有二：</p><ol><li>我在使用中<strong>不斷改善 AI 的回答架構</strong>，讓它對學習更有幫助。</li><li>其次，我也需要時間，<strong>慢慢摸索與它互動的最佳方式</strong>。</li></ol><p>它的用法還不止我說的這些，需要讀者自行想像、發揮。</p><p>下一篇會介紹，在刷題過程中，我如何<strong>做筆記</strong>，讓學習效果更好、記憶更深刻。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/g9WO9S7.jpeg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本來只打算寫兩篇，現在變成 4 篇了，大綱可參考「&lt;a href=&quot;/grind-leetcode-with-ai-preparation/#%E7%B3%BB%E5%88%97%E6%A6%82%E8%BF%B0%E8%88%87%E5%B0%8E%E8%AE%80&quot;&gt;系列概述與導讀&lt;/a&gt;」。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一篇，我們介紹了 LeetCode 刷題的準備與基本原則，本篇則要介紹我刷題時搭配的 AI 工具——自定義的 &lt;a href=&quot;https://openai.com/index/introducing-gpts/&quot;&gt;GPTs&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;不過有一點需要提醒：你得先訂閱 &lt;a href=&quot;https://openai.com/index/chatgpt-plus/&quot;&gt;ChatGPT Plus&lt;/a&gt;，才能直接使用他人建立的 GPTs。&lt;/p&gt;
&lt;p&gt;話不多說，直接開始正文。&lt;/p&gt;
&lt;h3 id=&quot;系列：我的-LeetCode-刷題之道&quot;&gt;&lt;a href=&quot;#系列：我的-LeetCode-刷題之道&quot; class=&quot;headerlink&quot; title=&quot;系列：我的 LeetCode 刷題之道&quot;&gt;&lt;/a&gt;系列：我的 LeetCode 刷題之道&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93&quot;&gt;文章清單（連載中）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    <content src="https://i.imgur.com/g9WO9S7.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="LeetCode" scheme="https://blog.kyomind.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>去了兩個月健身房之後——我的「有氧運動」進化史</title>
    <link href="https://blog.kyomind.tw/cardio-evolution-2-months/"/>
    <id>https://blog.kyomind.tw/cardio-evolution-2-months/</id>
    <published>2024-11-14T09:21:31.000Z</published>
    <updated>2024-11-16T02:32:03.766Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/YmlPRz1.jpg" alt="by Sam Chivers"><span class="cap">by Sam Chivers</span></p><p>兩個多月前，我發表了〈<a href="/weekly-review-37/">37，加入健身房，專注 Zone 2</a>〉，宣誓著我投入有氧運動的決心！</p><p>75 天過去，我仍持續嗎？還是已經半途而廢？</p><p>本文就來整理一下，這兩個月多的變化，以及我獲得的體驗與感悟。</p><blockquote><p>延伸閱讀：<a href="/weekly-review-28/">28，去了 2 個月圖書館之後</a></p></blockquote><hr><h2 id="以減脂為起點"><a href="#以減脂為起點" class="headerlink" title="以減脂為起點"></a>以減脂為起點</h2><p>8 月底，我為了「減脂」（嚴格來說是降低體脂率）而報名健身房。</p><p>當時的計畫很簡單：不涉及重訓（另有教練），把這個健身房當成「<strong>有氧專區</strong>」，全力投入有氧運動來達成減脂的目標。</p><p>加入健身房的第一個月，<strong>跑步機是我的首選</strong>。使用方式也很簡單——以 Zone 2 的中低強度運動為主。<strong>我不跑步</strong>，而是設定坡度，採用走路的方式訓練。</p><p>那時我的期望是慢慢來，讓身體自然適應。</p><p>這兩個月來，經歷了幾個階段的改變（當然少不了和 AI 討論😎），訓練模式和目標也逐漸調整。</p><p>可說是一段「有氧運動進化史」，是不是真的愈來愈好，我敢不說。但顯然更符合我的期待。以下分三個階段講述——<strong>純個人經驗，僅供參考</strong>。</p><span id="more"></span><hr><h2 id="第一階段：跑步機上坡走路"><a href="#第一階段：跑步機上坡走路" class="headerlink" title="第一階段：跑步機上坡走路"></a>第一階段：跑步機上坡走路</h2><p>剛開始的前兩週，重點放在上坡走路。</p><p>因為右膝比較沒那麼穩定，讓我對跑步有所遲疑，但為了達成一定心率，光快走也不足以進入 <a href="https://www.google.com/search?q=Zone%202">Zone 2</a>（最大心率 60-70% 左右，對我而言相當於 115-133）。</p><p>具體做法是，跑步機設定坡度 10，時速 4 公里，行走約 45 分鐘。</p><p>結束後再用 15 分鐘橢圓機，作為強度上的補充，達成所謂的「80&#x2F;20」黃金比例——這裡指的是<strong>中低強度運動佔 80%，高強度佔 20%。</strong></p><p>這種平穩且強度不大的運動方式，很快身體就習慣了。<strong>這帶來了一個問題：感覺真的很無聊！</strong>而且時間又得要長才行——中低強度就是靠時間取勝。</p><p>隨著身體的適應，我意識到需要調整訓練方式才能打破僵局。</p><hr><h2 id="第二階段：跑步機、橢圓機-1-1"><a href="#第二階段：跑步機、橢圓機-1-1" class="headerlink" title="第二階段：跑步機、橢圓機 1 : 1"></a>第二階段：跑步機、橢圓機 1 : 1</h2><p>為避免中低強度訓練帶來的<strong>無趣與厭煩感</strong>，進入第三週後，我開始調整兩種器械的使用比例：<strong>改為跑步機和橢圓機各 25 分鐘。</strong></p><p>這樣的「1 : 1」分配讓運動的變化更多，主要是提高了整體強度，但仍繼續保有一定的 Zone 2 比例。</p><p>在此簡介一下我對橢圓機的用法，基本上<strong>以 5 分鐘為一個週期</strong>，前 3 分鐘是低強度，RPM（每分鐘轉速）約 80-100，阻力 8（上限 20）。</p><p>後 2 分鐘則是高度強，RPM 提高到 120 左右。</p><p>如此交錯，效果不錯！比單純高強度要來得持久——不然我 10 分鐘就想下來了。這樣的交錯也符合「間歇訓練」的精神。</p><p>在 RPM 120 的高強度階段，心率可以來到 140 甚至 150。</p><p>維持了 3 週，感覺不錯，但如你所料，身體又又又開始適應了。</p><p>到了本階段後期，120 RPM 已經連心率 140 都難以企及，而且身體也不那麼喘了，是時候繼續向前邁進了。</p><hr><h2 id="第三階段：徹底擁抱橢圓機，轉為-Zone-3-的心肺訓練"><a href="#第三階段：徹底擁抱橢圓機，轉為-Zone-3-的心肺訓練" class="headerlink" title="第三階段：徹底擁抱橢圓機，轉為 Zone 3 的心肺訓練"></a>第三階段：徹底擁抱橢圓機，轉為 Zone 3 的心肺訓練</h2><p>10 月中起，我將跑步機「<strong>邊緣化</strong>」，只用來進行<strong>短暫的熱身</strong>（約 5-7 分鐘），橢圓機正式成為我的有氧主力，每次使用約 35 分鐘。</p><p>此時我已經不滿足於 Zone 2 減脂，而更想要鍛鍊心肺——這需要一定的強度。</p><p>橢圓機一樣以 5 分鐘為週期，但做法調整為，第 2 和 4、5 分鐘為高強度時間，RPM 140-160，剩下兩分鐘則是低強度，RPM 100 左右。</p><p>隨著運動強度的提升，帶來的感受也有所不同，<strong>運動後的愉悅感變得更強</strong>，心肺耐力和體能也都有明顯的進步——主要是不太容易喘。</p><p>這樣的訓練強度也改變了我對有氧運動的看法。之前單純為了減脂而動，現在則是為了進步與挑戰（在合理的範圍內），有氧運動逐漸成為我生活中的小小重心。</p><h2 id="表格整理"><a href="#表格整理" class="headerlink" title="表格整理"></a>表格整理</h2><p>我們稍微整理一下這三個階段的<strong>運動內容、強度和心率</strong>，如下表所示：</p><table><thead><tr><th>階段</th><th>訓練內容</th><th>心率範圍</th><th>備註</th></tr></thead><tbody><tr><td><strong>第一階段</strong></td><td>跑步機上坡走路，坡度 10，時速 4 公里，45 分鐘 + 橢圓機 15 分鐘</td><td>115-135 BPM</td><td>主要以 Zone 2 減脂為主</td></tr><tr><td><strong>第二階段</strong></td><td>跑步機 25 分鐘 + 橢圓機 25 分鐘（間歇訓練）</td><td>120-150 BPM</td><td>提升強度，加入高低交替</td></tr><tr><td><strong>第三階段</strong></td><td>橢圓機 35 分鐘，週期性高強度（RPM 140-160）</td><td>130-155 BPM</td><td>以 Zone 3 心肺訓練為主</td></tr></tbody></table><p>總的來說，最有滿足感的還是第三階段。</p><p><img src="https://i.imgur.com/EgvLoGo.jpeg" alt="階段三：心率"><span class="cap">階段三：心率</span></p><p>不僅是因為強度的提升，更因為<strong>運動後的愉悅感</strong>。</p><hr><p>除了階段性的變化，我還有<strong>兩個有趣的發現</strong>，如下。</p><h2 id="頻率與現實"><a href="#頻率與現實" class="headerlink" title="頻率與現實"></a>頻率與現實</h2><p>一開始，給自己設定了一個十分積極的頻率——每週去五次健身房。</p><p>對此，我只有兩個字評論：作夢😆</p><p>這個頻率很快被證明根本<strong>不切實際</strong>：每次運動加上通勤、暖身，至少需要 1 小時。5 次就 5 小時了。</p><p>還有強度要求，心理上很容易<strong>產生抗拒</strong>——這是為何我堅持橢圓機只用 35 分鐘，不能再多了。</p><p>最後的定論是：每週二到三次，保持適度的頻率。這樣的節奏既能持續進行，又不會讓訓練變成生活中的壓力。</p><h2 id="意外收穫：文思泉湧的創作狀態"><a href="#意外收穫：文思泉湧的創作狀態" class="headerlink" title="意外收穫：文思泉湧的創作狀態"></a>意外收穫：文思泉湧的創作狀態</h2><p>值得一提的是，在橢圓機上進行高強度訓練時，我發現大腦進入了一種「<strong>文思泉湧</strong>」的狀態，很容易產生新的靈感——尤其是寫作的靈感！</p><p><strong>短短 35 分鐘，腦海裡不斷浮現出有趣的想法。</strong></p><p>想要進入這個狀態，首先要清空一下大腦，然後專注於運動，不要讓其他事情干擾。這樣，大腦就會自然而然地開始運作。但請注意，這<strong>可能不適合跑步等需要專注的運動</strong>。</p><p>毫不誇張地說，在這個狀態下，<strong>我感覺新思緒的產生速度大概是靜態時的 3-5 倍</strong>。</p><p>我<strong>特別珍惜</strong>這樣的時刻，不過也不會立刻拿起手機就開始記錄，這多少有點危險。只能等運動結束後，或間歇中的低強度期間，趕緊記錄下來，作為日後的寫作素材。</p><p>事實上，本文的標題就是在橢圓機上想到的。</p><hr><h2 id="總結與未來展望"><a href="#總結與未來展望" class="headerlink" title="總結與未來展望"></a>總結與未來展望</h2><p>展望——其實沒什麼展望XD</p><p>我覺得能夠維持現在這個狀態與頻率，就<strong>已經相當不錯</strong>了！</p><p>畢竟，現實往往是：好的習慣不易養成，要中斷卻非常簡單。</p><p>我希望繼續保持這個平衡，試著讓運動成為生活中一部分，而不是一種負擔。</p><p>這段時間的經歷讓我再次體會到，<strong>持續的小進步比短期的大爆發更有價值</strong>——而且總是如此。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YmlPRz1.jpg&quot; alt=&quot;by Sam Chivers&quot;&gt;&lt;/p&gt;
&lt;p&gt;兩個多月前，我發表了〈&lt;a href=&quot;/weekly-review-37/&quot;&gt;37，加入健身房，專注 Zone 2&lt;/a&gt;〉，宣誓著我投入有氧運動的決心！&lt;/p&gt;
&lt;p&gt;75 天過去，我仍持續嗎？還是已經半途而廢？&lt;/p&gt;
&lt;p&gt;本文就來整理一下，這兩個月多的變化，以及我獲得的體驗與感悟。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;延伸閱讀：&lt;a href=&quot;/weekly-review-28/&quot;&gt;28，去了 2 個月圖書館之後&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&quot;以減脂為起點&quot;&gt;&lt;a href=&quot;#以減脂為起點&quot; class=&quot;headerlink&quot; title=&quot;以減脂為起點&quot;&gt;&lt;/a&gt;以減脂為起點&lt;/h2&gt;&lt;p&gt;8 月底，我為了「減脂」（嚴格來說是降低體脂率）而報名健身房。&lt;/p&gt;
&lt;p&gt;當時的計畫很簡單：不涉及重訓（另有教練），把這個健身房當成「&lt;strong&gt;有氧專區&lt;/strong&gt;」，全力投入有氧運動來達成減脂的目標。&lt;/p&gt;
&lt;p&gt;加入健身房的第一個月，&lt;strong&gt;跑步機是我的首選&lt;/strong&gt;。使用方式也很簡單——以 Zone 2 的中低強度運動為主。&lt;strong&gt;我不跑步&lt;/strong&gt;，而是設定坡度，採用走路的方式訓練。&lt;/p&gt;
&lt;p&gt;那時我的期望是慢慢來，讓身體自然適應。&lt;/p&gt;
&lt;p&gt;這兩個月來，經歷了幾個階段的改變（當然少不了和 AI 討論😎），訓練模式和目標也逐漸調整。&lt;/p&gt;
&lt;p&gt;可說是一段「有氧運動進化史」，是不是真的愈來愈好，我敢不說。但顯然更符合我的期待。以下分三個階段講述——&lt;strong&gt;純個人經驗，僅供參考&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/YmlPRz1.jpg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="生活" scheme="https://blog.kyomind.tw/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>iThome 鐵人賽寫作攻略——新手必看指南</title>
    <link href="https://blog.kyomind.tw/ithome-ironman-tips/"/>
    <id>https://blog.kyomind.tw/ithome-ironman-tips/</id>
    <published>2024-11-13T04:07:49.000Z</published>
    <updated>2024-11-14T09:22:18.069Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/8kDoWyy.jpeg"></p><p>除了「加碼」組別，<a href="https://ithelp.ithome.com.tw/2024ironman/">2024 iThome 鐵人賽</a>已圓滿落幕，而我也順利完賽。</p><p>在讀完〈<a href="https://kucw.io/blog/ithome-sharing/">iThome 鐵人賽 - 得《優選》獎項的寫作心法</a>〉和〈<a href="https://ithelp.ithome.com.tw/articles/10358571">【Day 31】- 忙碌上班族如何在鐵人賽中堅持30天寫作？從靈感到策略：9個關鍵步驟</a>〉這兩篇大作後，我不禁見獵心喜、心癢難耐🤩</p><p>也想好好寫一篇攻略，獻給還在觀望中、猶豫明年是否要參賽的你。</p><p>雖說是「寫作」攻略，但其實更適合稱為「<strong>參賽與完賽</strong>」攻略。</p><p>本文不會介紹任何寫作技巧，而是聚焦於<strong>如何成功跑完這場「寫作馬拉松」</strong>——最好再拿個獎！</p><p>接下來，我將分享我的鐵人賽參賽經驗，以及一些實際的做法。</p><span id="more"></span><hr><h2 id="本文主旨與目標讀者"><a href="#本文主旨與目標讀者" class="headerlink" title="本文主旨與目標讀者"></a>本文主旨與目標讀者</h2><p>本文的最大目標，就是<strong>試圖鼓吹你在明年參賽</strong>——畢竟今年已經來不及了🤣</p><p>如果閱讀後你依舊沒有這樣的衝動，那麼這篇文章就算是失敗了。</p><p>因此，我們無須講太多「細節」，而是從「更高的層級」與「可行性角度」來討論這個議題。</p><h3 id="目標讀者"><a href="#目標讀者" class="headerlink" title="目標讀者"></a>目標讀者</h3><p>本文主要寫給下列這三種人：</p><ol><li>平常沒有寫作習慣，但想藉由參賽來磨練寫作能力的軟體工程師。</li><li>已經有在寫作，希望獲得更多文章曝光度、聲望的工程師。</li><li>別說了！我就是要得獎、出書。</li></ol><p>本文對三者都有幫助，但話說回來，我們還是會更加著重在「<strong>新手鐵人</strong>」，以降低你的行動（報名參賽）門檻。</p><p>此外，我之前已有兩篇文章討論過鐵人賽，所以本文可以視為對兩者的（大量）補充：</p><ul><li><a href="/weekly-review-35/">35，開始備戰 2024 iThome 鐵人賽</a></li><li><a href="/2024-ironman-event/">2024 iThome 鐵人賽參賽思路：主題選擇、命名與標題策略</a></li></ul><p>了解完上述前提後，我們正式開始。</p><hr><h2 id="一、心態區別：是否以「得獎」為目標"><a href="#一、心態區別：是否以「得獎」為目標" class="headerlink" title="一、心態區別：是否以「得獎」為目標"></a>一、心態區別：是否以「得獎」為目標</h2><p>參賽不一定非得為了得獎。</p><p>不過，在參賽之前，我們可以先問自己：「我是否要以得獎為目標？」</p><p><strong>因為兩者的道路可能會有很大的不同</strong>。</p><p><strong>不以得獎為目標，有時更利於學習</strong>。但代價就是——沒有獎😂</p><p>以我自己為例，我在〈<a href="/weekly-review-35/">35，開始備戰 2024 iThome 鐵人賽</a>〉就提到目標是<a href="/weekly-review-35/#%E5%80%8B%E4%BA%BA%E6%9C%9F%E5%BE%85">為了得獎</a>。什麼獎都可以，但就是要得獎！</p><h3 id="得獎的取捨"><a href="#得獎的取捨" class="headerlink" title="得獎的取捨"></a>得獎的取捨</h3><p>一旦想得獎，就不得不研究一下，哪些是<strong>重點</strong>。</p><p>不可否認，這樣的創作多少是「<strong>不自由</strong>」的，但也有它自己的價值。</p><p>我認為，先想清楚這個問題，<strong>會讓自己更享受參賽的過程</strong>。</p><p>如果明年繼續參賽，我應該就<strong>不會</strong>以獲獎為目標了，而是更多放在學習與嘗試——然後順便寫個文章。</p><p>很多時候，兩者無法兼得，選擇往往是必要的。</p><hr><h2 id="二、了解評審標準"><a href="#二、了解評審標準" class="headerlink" title="二、了解評審標準"></a>二、了解評審標準</h2><p>我們假設你是以「得獎」為目標參賽，因為這樣才能發揮本文的<strong>最大價值</strong>。</p><p>以此為前提，了解評審時的重點顯然相當必要。<a href="https://s.itho.me/vendor/2024/iThome/iThome%E9%90%B5%E4%BA%BA%E8%B3%BD%E6%B4%BB%E5%8B%95%E7%B0%A1%E7%AB%A0-20240614.pdf">報名簡章</a>是這樣寫的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">陸、主題競賽評審要點：</span><br><span class="line">- 主題：主題規劃符合該組別的立意，並能充份切合所選參賽主題下，參賽者所訂定之議題</span><br><span class="line">- 結構：30 篇文章組織良好、其所規劃結構足以引導讀者理解參賽者訂定之議題</span><br><span class="line">- 內容：文章內容的技術或經驗具備專業性、豐富性、深入性</span><br><span class="line">- 表達：透過適當文字、圖片、程式碼或影片等方式，讓人更容易理解</span><br></pre></td></tr></table></figure><p>這 4 項要全都做到滿分，我想很難。</p><h3 id="讀者意識"><a href="#讀者意識" class="headerlink" title="讀者意識"></a>讀者意識</h3><p>但它們都指向了一個<strong>共同的上位概念</strong>——「<strong>請務必讓讀者好了解！</strong>」</p><p>這不正是所謂的「<strong>讀者意識</strong>」？要求你了解讀者的需求與可能有的疑惑，並以此來調整內容的深度和表達方式。</p><p>這種意識能幫助你在保持專業的同時，讓文章<strong>更容易被理解和接受</strong>。</p><p>覺得自己寫得很棒，還不算數。<strong>讀者們也這麼認為，那才算數</strong>！</p><h3 id="我的著眼點"><a href="#我的著眼點" class="headerlink" title="我的著眼點"></a>我的著眼點</h3><p>所以，我對這段要點的解讀，會更加著重在「<strong>結構</strong>」與「<strong>表達</strong>」這兩部分。</p><p>結構務必清晰（這並不容易，後面會再討論），而文字表達則要「<strong>善解人意</strong>」。最忌諱的就是簡單介紹一下，然後丟一大段程式碼讓讀者自行理解——這樣不太體貼唷！</p><p>能做好這兩點，就已經相當不錯了。</p><hr><h2 id="三、提前開始準備"><a href="#三、提前開始準備" class="headerlink" title="三、提前開始準備"></a>三、提前開始準備</h2><p>既然想要拿獎，提前準備就是必要的——非常必要。</p><p>即使像我這樣在參賽期間已經離職、不必工作的人，也<strong>不可能</strong>在開賽日當天才開始動筆，同時還妄想能確保寫作品質——我對寫作很完美主義☺️</p><p>具體而言，我在 9&#x2F;13 開賽日之前，已寫完系列的前 13 篇文章。</p><p>假設「正常」參賽者必須一邊工作一邊創作，那我認為「最好」能在參賽前，<strong>預先完成 10-15 篇</strong>。</p><h3 id="囤稿以緩衝"><a href="#囤稿以緩衝" class="headerlink" title="囤稿以緩衝"></a>囤稿以緩衝</h3><p>這樣的準備量可能看起來有點多，但它能夠<strong>大大減輕你在比賽期間的壓力</strong>。想像一下，當其他參賽者正在為每天的截稿時間而焦急時，你已經有了足夠的「緩衝」。</p><p>這不僅能讓你<strong>更加從容</strong>地面對每天的寫作任務，<strong>還能賦予你額外的時間，去重新編輯和完善你的文章</strong>——非常適合我這種完美主義者😇</p><p>事實證明，這很重要。</p><p>系列後半段的文章，儘管我早早就列出了大綱、定完標題。但實際創作時，<strong>發現要改動的幅度極大</strong>，涉及了文章主題和系列架構的調整。</p><p>如果沒有之前 13 篇囤稿作為緩衝，那不是累死自己，就是虎頭蛇尾。</p><p>兩者都不是我想要的！</p><hr><h2 id="四、選擇熟悉的主題"><a href="#四、選擇熟悉的主題" class="headerlink" title="四、選擇熟悉的主題"></a>四、選擇熟悉的主題</h2><p>關於參賽主題的選擇，我在開賽前就討論過，那時主要強調「<a href="/weekly-review-35/#%E4%B8%80%E3%80%81%E9%81%BF%E9%96%8B%E5%A4%AA%E5%B8%B8%E8%A6%8B%E7%9A%84%E4%B8%BB%E9%A1%8C">避開太常見的主題</a>」。</p><p>現在完賽了，我還想補充一點：「如果是以<strong>獲獎</strong>為目標，那麼勢必得選擇<strong>自己熟悉的主題</strong>」。</p><p>即使這個主題是常見的，也比嘗試創作一個自己不熟悉的技術主題要來得好。</p><p>其中的道理不難理解：<strong>熟悉的主題，你可以更好地掌握內容，更好地表達</strong>。</p><p>如果真的很想寫自己不熟悉的主題怎麼辦？很簡單，先放下得獎的念頭，好好享受學習與分享的過程😘</p><h3 id="熟悉不等於好寫"><a href="#熟悉不等於好寫" class="headerlink" title="熟悉不等於好寫"></a>熟悉不等於好寫</h3><p>更別說，<strong>熟悉並不意味著好寫</strong>。畢竟，<strong>自己會</strong>和<strong>教別人做</strong>往往是兩回事。所以寫完之後你很可能會發現——「自己<strong>好像沒有</strong>原先以為的那麼懂！」</p><p>就像我在〈<a href="/django-ninja-30/">卷 30：系列回顧與完賽心得</a>〉中說的：</p><blockquote><p>在我看來，寫作的滿足感在於「提供價值、發揮影響力」。這份價值不僅是對讀者，也包括對作者自己——<strong>透過這 30 篇文章創作，我對 Django Ninja 的理解又增進許多</strong>。</p></blockquote><p>恭喜你！又進步了。</p><hr><h2 id="五、結構、結構，還是結構"><a href="#五、結構、結構，還是結構" class="headerlink" title="五、結構、結構，還是結構"></a>五、結構、結構，還是結構</h2><p>前面提到，「結構」與「表達」是我認為在 4 項評分標準中特別重要的部分。</p><p>其實就算不是參加比賽，<strong>任何一篇文章都需要良好的結構和友善的表達</strong>——這是寫作的基本，同時也是<strong>最難的部分</strong>。</p><p>在鐵人賽這樣以 30 篇作為一個完整系列的「<strong>連載型創作</strong>」中，我認為結構的重要性，可以說<strong>再強調也不為過</strong>。</p><p>好的結構和壞的結構，或者說沒有結構，寫出來的作品可能是<strong>天壤之別</strong>。（注意，這裡的「作品」不是指單篇文章，而是一整個系列）</p><p>就像蓋一層樓的矮房，結構影響不大；但要蓋 30 層大樓，結構就<strong>至關重要</strong>了。</p><h3 id="具體做法"><a href="#具體做法" class="headerlink" title="具體做法"></a>具體做法</h3><p>講完了結構的重要性，那具體要怎麼做呢？</p><p>我自己的做法是先跟 AI 好好討論，把 30 篇標題都先定下來。不過這有點強人所難，尤其在最開始的時候。</p><p>為了降低壓力與兼顧彈性，我們可以採取<strong>折衷方案</strong>：先確定<strong>前 10 篇的標題</strong>，後 20 篇僅擬定大綱——也就是章節名稱。</p><p>在寫完前面的部分後，後面你就會有靈感了！</p><p>但無論如何，<strong>絕對不要沒有先草擬系列的架構就開始寫</strong>！很容易虎頭蛇尾。</p><hr><h2 id="六、別讓「字數」成為壓力"><a href="#六、別讓「字數」成為壓力" class="headerlink" title="六、別讓「字數」成為壓力"></a>六、別讓「字數」成為壓力</h2><p>關於字數，我有很多話想說。不過篇幅所限，我們可以總結為 3 點。</p><h3 id="一、保持各篇字數的相對均衡"><a href="#一、保持各篇字數的相對均衡" class="headerlink" title="一、保持各篇字數的相對均衡"></a>一、保持各篇字數的相對均衡</h3><p>這一點很少人提及，但我個人還蠻重視的。因為<strong>字數的均勻</strong>表示你在系列的編排上<strong>的確有經過深思熟慮</strong>。</p><p><strong>這是另一種用心的展現。</strong></p><p>想像一下，如果這一篇為 800 字，而下一篇卻有 2500 字，作為讀者，你可能會感到<strong>思緒有些混亂</strong>。至少我個人<strong>不那麼喜歡閱讀</strong>字數起伏太大的系列文章。</p><p>當然，字數均勻並不是說每一篇都要一樣多——這恐怕也不切實際。只要<strong>差距別太大</strong>，讓讀者感到舒適即可。</p><p>下圖是我 30 篇文章的字數分布，除了第 29 篇有點「失手」外，其餘文章的字數均落在「<a href="https://zh.wikipedia.org/zh-tw/68%E2%80%9395%E2%80%9399.7%E6%B3%95%E5%89%87">兩個標準差</a>」以內。</p><p><img src="https://i.imgur.com/qoUSere.png"></p><p>可見我不是說說而已——還身體力行🐥</p><h3 id="二、字數不是多多益善"><a href="#二、字數不是多多益善" class="headerlink" title="二、字數不是多多益善"></a>二、字數不是多多益善</h3><p>說真的，這是一個不易突破的「<strong>心魔</strong>」！</p><p>連我自己都不容易說服自己：<strong>真的不需要寫太多字。</strong></p><p>但我們得承認：<strong>現代讀者的注意力是很有限的</strong>。就算是寫給有心學習的讀者，適度控制篇幅也是一種「<strong>保護閱讀注意力</strong>」的體貼表現。</p><p>所以，我認為網路文章的最佳字數確實存在一個<strong>相對理想的區間</strong>。</p><p>如果你問我，我會說這個區間是 1000 到 2000 中文字。</p><p>而我正是以每篇 1500 字作為單篇的字數目標——雖然後半段開始有點守不住XD</p><h3 id="三、字數偏少會不會不容易得獎？"><a href="#三、字數偏少會不會不容易得獎？" class="headerlink" title="三、字數偏少會不會不容易得獎？"></a>三、字數偏少會不會不容易得獎？</h3><p>我可以告訴你——我不知道XD</p><p>但是！確實是有字數不算多，但獲得<strong>優選</strong>的唷！（冠軍可能有點難）</p><p>比如去年 <strong>Vue.js 組優選</strong>——《<a href="https://ithelp.ithome.com.tw/users/20130500/ironman/6236">Nuxt.js 3.x 筆記－打造 SSR 專案</a>》。言簡意賅，搭配精心製作的解說圖片，讀起來非常舒服。</p><p>我就是看完這個系列，才有了足夠的勇氣，下定決心好好控制字數——雖然從結果而言不算成功😅</p><hr><h2 id="七、參考前人的作品"><a href="#七、參考前人的作品" class="headerlink" title="七、參考前人的作品"></a>七、參考前人的作品</h2><p>參考他人是一個很好的學習方法，尤其是那些獲獎或頗受好評的系列。畢竟所有的學習都是<strong>從模仿開始</strong>。</p><p>透過閱讀這些作品，你可以學習到他們的寫作風格、內容組織方式，以及<strong>如何維持整個系列的連貫性</strong>——這是新手鐵人<strong>最需要學習的</strong>，包括我自己。</p><p>以下是我在開賽前就已大致拜讀過的系列：</p><ul><li><a href="https://ithelp.ithome.com.tw/users/20130500/ironman/6236">Nuxt.js 3.x 筆記－打造 SSR 專案</a></li><li><a href="https://ithelp.ithome.com.tw/users/20162175/ironman/6445">時光之鏡：透視過去、現在與未來的 Observability</a></li><li><a href="https://ithelp.ithome.com.tw/users/20151036/ironman/6130">Spring Boot 零基礎入門</a></li><li><a href="https://ithelp.ithome.com.tw/users/20152669/ironman/6306">FastAPI 入門30天</a></li></ul><p>我用一份專屬的 Notion 筆記，記錄下我認為值得參考的部分，並在寫作時隨時翻閱。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>連續寫作 30 天，真的別具滋味。</p><p>這段旅程所帶來的收穫與學習，遠比創作單篇或數篇文章要來得多。更令人驚喜的是，你會發現自己的潛力比想像中大。</p><p>希望這篇攻略能對你有所助益，讓你在明年的鐵人賽中，大展身手。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8kDoWyy.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了「加碼」組別，&lt;a href=&quot;https://ithelp.ithome.com.tw/2024ironman/&quot;&gt;2024 iThome 鐵人賽&lt;/a&gt;已圓滿落幕，而我也順利完賽。&lt;/p&gt;
&lt;p&gt;在讀完〈&lt;a href=&quot;https://kucw.io/blog/ithome-sharing/&quot;&gt;iThome 鐵人賽 - 得《優選》獎項的寫作心法&lt;/a&gt;〉和〈&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10358571&quot;&gt;【Day 31】- 忙碌上班族如何在鐵人賽中堅持30天寫作？從靈感到策略：9個關鍵步驟&lt;/a&gt;〉這兩篇大作後，我不禁見獵心喜、心癢難耐🤩&lt;/p&gt;
&lt;p&gt;也想好好寫一篇攻略，獻給還在觀望中、猶豫明年是否要參賽的你。&lt;/p&gt;
&lt;p&gt;雖說是「寫作」攻略，但其實更適合稱為「&lt;strong&gt;參賽與完賽&lt;/strong&gt;」攻略。&lt;/p&gt;
&lt;p&gt;本文不會介紹任何寫作技巧，而是聚焦於&lt;strong&gt;如何成功跑完這場「寫作馬拉松」&lt;/strong&gt;——最好再拿個獎！&lt;/p&gt;
&lt;p&gt;接下來，我將分享我的鐵人賽參賽經驗，以及一些實際的做法。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/8kDoWyy.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>39，10 月回顧——鐵人賽、演算法與 AI</title>
    <link href="https://blog.kyomind.tw/weekly-review-39/"/>
    <id>https://blog.kyomind.tw/weekly-review-39/</id>
    <published>2024-11-01T13:06:08.000Z</published>
    <updated>2025-01-16T00:10:38.417Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>好些日子沒寫 Weekly Review 了！</p><p>十月剛過，正是個不錯的時間點。</p><p>本篇就來整理一下「<strong>待業的第 2 個月</strong>」我都做了什麼。</p><span id="more"></span><hr><h2 id="iThome-鐵人賽"><a href="#iThome-鐵人賽" class="headerlink" title="iThome 鐵人賽"></a>iThome 鐵人賽</h2><p>雙十連假 4 天我幾乎都在寫作，連假落幕時，也是我的參賽劃下句點之時。</p><p>不過，正如〈<a href="https://blog.kyomind.tw/django-ninja-30/">Django Ninja 30：系列回顧與完賽心得</a>〉文中說的，這系列還沒有完全結束。我預計還會再新增 3 到 4 篇相關內容，其中心得與花絮就佔兩篇。</p><p>但請原諒我，並不是鐵人賽結束後就閒著了，所以剩下的內容只能一篇篇慢慢生出來。</p><p>在「<a href="https://kyomind.notion.site/40b324f98ca94827921a6831b0d7a38f">訂戶限定</a>」中提過，比賽結束後，我去了一趟「福隆 - 石城」徒步之旅。造訪<a href="https://newtaipei.travel/zh-tw/attractions/detail/110829">舊草嶺隧道</a>與<a href="https://www.yilan.travel/">頭城五漁鐵</a>。</p><p><img src="https://i.imgur.com/UcjquRE.jpeg" alt="舊草嶺隧道"><span class="cap">舊草嶺隧道</span></p><p>感覺很好！尤其在經歷了這一大波腦力勞動之後。</p><blockquote><p>相關文章：<a href="https://blog.kyomind.tw/weekly-review-33/">33，Tony Huang 與我的坪林之旅</a></p></blockquote><p>下星期，我打算繼續走訪<strong>苗栗海線——從白沙屯到通霄</strong>。</p><p>一邊動腦，一邊身體力行。</p><hr><h2 id="演算法與-LeetCode"><a href="#演算法與-LeetCode" class="headerlink" title="演算法與 LeetCode"></a>演算法與 LeetCode</h2><p>不知道大家是否看過這篇〈<a href="https://blog.kyomind.tw/grind-leetcode-with-ai-preparation/">與 AI 共舞——我的 LeetCode 刷題之道（準備篇）</a>〉了，可以說是我近期的力作！</p><p>重點並不在刷題本身，而是其中蘊含的一種精神。怎麼說呢？就是<strong>遵從主流，但不完全按照主流的做法</strong>。</p><blockquote><p>這裡的「主流」是指什麼？</p></blockquote><p>指的是普遍認為刷題是找工作的必經之路，或至少是一個重要的手段。</p><p>我們很難否定這件事，但我的選擇是，將 AI 工具融入刷題過程中，<strong>用「更慢」的速度來刷題</strong>——這是反主流的。</p><p>在主流之中，選擇一條「不那麼主流」的分支。</p><p>這種方法既遵循了主流的刷題建議，又加入了<strong>個人的元素（AI、深度與反思）</strong>，更符合我的價值觀。</p><h3 id="初步感受"><a href="#初步感受" class="headerlink" title="初步感受"></a>初步感受</h3><p>從 10 月中到今天，我已經連續 15 天刷題了！</p><p>目前完成 <a href="https://www.techinterviewhandbook.org/grind75/">Grind 75</a> 中的 17 題，Easy 的題目也快被消耗完畢。（平心而論，有些 Easy 題目挺無聊的，難怪 <a href="https://neetcode.io/practice">NeetCode 150</a> 沒有選入）</p><p><img src="https://i.imgur.com/1UJOP42.png" alt="LeetCode Dashboard"><span class="cap">LeetCode Dashboard</span></p><p>只能說，這種方式<strong>很適合我</strong>，讓人想起台灣軟體圈那本你一定聽過的暢銷書——高見龍大大的《<a href="https://gitbook.tw/">為你自己學 Git</a>》。</p><p>或許可以稱作「<strong>為你自己刷 LeetCode</strong>」。</p><p>不過，人還是要<strong>適度休息</strong>。我已決定，明後兩天都不刷題！</p><p>明天要去宜蘭玩，後天則是前往新竹，參加「<a href="https://ithelp.ithome.com.tw/2024ironman/signup/team/339">AI 寶寶上學去！</a>」的團隊完賽慶功宴。真是令人期待🤩</p><hr><h2 id="再論職涯中的-gap-time"><a href="#再論職涯中的-gap-time" class="headerlink" title="再論職涯中的 gap time"></a>再論職涯中的 gap time</h2><p>在〈<a href="https://www.threads.net/@kyomind.tw/post/C-qEHRxyuIQ">Day 15：《上班，辭職，還是撐下去？》節選（一）</a>〉中引用了書裡的這段話：</p><blockquote><p>未來我們也許會工作幾年後就先「退休」幾年，去學習一段時間之後，再投入下一階段的工作生涯。</p></blockquote><p>我非常喜歡這樣的想法，和前面的「用自己的方式刷 LeetCode」類似，都是一種<strong>既不違反主流（相信人還是需要工作），又不完全按照主流價值行事的生存之道</strong>。</p><p>我想，「擁有自己的價值觀」這件事情本身，就足以讓人感到幸福。</p><h3 id="更大的舞台"><a href="#更大的舞台" class="headerlink" title="更大的舞台"></a>更大的舞台</h3><p>不過話說回來，在這個時間點，我也沒有以前那麼大的勇氣，再 gap 超過 1 年。</p><p>但，幾個月總可以吧！用我認同的方式去實現自己認為重要的事——學習演算法和系統設計。（其實這些都是在符合主流的「審美」😅）</p><p>畢竟，想成為優秀的軟體工程師，不就該如此？</p><p>可以說，離職待業這兩個月以來，我覺得自己過得很充實，最近的狀態也挺不錯。但我心裡清楚，做這些事，付出這些時間，終歸是為了尋找更好、更大的舞台。</p><p>且讓我們拭目以待。</p><hr><h2 id="AI-與我"><a href="#AI-與我" class="headerlink" title="AI 與我"></a>AI 與我</h2><blockquote><p>AI 會取代軟體工程師嗎？</p></blockquote><p>這是最近（或說一直以來）十分熱門的議題。尤其在 <a href="https://blog.kyomind.tw/cursor/">Cursor</a> 大紅之後！畢竟現在不用懂程式就可以寫出軟體服務或功能了。</p><p>先說說我個人的極簡看法：理性上覺得「沒那麼容易」，但情感上則常常在擔心這天的到來，哈哈哈！</p><p>答案究竟為何，沒人知道。</p><p>可是有一件事，對我而言是 100% 確定——<strong>我非常依賴 AI</strong>。</p><h2 id="Copilot-with-AI"><a href="#Copilot-with-AI" class="headerlink" title="Copilot with AI"></a>Copilot with AI</h2><p>今年寫了好幾篇和 AI 有關的文章：</p><ol><li><a href="https://blog.kyomind.tw/grind-leetcode-with-ai-preparation/">與 AI 共舞——我的 LeetCode 刷題之道（準備篇）</a></li><li><a href="https://blog.kyomind.tw/myth-of-ai-writing-efficiency/">AI 讓寫作變輕鬆了？我可不這麼認為</a></li><li><a href="https://blog.kyomind.tw/my-ai-dialogue-notes/">我寫「AI 對話筆記」的方法與思考</a></li><li><a href="https://blog.kyomind.tw/not-by-ai/">為文章標註 Not By AI？ 我覺得大可不必</a></li></ol><p>訂戶限定也有兩篇：</p><ol><li>訂戶限定 07：鐵人賽尾聲 × 續論 AI 工具 × 我的滑鼠停產了！</li><li>訂戶限定 06：待業週記（二）失眠症與 AI輔助思考</li></ol><p>以後應該會更多。</p><h3 id="依賴-AI"><a href="#依賴-AI" class="headerlink" title="依賴 AI"></a>依賴 AI</h3><p>我對 AI 的「依賴」可能超過絕大多數人。</p><p>如上述這些文章所說，AI 對我來說，不僅僅是一個工具，也不僅僅是一個「懶人」的幫手。</p><p>真正讓我依賴 AI 的原因，是它已經成為我<strong>思考和生活的一部分</strong>。</p><p>無論是寫作、學習還是人生的重大難題，我總是先想到 AI，讓它扮演我的良師益友，來回討論，再決定下一步的行動。</p><p>如同我在「<a href="https://blog.kyomind.tw/about/#AI-%E6%99%82%E4%BB%A3%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%80%85">AI 時代的工作者</a>」中所言：</p><blockquote><p>它不僅提升了產能，更挑戰我的思維模式，迫使我重新審視自己，以更深刻的方式思考問題。</p></blockquote><p>這種<strong>智識上的滿足感</strong>，以前可是很難得的，而現在不同了。</p><p>因為我們有了 AI。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;好些日子沒寫 Weekly Review 了！&lt;/p&gt;
&lt;p&gt;十月剛過，正是個不錯的時間點。&lt;/p&gt;
&lt;p&gt;本篇就來整理一下「&lt;strong&gt;待業的第 2 個月&lt;/strong&gt;」我都做了什麼。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>與 AI 共舞——我的 LeetCode 刷題之道（準備篇）</title>
    <link href="https://blog.kyomind.tw/grind-leetcode-with-ai-preparation/"/>
    <id>https://blog.kyomind.tw/grind-leetcode-with-ai-preparation/</id>
    <published>2024-10-24T05:12:52.000Z</published>
    <updated>2025-01-16T00:10:38.418Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/g9WO9S7.jpeg"></p><!-- ![picture 2](https://i.imgur.com/SsRLsJl.jpeg) --><blockquote><p>歡迎使用我的刷題助手 GPTs——<a href="https://chatgpt.com/g/g-6731960a3a2081909fe1975e05c034c4-li-li-kou-kou">哩哩扣扣</a> 🤖</p></blockquote><p><strong>你刷過 LeetCode 嗎？</strong></p><p>老實說，我一直很排斥刷題，因為感覺很「填鴨」，一點也不吸引人。</p><p>這可能是因為這件事和求職面試掛勾，所以讓人有壓力；又或者我還沒有真正領略資料結構與演算法之美。</p><p>總之，<strong>我很逃避！</strong></p><p>但這次不同了。</p><p>我找到了一個全新的方法，讓刷題<strong>不再那麼痛苦</strong>，還幫助我盡可能理解每一道題——這都要歸功於 AI。</p><p>我將分享如何透過 <strong>AI 輔助</strong>來提升刷 LeetCode 的學習效果。關鍵是——它讓原本枯燥的過程（對我來說）<strong>變得有趣</strong>。</p><p>當然，這樣的方法也有一些「<strong>限制</strong>」，後續會提及。</p><p>正文開始前，我必須先花一些篇幅來介紹整個系列的大綱。</p><span id="more"></span><hr><h2 id="系列概述與導讀"><a href="#系列概述與導讀" class="headerlink" title="系列概述與導讀"></a>系列概述與導讀</h2><p>我將透過一系列文章，介紹我如何使用 AI 工具（也就是我自建的 GPTs，第二篇有該 GPTs 的公開連結）來提升 LeetCode 刷題效率，並結合<strong>筆記和複習</strong>，打造一個完整的學習流程。</p><p>本系列包括 4 篇文章：</p><ol><li><strong>準備篇</strong>：讀者定位與前置準備，奠定基礎。</li><li><strong>GPTs 篇</strong>：講解 GPTs 的設計與使用方式。</li><li><strong>筆記篇</strong>：我刷題過程中的筆記策略與工具選擇。</li><li><strong>複習篇</strong>：有了筆記，該如何複習？</li></ol><p>看完這 4 篇，你能了解我是如何刷題，並可根據自己的需求，選擇或調整成適合自己的學習方式。</p><h3 id="系列：我的-LeetCode-刷題之道"><a href="#系列：我的-LeetCode-刷題之道" class="headerlink" title="系列：我的 LeetCode 刷題之道"></a>系列：我的 LeetCode 刷題之道</h3><ul><li><a href="/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93">文章清單（連載中）</a></li></ul><hr><p>本文是第一篇——準備篇，講述我在開始刷題之前的準備工作，包括自學教材的選擇、刷題清單的選定，以及基本的<strong>刷題價值觀</strong>。</p><p>接下來，介紹本文的輪廓。</p><h2 id="給-LeetCode-初學者的刷題指南"><a href="#給-LeetCode-初學者的刷題指南" class="headerlink" title="給 LeetCode 初學者的刷題指南"></a>給 LeetCode 初學者的刷題指南</h2><p>本文闡述如何運用 AI，將 LeetCode 刷題變成一種「<strong>互動式的學習之旅</strong>」。</p><p>我們的<strong>首要目標</strong>是——<strong>有效降低刷題的痛苦與排斥感</strong>！（這不止和 AI 有關，還包括了選用的教材、個人動機、心態等）</p><p>這方法不僅讓刷題變得有趣，還能幫助我們理解每道題目背後的演算法思維。換言之，你會<strong>學得更好</strong>。</p><p>如果你和我一樣，曾經對 LeetCode 感到困頓或厭倦，希望尋找一個更有效、更愉快的學習方式，這篇文章將會對你有所幫助。</p><p>雖然說是「給初學者」，講得好像我很懂——<strong>但其實我自己也是初學者</strong>😅。所以本系列更像是一篇篇「<strong>LeetCode 自學者的探索筆記</strong>」。</p><h3 id="目標讀者"><a href="#目標讀者" class="headerlink" title="目標讀者"></a>目標讀者</h3><p>本文<strong>特別適合</strong>下列讀者：</p><ul><li>討厭機械式刷題、希望刷題<strong>不止是為了面試</strong>的人</li><li>想了解如何利用 AI 助手提升學習效率的人</li><li><strong>不想刷太多題</strong>的人！（沒錯，你沒看錯，後面會闡述<strong>為何不多刷題</strong>）</li></ul><p>尤其要強調——本文非常適合演算法<strong>初學者</strong>，俗稱「小白」。</p><h3 id="不適合的讀者"><a href="#不適合的讀者" class="headerlink" title="不適合的讀者"></a>不適合的讀者</h3><p>有光有就影，我覺得本文可能不適合下列讀者：</p><ul><li>已有豐富刷題經驗的人</li><li>希望在短時間內刷大量題目以通過面試的人</li><li>偏好傳統學習方式，不太習慣使用 AI 輔助工具的人</li></ul><p>這類讀者通常已有自己的學習方式或目標，可能與本文的方法不太契合。</p><hr><p>我們先從刷題前的「<strong>前置準備</strong>」說起。</p><p>具體而言，有兩個前置準備：<strong>自學教材與刷題清單</strong>。</p><h2 id="前置準備一：演算法自學教材推薦"><a href="#前置準備一：演算法自學教材推薦" class="headerlink" title="前置準備一：演算法自學教材推薦"></a>前置準備一：演算法自學教材推薦</h2><p>像我這類半路轉職且演算法基礎為零的人。先讀過一些教材再開始，肯定會比較好。</p><p>但不必事先就花大量時間，可以學習教材到一定階段後，比如最常見的 array 和 linked list，就開始練習相關題目，讓理論與應用相輔相成。</p><p>關於教材選擇，我嘗試過好些書或線上課，從結果來看，只能說<strong>不盡理想</strong>。</p><p>但其中還是有些優質資源，特別適合初學者。</p><p>以下是我推薦且正在使用的教材，它們相當程度考慮了無基礎者的自學需求。</p><h3 id="一、《Hello-演算法》"><a href="#一、《Hello-演算法》" class="headerlink" title="一、《Hello 演算法》"></a>一、《Hello 演算法》</h3><p>這是一個<a href="https://www.hello-algo.com/zh-hant/chapter_hello_algo/">網站</a>（線上版的電子書），本質上是一個 <a href="https://github.com/krahets/hello-algo">GitHub 開源專案</a>。目前已有繁體中文版，同時也出版了實體書。</p><p>本書完全面向新手，還搭配了各種實用的動畫幫助理解——這是實體書辦不到的。</p><p>此外，它支援多種程式語言，能滿足不同開發者對熟悉程式碼範例的需求——這也是實體書無法擁有的優勢。</p><h3 id="二、《大話資料結構：全新彩色版》"><a href="#二、《大話資料結構：全新彩色版》" class="headerlink" title="二、《大話資料結構：全新彩色版》"></a>二、《大話資料結構：全新彩色版》</h3><p>這本《<a href="https://www.tenlong.com.tw/products/9789865501693">大話資料結構</a>》和更加知名的《<a href="https://www.tenlong.com.tw/products/9786267146804">大話設計模式</a>》是同一位作者。</p><p>書中有大量插圖幫助你理解，更重要的是，作者在自序中<strong>強調</strong>，這是一本面向「<strong>自學</strong>」的教材。</p><p>所以很多概念都會<strong>從頭講起</strong>，不會讓你有<strong>囫圇吞棗</strong>之感。</p><p>我個人已經讀完一輪，覺得確實有做到上述承諾。不過書中仍有少數比較進階的內容，我都是先跳過——建議你也如此。</p><p>附帶一提，本書的實作語言是 C，所以我閱讀時比較少看程式碼實作，而是著重於圖示和觀念的理解。</p><hr><p>教材部分，以上兩樣就足夠了！</p><p>有些人可能注意到，我並沒有推薦大多數刷題者所熟知的《<a href="https://www.tenlong.com.tw/products/9789865025526">提升程式設計師的面試力｜189道面試題目與解答</a>》，不是它不好，只是我還沒看而已😅</p><h2 id="前置準備二：刷題清單"><a href="#前置準備二：刷題清單" class="headerlink" title="前置準備二：刷題清單"></a>前置準備二：刷題清單</h2><p>有了書可以作為參考，接著就從第 1 題直接開刷了嗎？當然不是。</p><p>LeetCode 題目成百上千，題海茫茫，所以我們還需要「刷題清單」，它們能幫助我們更有效地學習。</p><p>尤其對於初學者，<strong>信心</strong>很重要！刷題的<strong>路徑</strong>也是。</p><p>這意謂著<strong>挫折感不能太多</strong>，不然容易半途而廢。</p><p>這些精心挑選的題目，涵蓋了各種基本且常見的演算法和資料結構，讓我們能夠系統性地提升自己，循序漸進。</p><p>這裡，我要介紹兩個廣受歡迎的題單：<a href="https://www.techinterviewhandbook.org/grind75/">Grind 75</a> 和 <a href="https://neetcode.io/practice">NeetCode 150</a>。</p><h3 id="Grind-75"><a href="#Grind-75" class="headerlink" title="Grind 75"></a>Grind 75</h3><blockquote><p>A modern Blind 75 you can customize, by the author of Blind 75.</p></blockquote><p>由 Blind 75——可能是史上最知名的 LeetCode 刷題清單——的作者，經過改良之後的新版。</p><p>用網站的方式呈現，而且加入更多功能！不再是固定的 75 題。而是可以讓你依照實際的準備時間，選擇更多（最多 169 題）或更少。</p><p>網站會依照<strong>你設定的條件</strong>，顯示你應該刷哪些題目，以獲得最高的刷題 CP 值。</p><p><img src="https://i.imgur.com/yy8wngp.png" alt="Grind 75"><span class="cap">Grind 75</span></p><p>這是我目前的刷題進度，我選擇了「Group by Weeks」、「Order by Difficulty」，這樣會從 Easy 題目開始一一列給你。</p><h3 id="NeetCode-150"><a href="#NeetCode-150" class="headerlink" title="NeetCode 150"></a>NeetCode 150</h3><blockquote><p>The NeetCode 150 is the Blind 75 plus 75 more problems. It’s a more beginner friendly and comprehensive list.</p></blockquote><p>和上述網站大同小異，這 150 題是以 Blind 75 為基礎加以擴充。</p><p>兩者主要的差別是，作者是個<a href="https://www.youtube.com/@NeetCode">知名 YouTuber</a>。所以這 150 題都有<strong>影片版的題解</strong>，可作為你學習上的參考。</p><p>如果只是單純想要題單，那 Grind 75 應該就足夠了。</p><hr><p>講完了前置準備，我們還有一件事要聊聊。</p><p>本文標題既然叫「<strong>刷題之『道』</strong>」，那就要展現一點<strong>獨特的價值觀</strong>，以符合「<strong>道</strong>」這個字的重量與意涵。</p><p>而我認為，這其中的道，關鍵就在於——<strong>如何與 AI 互動</strong>。</p><h2 id="AI-的兩種用法：快與慢"><a href="#AI-的兩種用法：快與慢" class="headerlink" title="AI 的兩種用法：快與慢"></a>AI 的兩種用法：快與慢</h2><p>我將 AI 的使用方式（互動模式） 分為兩種：「快速模式」和「深度模式」。</p><h3 id="快速模式"><a href="#快速模式" class="headerlink" title="快速模式"></a>快速模式</h3><p>所謂的「<strong>快速模式</strong>」，就是讓 AI 幫你做那些，人類做起來很慢、很無聊，但機器做卻非常輕鬆的活。</p><p>大概就是各式各樣<strong>需要自動化的繁瑣任務</strong>，比如整理報表、改錯字之類的。</p><p>不用說，這類的需求還挺多的。</p><p>甚至你有一個程式開發上的需求，想知道怎麼寫，直接問它，叫它給出程式碼——<strong>直接拿來用，而不管其中的原理</strong>。這也是一種「<strong>快</strong>」。</p><p>簡言之，所謂的「快」，就是讓 AI「<strong>代替</strong>」你做事——包括<strong>思考</strong>。</p><h3 id="深度模式"><a href="#深度模式" class="headerlink" title="深度模式"></a>深度模式</h3><p>AI 可以代替你做很多事——通常是那些你<strong>不喜歡做</strong>的事。</p><p>但它（就目前而言）還不能<strong>代替你學習</strong>。所以學習「本身」往往不適用於快速模式。</p><p>AI 確實已經學會了！<strong>但你還沒</strong>。</p><p>而「<strong>深度模式</strong>」則是與 AI 進行<strong>深入的對話與討論</strong>，以獲得<strong>更全面的理解</strong>。</p><p>這個模式下，我們要的<strong>不僅僅是答案</strong>，而是探索<strong>問題的本質</strong>和<strong>背後的原理</strong>。通過與 AI 進行深度交流，我們可以激發新的思考，發現自己思維中的盲點，最終達到<strong>更高的學習層次</strong>。</p><p>如同我在「<a href="/about/#AI-%E6%99%82%E4%BB%A3%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%80%85">AI 時代的工作者</a>」中說的，這是我喜歡，也是我使用 AI 的<strong>主要方式</strong>。</p><blockquote><p>相關文章：<a href="/myth-of-ai-writing-efficiency/">AI 讓寫作變輕鬆了？我可不這麼認為</a></p></blockquote><hr><p>快速模式適用於需要<strong>立刻解決問題</strong>或<strong>取得資訊</strong>的情況，而深度模式則適合<strong>深刻的理解和學習</strong>。</p><p>在刷題過程中，我們可以靈活運用這兩種模式（但<strong>主軸</strong>仍是深度模式），以達到最佳的學習效果。</p><h2 id="我的刷題原則與價值觀"><a href="#我的刷題原則與價值觀" class="headerlink" title="我的刷題原則與價值觀"></a>我的刷題原則與價值觀</h2><p>如前所述，這一篇我們還不會講到具體的做法， 但可以先解釋一些<strong>原則與價值觀</strong>。</p><p>這是我目前刷題的基本原則：</p><ul><li>每天只刷一題。</li><li>每天只刷一小時。</li><li>每一題要盡可能深入理解、釐清細節，或嘗試不同的做法。</li></ul><p>這也是為何這個方法<strong>並不適合</strong>現在就要透過大量刷題來求職的人——它更多是為了長遠打算。</p><h3 id="多多益善？"><a href="#多多益善？" class="headerlink" title="多多益善？"></a>多多益善？</h3><p>你可能會覺得：「那我一天刷 2 小時，每小時刷 2 題，這樣一天就可以做 4 題了！」</p><p>這我不反對，但也不建議。因為太在意刷題的「<strong>數量</strong>」可能會導致淺層學習，無法真正掌握核心概念。</p><p>更重要的是，長時間、高強度的刷題，容易造成<strong>疲勞和厭煩感</strong>，反而降低學習效率——甚至<strong>放棄</strong>。</p><h3 id="少則得"><a href="#少則得" class="headerlink" title="少則得"></a>少則得</h3><p>我是這樣想的：顯然我不太熱衷於刷題，更喜歡做具體的專案。</p><p>所以<strong>這輩子</strong>可能就<strong>只會完成</strong> NeetCode 150 或 Grind 75 的最大題數（169 題）。對於「熟悉常見演算法與資料結構」這個命題，我認為這些題目已經足夠。</p><p>既然如此，求快就不是重點，數量當然也不是。</p><p>同時我們還要考慮到「<strong>複習</strong>」，畢竟好的學習肯定包含了<strong>有效的複習</strong>。做的題目不多，對複習反而是一大<strong>優勢</strong>，至少心理上不會那麼猶豫。</p><p>最後補充 Grind 75 作者在 <a href="https://www.techinterviewhandbook.org/grind75/faq">FAQ</a> 中的最後一道問答，很能表達我的想法：</p><blockquote><p>Will you add more questions in future?（問題）</p></blockquote><blockquote><p>You have time to do more than 169 questions?! <strong>The returns on doing questions beyond this list is diminishing and not very recommended.</strong> But if there’s high demand, I could add more.（回答）</p></blockquote><p>少則得，多則惑。</p><hr><h2 id="第一篇結語"><a href="#第一篇結語" class="headerlink" title="第一篇結語"></a>第一篇結語</h2><p>本文探討了刷題的準備工作、基本原則和價值觀。</p><p>我們介紹了一些有用的資源，比如《Hello 演算法》 或 Grind 75。還討論了為什麼我不打算追求刷題的數量，並解釋了背後的思維。</p><p>這些看法不免存在著個人偏好，但也有一定的普世價值。</p><p>每個人都有自己的學習風格和目標，對於希望深入理解演算法，而不僅僅是為了應付面試的人來說，本文應該會是個不錯的參考。</p><p>下一篇中，我將介紹具體的刷題策略和技巧，以及如何運用 AI 助手來最大化我們的學習成果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/g9WO9S7.jpeg&quot;&gt;&lt;/p&gt;
&lt;!-- ![picture 2](https://i.imgur.com/SsRLsJl.jpeg) --&gt;

&lt;blockquote&gt;
&lt;p&gt;歡迎使用我的刷題助手 GPTs——&lt;a href=&quot;https://chatgpt.com/g/g-6731960a3a2081909fe1975e05c034c4-li-li-kou-kou&quot;&gt;哩哩扣扣&lt;/a&gt; 🤖&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;你刷過 LeetCode 嗎？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;老實說，我一直很排斥刷題，因為感覺很「填鴨」，一點也不吸引人。&lt;/p&gt;
&lt;p&gt;這可能是因為這件事和求職面試掛勾，所以讓人有壓力；又或者我還沒有真正領略資料結構與演算法之美。&lt;/p&gt;
&lt;p&gt;總之，&lt;strong&gt;我很逃避！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但這次不同了。&lt;/p&gt;
&lt;p&gt;我找到了一個全新的方法，讓刷題&lt;strong&gt;不再那麼痛苦&lt;/strong&gt;，還幫助我盡可能理解每一道題——這都要歸功於 AI。&lt;/p&gt;
&lt;p&gt;我將分享如何透過 &lt;strong&gt;AI 輔助&lt;/strong&gt;來提升刷 LeetCode 的學習效果。關鍵是——它讓原本枯燥的過程（對我來說）&lt;strong&gt;變得有趣&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;當然，這樣的方法也有一些「&lt;strong&gt;限制&lt;/strong&gt;」，後續會提及。&lt;/p&gt;
&lt;p&gt;正文開始前，我必須先花一些篇幅來介紹整個系列的大綱。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/g9WO9S7.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="LeetCode" scheme="https://blog.kyomind.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 30：系列回顧與完賽心得</title>
    <link href="https://blog.kyomind.tw/django-ninja-30/"/>
    <id>https://blog.kyomind.tw/django-ninja-30/</id>
    <published>2024-10-12T03:39:06.000Z</published>
    <updated>2025-01-23T08:41:49.428Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>這是 Django Ninja 系列教學的第 30 篇。</p><p>系列最終章，我們的「<strong>Django Ninja 探險</strong>」將暫時告一段落。</p><p>這當然不是結束，畢竟 Django Ninja 還只是一個<strong>相對新的專案</strong>——我對它的未來充滿期待。</p><p>本文將分為兩個部分：</p><ol><li>回顧整個系列，檢視我們在各章中學到的概念與技術——盡可能只提重點。</li><li>分享我在寫作過程中的最大挑戰、對 Django Ninja 的期待，最後則是我的鐵人賽完賽心得。</li></ol><p>受限於篇幅，更多的<strong>幕後花絮、創作細節及個人心得</strong>，我將在與正賽無關的第 31、32 篇中，再行分享。</p><p>此外，我還會不定期更新「<strong>Django Ninja 番外篇</strong>」，補充正篇中未能詳述的內容。有興趣的讀者，<strong>歡迎<a href="https://ithelp.ithome.com.tw/users/20167825/ironman/7451">訂閱本系列</a>或<a href="/subscribe/">本站 email</a>。</strong></p><p>話不多說，我們直接開始。</p><h3 id="快速導覽"><a href="#快速導覽" class="headerlink" title="快速導覽"></a>快速導覽</h3><p>👉 <strong>完整系列目錄</strong>：<a href="/django-ninja/">點此查看</a><br>👉 <strong>程式碼範例</strong>：<a href="https://github.com/kyomind/Django-Ninja-Tutorial">GitHub 範例專案</a></p><hr><h2 id="一、系列目標與主要學習成果"><a href="#一、系列目標與主要學習成果" class="headerlink" title="一、系列目標與主要學習成果"></a>一、系列目標與主要學習成果</h2><p>回到第 1 篇的開頭，整個系列的目標是：</p><blockquote><p>在這個 30 天的系列文章中，我們將詳細探討 Django Ninja 的<strong>基礎實作</strong>，透過<strong>文字教學</strong>與<strong>範例專案</strong>的程式碼，帶你一步一步熟悉這個強大而靈活的 Django API 開發框架。</p></blockquote><p>沒錯，而我們具體做了哪些事呢？</p><h3 id="主要學習成果"><a href="#主要學習成果" class="headerlink" title="主要學習成果"></a>主要學習成果</h3><p>透過本系列，讀者掌握了以下 Django Ninja 核心技能：</p><ol><li>設定 Django Ninja 路由。（卷 7-8）</li><li>處理各種 HTTP 請求及參數——路徑參數、查詢參數、body。（卷 9-12）</li><li>使用 Schema 設計和定義 API 回應的資料結構。（卷 13-16）</li><li>從專案程式碼自動產生 API 文件、透過 Pydantic 驗證資料、有效處理系統拋出的錯誤。（卷 17-22）</li><li>靈活運用進階功能，包括檔案上傳、分頁和資料過濾。（卷 23-27）</li></ol><p>還有最後的身分認證與單元測試。可說是一段<strong>相當完整的旅程</strong>。</p><span id="more"></span><hr><p>其中的精妙與困難，這裡不再贅述。</p><p>讓我們一起回顧，我認為學習 Django Ninja 的一些重點，以及它帶來的<strong>滿足感</strong>——這很重要！</p><h2 id="二、各章節重點回顧"><a href="#二、各章節重點回顧" class="headerlink" title="二、各章節重點回顧"></a>二、各章節重點回顧</h2><p>我們只挑各章節中<strong>特別值得一提</strong>的部分。有我<strong>個人的觀點</strong>。</p><h3 id="第二章：範例專案與環境設定"><a href="#第二章：範例專案與環境設定" class="headerlink" title="第二章：範例專案與環境設定"></a><strong>第二章：範例專案與環境設定</strong></h3><p>本章最重要的，莫過於對「Python 現代開發工具」的介紹。再次推薦「<a href="https://blog.wei-lee.me/posts/tech/2020/02/python-table-manners-series/">Python Table Manners</a>」系列。</p><p>從 Poetry 到 Mypy，我認為這些工具都是現代專案中的<strong>必備要素</strong>。它們各有替代品，你可以選擇自己偏好的工具，只要確保這些要素都已整合到開發流程中。</p><p>我相信，無論 AI 如何發展，專案的「<strong>基礎建設</strong>」總是不可少的。</p><h3 id="第三章第一節：路由"><a href="#第三章第一節：路由" class="headerlink" title="第三章第一節：路由"></a>第三章第一節：路由</h3><p>Django Ninja 的路由設定與傳統的 Django、Django REST framework 有<strong>很大的不同</strong>。</p><p>這部分，後起之秀基本上都向 Flask 首創的「<strong>路由裝飾器</strong>」看齊——優秀的設計，值得相互借鑑、學習🫡</p><p>新寫法不僅更直覺、簡單，還減少了路由設定<strong>分散</strong>在不同檔案的<strong>窘境</strong>。</p><p>不過，路由也因此成了一開始學習 Django Ninja 的<strong>小小門檻</strong>。所以我花了足足兩篇，比較兩者的差異，讓你能更清楚其中的思路與考慮。</p><h3 id="第三章第三節：HTTP-回應"><a href="#第三章第三節：HTTP-回應" class="headerlink" title="第三章第三節：HTTP 回應"></a>第三章第三節：HTTP 回應</h3><p>表面上是講 HTTP 回應，其實重點在介紹 Django Ninja Schema——也就是 Pydantic BaseModel。</p><p>說本節是「<strong>Pydantic 入門</strong>」，一點也不為過。</p><p>而且，對 Pydantic 的了解，其重要性還延伸至 API 文件、資料驗證等後續章節。可說是一切的基礎。</p><p>Django Ninja 用 Schema 來<strong>組織與序列化</strong> HTTP 回應，這與 Django REST framework 使用的<strong>序列化器</strong>，<strong>本質上並無區別</strong>。</p><p>但兩者在<strong>使用思維上的差異</strong>，卻帶給我<strong>截然不同</strong>的體驗。主要見解我已寫在〈卷 15：回應（三）為何不用 ModelSchema？——相比 DRF，我更偏愛 Django Ninja 的理由〉，值得你再三回味。</p><h3 id="第四章：API-文件"><a href="#第四章：API-文件" class="headerlink" title="第四章：API 文件"></a>第四章：API 文件</h3><p>這還有什麼好說的呢？太關鍵了！</p><p>如果沒有「依程式碼、type hints 自動產生 API 文件」這個<strong>殺手級功能</strong>，習慣 Django REST framework 的開發者如我，怎麼會有動力再學習一個<strong>定位類似</strong>的新框架？</p><p><strong>懶就是一切的動力！</strong></p><h3 id="第五章：資料驗證與錯誤處理"><a href="#第五章：資料驗證與錯誤處理" class="headerlink" title="第五章：資料驗證與錯誤處理"></a>第五章：資料驗證與錯誤處理</h3><p>這一章是我的血與淚😂</p><p>Django Ninja 的資料驗證與錯誤處理方式，和 Django REST framework <strong>很不一樣</strong>。更讓我頭痛的是，之前工作中我並非以「最正規」的方式實踐——仍受到 Django REST framework 開發習慣的影響。</p><p>那時還想說：「這也太難用了吧！」——原來是我自己誤解了。為了寫好這 4 篇，我幾乎是<strong>重新學習</strong>。不得不說，有一種<strong>豁然開朗</strong>的感覺。</p><p>因此，你在本系列看到的實作方式，應該是相當合理、道地的用法。結合經驗，那些坑我都幫你踩過了，請勿擔心。</p><hr><p>接下來是<strong>個人心得</strong>部分。</p><h2 id="三、寫作上的最大挑戰"><a href="#三、寫作上的最大挑戰" class="headerlink" title="三、寫作上的最大挑戰"></a>三、寫作上的最大挑戰</h2><p>我覺得，整個系列在創作上的<strong>最大挑戰</strong>，就是要盡可能<strong>搭配</strong> <a href="https://github.com/kyomind/Django-Ninja-Tutorial">GitHub 專案</a>中的<strong>程式碼</strong>，來為文章提供<strong>稱職且連貫的範例</strong>。</p><p>（不用說，這個專案非常歡迎「<strong>來自你的星星</strong>」唷🌟）</p><p>這比單純的舉例要<strong>麻煩許多</strong>，我必須事先規劃整個系列的內容進度，思考 API 實作如何跟每一篇的主題<strong>契合</strong>，讓人有「<strong>帶入感</strong>」。</p><p>此外，還得考慮到敘事上的<strong>連貫性</strong>——程式碼要<strong>循序漸進，從簡單到複雜</strong>，而不能反過來。這樣讀者才能夠順暢地跟著專案一起學習。</p><p>這樣的規劃不僅需要技術知識，更多的是教學思維與<strong>讀者意識</strong>——知道讀者可能會在哪裡「卡關」。</p><p>整體而言，是個<strong>極具挑戰但也非常有趣</strong>的過程。</p><hr><h2 id="四、我對-Django-Ninja-的評價與期待"><a href="#四、我對-Django-Ninja-的評價與期待" class="headerlink" title="四、我對 Django Ninja 的評價與期待"></a>四、我對 Django Ninja 的評價與期待</h2><p>Django Ninja 是烏克蘭開發者 <a href="https://github.com/vitalik">Vitaliy Kucheryaviy</a> 一人維護的開源專案，更新的頻率不高，通常無法立刻回應用戶們的期待。</p><p>但我想說：「如果可以，我真的不願再回去寫 Django REST framework 了。」</p><p>原因只有一個，就是第 15 篇提到的——「<strong>明確優於隱晦</strong>」（Explicit is better than implicit）。</p><p>Django Ninja 也許沒讓開發更「快」，但絕對更透明、更可控。</p><p>我相信，從長遠來看，這種<strong>透明與可控</strong>，能為我們省下的 debug 時間，遠不是簡單的「快」可以比擬的。</p><h3 id="未來期待"><a href="#未來期待" class="headerlink" title="未來期待"></a>未來期待</h3><p>隨著 Django 本身對<strong>非同步</strong>（async）的支援日益增加，我相信 Django Ninja 的潛力正被逐步釋放。</p><p>我期待，在不久的將來，當人們談到「<strong>用 Django 寫 API</strong>」時，不再只有想到 Django REST framework，還會提及這個<strong>強而有力的新選擇——Django Ninja</strong>。</p><hr><h2 id="五、完賽心得"><a href="#五、完賽心得" class="headerlink" title="五、完賽心得"></a>五、完賽心得</h2><p>呼！終於寫完了，這個過程比我想像的更加漫長。</p><p>從 9 月初到雙十節，整整 40 天（含開賽前的備稿），我每天早上醒來就是寫作，全心全意投入到這場盛宴當中。最終，我交出了一份自己也覺得滿意的作品。</p><p>在我看來，寫作的滿足感在於「<strong>提供價值、發揮影響力</strong>」。這份價值不僅是對讀者，也包括對作者自己——透過這 30 篇文章創作，我對 Django Ninja 的理解又增進許多。</p><p>希望這個系列能為你帶來些許價值，讓你在接下來的開發旅程中更加得心應手。</p><p>每一次的寫作都是一次學習，而每一次的學習都是一次成長。這個系列或許已經結束，但我們的軟體工程師之路，還遠遠沒有。</p><p>而且，如果可以，我希望這能成為一生的追求。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是 Django Ninja 系列教學的第 30 篇。&lt;/p&gt;
&lt;p&gt;系列最終章，我們的「&lt;strong&gt;Django Ninja 探險&lt;/strong&gt;」將暫時告一段落。&lt;/p&gt;
&lt;p&gt;這當然不是結束，畢竟 Django Ninja 還只是一個&lt;strong&gt;相對新的專案&lt;/strong&gt;——我對它的未來充滿期待。&lt;/p&gt;
&lt;p&gt;本文將分為兩個部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;回顧整個系列，檢視我們在各章中學到的概念與技術——盡可能只提重點。&lt;/li&gt;
&lt;li&gt;分享我在寫作過程中的最大挑戰、對 Django Ninja 的期待，最後則是我的鐵人賽完賽心得。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;受限於篇幅，更多的&lt;strong&gt;幕後花絮、創作細節及個人心得&lt;/strong&gt;，我將在與正賽無關的第 31、32 篇中，再行分享。&lt;/p&gt;
&lt;p&gt;此外，我還會不定期更新「&lt;strong&gt;Django Ninja 番外篇&lt;/strong&gt;」，補充正篇中未能詳述的內容。有興趣的讀者，&lt;strong&gt;歡迎&lt;a href=&quot;https://ithelp.ithome.com.tw/users/20167825/ironman/7451&quot;&gt;訂閱本系列&lt;/a&gt;或&lt;a href=&quot;/subscribe/&quot;&gt;本站 email&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;話不多說，我們直接開始。&lt;/p&gt;
&lt;h3 id=&quot;快速導覽&quot;&gt;&lt;a href=&quot;#快速導覽&quot; class=&quot;headerlink&quot; title=&quot;快速導覽&quot;&gt;&lt;/a&gt;快速導覽&lt;/h3&gt;&lt;p&gt;👉 &lt;strong&gt;完整系列目錄&lt;/strong&gt;：&lt;a href=&quot;/django-ninja/&quot;&gt;點此查看&lt;/a&gt;&lt;br&gt;👉 &lt;strong&gt;程式碼範例&lt;/strong&gt;：&lt;a href=&quot;https://github.com/kyomind/Django-Ninja-Tutorial&quot;&gt;GitHub 範例專案&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、系列目標與主要學習成果&quot;&gt;&lt;a href=&quot;#一、系列目標與主要學習成果&quot; class=&quot;headerlink&quot; title=&quot;一、系列目標與主要學習成果&quot;&gt;&lt;/a&gt;一、系列目標與主要學習成果&lt;/h2&gt;&lt;p&gt;回到第 1 篇的開頭，整個系列的目標是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在這個 30 天的系列文章中，我們將詳細探討 Django Ninja 的&lt;strong&gt;基礎實作&lt;/strong&gt;，透過&lt;strong&gt;文字教學&lt;/strong&gt;與&lt;strong&gt;範例專案&lt;/strong&gt;的程式碼，帶你一步一步熟悉這個強大而靈活的 Django API 開發框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沒錯，而我們具體做了哪些事呢？&lt;/p&gt;
&lt;h3 id=&quot;主要學習成果&quot;&gt;&lt;a href=&quot;#主要學習成果&quot; class=&quot;headerlink&quot; title=&quot;主要學習成果&quot;&gt;&lt;/a&gt;主要學習成果&lt;/h3&gt;&lt;p&gt;透過本系列，讀者掌握了以下 Django Ninja 核心技能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;設定 Django Ninja 路由。（卷 7-8）&lt;/li&gt;
&lt;li&gt;處理各種 HTTP 請求及參數——路徑參數、查詢參數、body。（卷 9-12）&lt;/li&gt;
&lt;li&gt;使用 Schema 設計和定義 API 回應的資料結構。（卷 13-16）&lt;/li&gt;
&lt;li&gt;從專案程式碼自動產生 API 文件、透過 Pydantic 驗證資料、有效處理系統拋出的錯誤。（卷 17-22）&lt;/li&gt;
&lt;li&gt;靈活運用進階功能，包括檔案上傳、分頁和資料過濾。（卷 23-27）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;還有最後的身分認證與單元測試。可說是一段&lt;strong&gt;相當完整的旅程&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja 系列" scheme="https://blog.kyomind.tw/categories/Django-Ninja-%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="Django REST framework" scheme="https://blog.kyomind.tw/tags/Django-REST-framework/"/>
    
  </entry>
  
</feed>
