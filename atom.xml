<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/leaf.svg</icon>
  <subtitle>我的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2024-09-14T04:12:04.577Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>Kyo Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Django Ninja 教學 02：架構 × 章節導覽</title>
    <link href="https://blog.kyomind.tw/django-ninja-02/"/>
    <id>https://blog.kyomind.tw/django-ninja-02/</id>
    <published>2024-09-13T18:28:23.000Z</published>
    <updated>2024-09-14T04:12:04.577Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>上一篇中，我們講述了系列的整體方向。現在，我將進一步深入，為你詳細介紹<strong>系列的架構與各個章節安排。</strong></p><p>可以說，本文就是整個系列的<strong>藍圖。</strong></p><p>一般而言，架構介紹通常會直接放在第一篇的後半段（如果有的話），但我決定<strong>獨立成一篇。</strong></p><p>原因無他，<strong>我在整個教學架構上花費了相當的心思，希望為讀者提供一個全面的概覽</strong>。這有助於你快速進入狀況，並了解自己目前正在學習主題哪一個部分。</p><p>話不說多，讓我們一一介紹。</p><span id="more"></span><hr><p>本系列共分為八章，<strong>只有第三章有細分小節</strong>——因為內容較多。</p><p>以下是各章節介紹。（各篇名稱與內容仍可能會有小幅調整，但整體架構不變）</p><h2 id="第一章：導讀與-Django-Ninja-介紹"><a href="#第一章：導讀與-Django-Ninja-介紹" class="headerlink" title="第一章：導讀與 Django Ninja 介紹"></a>第一章：導讀與 Django Ninja 介紹</h2><p>開篇介紹本系列的主旨、定位，適合的目標讀者，以及學習 Django Ninja 的理由。</p><p>架構篇中，說明系列的安排與組成、每篇文章的主要內容與學習順序。</p><p>最後為讀者介紹 Django Ninja 與 Django REST Framework 等基本概念，包括彼此的定位與異同。</p><ul><li><strong>卷 1：系列導讀 × 目標讀者</strong></li><li><strong>卷 2：架構 × 章節導覽</strong>（本篇）</li><li><strong>卷 3：Django Ninja 介紹——與 Django REST framework 主要區別</strong></li></ul><h2 id="第二章：範例專案與環境設定"><a href="#第二章：範例專案與環境設定" class="headerlink" title="第二章：範例專案與環境設定"></a>第二章：範例專案與環境設定</h2><p>介紹系列的範例專案——<a href="https://github.com/kyomind/Django-Ninja-Tutorial">Django-Ninja-Tutorial</a>，透過具體的程式碼改動，作為學習過程中的參考。（覺得專案有用心的話，<strong>千萬不要吝嗇你的 🌟 哦！</strong>🥰）</p><p>範例程式碼是學習新技術的良師益友，也是我的嘔心瀝血之作 😭</p><p>我們也會介紹專案所使用的 Python 開發工具，讓讀者能體驗真實的開發環境。</p><p>最後，我們會一步一步帶著你，讓專案能夠在你的本機環境運行。</p><ul><li><strong>卷 4：範例專案介紹</strong></li><li><strong>卷 5：Python 現代開發工具介紹</strong></li><li><strong>卷 6：環境設定 × 如何使用本專案</strong></li></ul><hr><h2 id="第三章：Django-Ninja-基本功"><a href="#第三章：Django-Ninja-基本功" class="headerlink" title="第三章：Django Ninja 基本功"></a>第三章：Django Ninja 基本功</h2><p>Django Ninja 的核心部分，任何一個 API 開發者都需要熟悉的基本功。</p><p>本章總共分成三大部分：<strong>路由、請求與回應</strong>。</p><h3 id="第一節：路由（Routers）"><a href="#第一節：路由（Routers）" class="headerlink" title="第一節：路由（Routers）"></a>第一節：路由（Routers）</h3><p><strong>端點（endpoints）與路由是 API 的起點。</strong></p><p>Django Ninja 的路由設定方式，與傳統 Django 有很大不同。因此，我們將路由放在第一位，作為學習 API 開發的入口。</p><ul><li><strong>卷 7：路由（上）傳統 Django 路由做法（兼章節概論）</strong></li><li><strong>卷 8：路由（下）Django Ninja 路由</strong></li></ul><h3 id="第二節：請求（Request）"><a href="#第二節：請求（Request）" class="headerlink" title="第二節：請求（Request）"></a>第二節：請求（Request）</h3><p>路由之後是 HTTP 請求，講述 Django Ninja 處理請求的三大重點：路徑參數、查詢參數和請求主體（body）。</p><p>其中最重要的是 body，將使用 Django Ninja Schema（即 Pydantic BaseModel）來進行資料接收與驗證。</p><ul><li><strong>卷 9：請求（一）Django Ninja 處理請求概論（兼論 FBVs）</strong></li><li><strong>卷 10：請求（二）Path Parameters</strong></li><li><strong>卷 11：請求（三）Query Parameters</strong></li><li><strong>卷 12：請求（四）Request Body 與 Schema 介紹</strong></li></ul><h3 id="第三節：回應（Response）"><a href="#第三節：回應（Response）" class="headerlink" title="第三節：回應（Response）"></a>第三節：回應（Response）</h3><p>請求之後是回應，回應仍需要使用 Schema，<strong>但變化比請求更多。</strong></p><p>本節將介紹回應的基本架構、處理方式、巢狀 Schema，以及 Resolver 方法。</p><ul><li><strong>卷 13：回應（一）Django Ninja 處理回應概論</strong></li><li><strong>卷 14：回應（二）Nested Response</strong></li><li><strong>卷 15：回應（三）為什麼不使用 ModelSchema？—— Django Ninja 與 DRF 的設計理念比較</strong></li><li><strong>卷 16：回應（四）Resolver 方法（類似 DRF 的 SerializerMethodField）</strong></li></ul><hr><h2 id="第四章：API-文件"><a href="#第四章：API-文件" class="headerlink" title="第四章：API 文件"></a>第四章：API 文件</h2><p>掌握了 Django Ninja 如何處理請求與回應後，剩下的另一關鍵就是 API 文件。</p><p>API 文件的<strong>品質與可讀性</strong>對 API 使用者至關重要，本章將介紹 Django Ninja 在<strong>自動化產生 API 文件</strong>中的應用，並分享我認為的一些好的實踐。</p><ul><li><strong>卷 17：API 文件的實踐重點</strong></li><li><strong>卷 18：Pydantic 與 API 文件</strong></li></ul><h2 id="第五章：資料驗證與錯誤處理"><a href="#第五章：資料驗證與錯誤處理" class="headerlink" title="第五章：資料驗證與錯誤處理"></a>第五章：資料驗證與錯誤處理</h2><p>資料驗證和錯誤處理關係到 API 的穩定與可靠。本章探討如何在 Django Ninja 中有效地進行資料驗證和錯誤捕捉，確保 API 的健壯性。</p><ul><li><strong>卷 19：資料驗證</strong></li><li><strong>卷 20：錯誤處理</strong></li></ul><hr><h2 id="第六章：進階功能"><a href="#第六章：進階功能" class="headerlink" title="第六章：進階功能"></a>第六章：進階功能</h2><p>雖說是入門，但我們仍有必要介紹 API 的<strong>常見進階功能</strong>。這些技術將協助你應對大型專案中的典型挑戰。</p><p>本章目標不是逐步引導你完成每個功能的實作，而是聚焦展示它們的<strong>概念與應用場景</strong>。你可以依據這些提示，自行深入學習與應用。</p><ul><li><strong>卷 21：檔案上傳</strong></li><li><strong>卷 22：分頁（Pagination）</strong></li><li><strong>卷 23：過濾（Filtering）</strong></li><li><strong>卷 24：限流（Throttling）</strong></li><li><strong>卷 25：快取（Caching）</strong></li></ul><h2 id="第七章：其他重要事項"><a href="#第七章：其他重要事項" class="headerlink" title="第七章：其他重要事項"></a>第七章：其他重要事項</h2><p>本章將介紹幾個後端專案中不可或缺的主題，雖然它們與 Django Ninja 無直接關聯，但對於後端開發者來說，是必須掌握的技能。</p><ul><li><strong>卷 26：認證（Authentication）</strong></li><li><strong>卷 27：單元測試（一）Test Client 與 pytest Fixtures</strong></li><li><strong>卷 28：單元測試（二）測試函式與覆蓋率</strong></li><li><strong>卷 29：部署——Gunicorn 與容器化</strong></li></ul><h2 id="第八章：系列回顧與完賽心得"><a href="#第八章：系列回顧與完賽心得" class="headerlink" title="第八章：系列回顧與完賽心得"></a>第八章：系列回顧與完賽心得</h2><p>簡單回顧整個系列，並分享我在本次鐵人賽的創作心得與感想。</p><ul><li><strong>卷 30：系列回顧與完賽心得</strong></li></ul><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>通過這篇導覽，你已經對整個系列的架構有了清晰的認識。接下來的每一篇文章都會按照這個藍圖，循序漸進地帶領你學習 Django Ninja。</p><p>下一篇，我們將正式介紹 Django Ninja，並與老牌的 Django REST Framework 進行比較，了解兩者在 API 開發的主要功能差異與適用場景。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇中，我們講述了系列的整體方向。現在，我將進一步深入，為你詳細介紹&lt;strong&gt;系列的架構與各個章節安排。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以說，本文就是整個系列的&lt;strong&gt;藍圖。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般而言，架構介紹通常會直接放在第一篇的後半段（如果有的話），但我決定&lt;strong&gt;獨立成一篇。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;原因無他，&lt;strong&gt;我在整個教學架構上花費了相當的心思，希望為讀者提供一個全面的概覽&lt;/strong&gt;。這有助於你快速進入狀況，並了解自己目前正在學習主題哪一個部分。&lt;/p&gt;
&lt;p&gt;話不說多，讓我們一一介紹。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>Django Ninja 教學 01：系列導讀 × 目標讀者</title>
    <link href="https://blog.kyomind.tw/django-ninja-01/"/>
    <id>https://blog.kyomind.tw/django-ninja-01/</id>
    <published>2024-09-13T01:48:14.000Z</published>
    <updated>2024-09-13T03:38:16.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/5gGprsq.png" alt="2024 iThome 鐵人賽"><span class="cap">2024 iThome 鐵人賽</span></p><p>在這個 30 天的系列文章中，我們將詳細探討 Django Ninja 的<strong>基礎實作</strong>，透過<strong>文字教學</strong>與<strong>範例專案</strong>的程式碼，帶你一步一步熟悉這個強大而靈活的 Django API 開發框架。</p><p>作為 Django 生態系統中的新星（誕生於 2020 年），Django Ninja 融合了 Django 的穩定性和 FastAPI 的現代特性——<strong>Python 的型別提示（透過 Pydantic 實現）</strong>。這種<strong>強強結合</strong>，為開發者提供了一個健全、高效、直觀的 API 開發體驗。</p><p>不論你是經驗豐富的 Django 開發者，還是剛進入 API 開發領域的新手，這個系列都會為你提供實用的 Django Ninja 實戰經驗與技巧。</p><p>我們將從背景介紹、基礎概念開始，逐步深入探討 Django Ninja 的每個部分，幫助你快速掌握這個現代化 API 開發工具。</p><hr><h2 id="建議前置技能"><a href="#建議前置技能" class="headerlink" title="建議前置技能"></a>建議前置技能</h2><p>本系列的定位是「入門級」，但這裡所謂的入門，指的是 Django Ninja 框架的入門。</p><p>所以，要充分利用好教學內容與範例專案程式碼，<strong>仍建議讀者具備以下技能：</strong></p><ul><li><strong>Python 基礎知識</strong>：熟悉 Python 語法，有 Python 開發經驗者佳。</li><li><strong>Django 基礎</strong>：了解 Django 的基本組成，比如 ORM、Views、MTV 架構等。但無須了解 <a href="https://docs.djangoproject.com/en/5.1/topics/templates/">Templates</a> 部分——因為我們是開發 API。</li><li><strong>HTTP 與 Web API 概念</strong>：知道什麼是 HTTP、Web API、前後端分離，並對 RESTful API 設計原則有基本理解。</li><li><strong>版本控制</strong>：為了能夠善用並操作範例專案，需要熟悉 Git、GitHub 的基本操作。</li></ul><p>具備這些技能將幫助你更好地理解和應用本系列的內容。如果你對某些概念不太熟悉，也不用擔心，我們會在必要時進行一定的講解。</p><span id="more"></span><hr><h2 id="目標讀者"><a href="#目標讀者" class="headerlink" title="目標讀者"></a>目標讀者</h2><p>本系列「特別適合」以下讀者。你不妨看看自己屬於哪一種。</p><h3 id="一、Python-後端入門者"><a href="#一、Python-後端入門者" class="headerlink" title="一、Python 後端入門者"></a>一、Python 後端入門者</h3><p>想了解 Python 後端開發，尤其是如何建立高品質的 API。</p><h3 id="二、Django-開發者"><a href="#二、Django-開發者" class="headerlink" title="二、Django 開發者"></a>二、Django 開發者</h3><p>無論是全端或後端，所有 Django 開發者，都是本系列的目標讀者。</p><h3 id="三、FastAPI-開發者"><a href="#三、FastAPI-開發者" class="headerlink" title="三、FastAPI 開發者"></a>三、FastAPI 開發者</h3><p>對於已有 FastAPI 開發基礎的讀者，要上手 Django Ninja 應該是易如反掌🤚</p><h3 id="四、想要提升-API-開發效率的開發者"><a href="#四、想要提升-API-開發效率的開發者" class="headerlink" title="四、想要提升 API 開發效率的開發者"></a>四、想要提升 API 開發效率的開發者</h3><p>Django Ninja 提供了簡潔、快速的 API 開發方式。</p><p>其中的一大賣點是「<strong>透過 Pydantic 與 Python type hints 自動生成 API 文件</strong>」，讓你再也不用苦惱於如何撰寫優質的 API 文件。</p><p>對於非 Python 開發者，想要在一些小專案實作規模不大的功能，Django Ninja 提供了極具吸引力的選擇。</p><h3 id="五、想熟悉-Type-Hints-的-Python-開發者"><a href="#五、想熟悉-Type-Hints-的-Python-開發者" class="headerlink" title="五、想熟悉 Type Hints 的 Python 開發者"></a>五、想熟悉 Type Hints 的 Python 開發者</h3><p>我曾在〈<a href="https://blog.kyomind.tw/robust-python-01/">《強健的 Python》筆記（一）Type Hints 的成本與挑戰</a>〉提到：</p><blockquote><p>寫 Django Ninja（或 FastAPI），<strong>你本來就要書寫大量 type hints，來產生正確、合理的 API 文件</strong>。那要求為專案的其餘部分，比如自定義的函式、類別加上 type hints，<strong>阻力相對就小得多。</strong></p></blockquote><blockquote><p>在我看來，這類採用了 Pydantic 框架所帶來的效應，就像腳踏車的輔助輪，在剛起步使用 type hints 時，<strong>有著明顯的正面引導效果。</strong></p></blockquote><p>Python type hints 如果缺乏實際應用場景，往往會讓人感到<strong>寫這些東西很辛苦，甚至有點多餘</strong>，這是人之常情。</p><p>而最好的應用場景，就是<strong>工具本身就要求你一定要寫，並且你能夠從中直接獲得效益</strong>——Django Ninja 正是如此。</p><hr><h2 id="方向與取捨"><a href="#方向與取捨" class="headerlink" title="方向與取捨"></a>方向與取捨</h2><p>在本系列中，我們將專注於 Django Ninja 的核心功能和實際應用，目的是幫助開發者快速上手並實作 API。</p><p>為了確保內容的<strong>實用性和針對性</strong>，我們對內容做出了一些取捨：</p><ul><li><strong>專注於 API 開發</strong>：如何使用 Django Ninja 來定義路由、處理請求與回應等。這些功能是實際應用中最常見的需求，更是初學者應該優先掌握的部分。</li><li><strong>聚焦於同步操作</strong>：儘管 Django Ninja 支援非同步操作（async），但 Django 本身對非同步的支援仍在逐步完善中。<ul><li>為了避免初學者被不必要的技術細節混淆，<strong>我們將只涵蓋同步操作。</strong></li><li>這不僅簡化了開發流程，也能確保與目前主流的 Django 使用習慣保持一致。</li></ul></li><li><strong>略過與 API 開發無關的部分</strong>：Django 作為一個大而全的框架，包含了許多超出 API 開發範疇的功能，例如國際化（i18n）、模板引擎等。<ul><li>這些功能雖然對一些應用場景很重要，但它們與本系列主題相關性不高，因此我們會選擇略過。</li><li>單元測試、部署、容器化等部分，則會<strong>擇要提及</strong>，不會完整介紹。</li></ul></li><li><strong>特別著重於 API 文件的建立與品質</strong>：清晰且高品質的 API 文件是現代軟體開發中不可或缺的部分，特別是在團隊合作或開放 API 給第三方使用時至關重要。<ul><li>Django Ninja 擁有從程式碼自動產生 API 文件的功能，我們將深入探討如何有效利用這項功能。</li><li><strong>何謂深入？</strong>確保 API 文件不僅能自動產生，<strong>還能具備高度的可讀性和準確性</strong>——前端人員表示欣慰。</li></ul></li></ul><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>了解完系列的整體方向後，接下來，我將介紹<strong>本系列的架構與章節安排</strong>，讓你從一開始就知曉每個章節的重點，並了解如何循序漸進地學習 Django Ninja 的核心功能。</p><p>在下一篇文章中，我會具體介紹<strong>每個章節的主軸與重點</strong>，幫助你掌握整個系列的內容安排，<strong>為後續學習做好準備。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5gGprsq.png&quot; alt=&quot;2024 iThome 鐵人賽&quot;&gt;&lt;/p&gt;
&lt;p&gt;在這個 30 天的系列文章中，我們將詳細探討 Django Ninja 的&lt;strong&gt;基礎實作&lt;/strong&gt;，透過&lt;strong&gt;文字教學&lt;/strong&gt;與&lt;strong&gt;範例專案&lt;/strong&gt;的程式碼，帶你一步一步熟悉這個強大而靈活的 Django API 開發框架。&lt;/p&gt;
&lt;p&gt;作為 Django 生態系統中的新星（誕生於 2020 年），Django Ninja 融合了 Django 的穩定性和 FastAPI 的現代特性——&lt;strong&gt;Python 的型別提示（透過 Pydantic 實現）&lt;/strong&gt;。這種&lt;strong&gt;強強結合&lt;/strong&gt;，為開發者提供了一個健全、高效、直觀的 API 開發體驗。&lt;/p&gt;
&lt;p&gt;不論你是經驗豐富的 Django 開發者，還是剛進入 API 開發領域的新手，這個系列都會為你提供實用的 Django Ninja 實戰經驗與技巧。&lt;/p&gt;
&lt;p&gt;我們將從背景介紹、基礎概念開始，逐步深入探討 Django Ninja 的每個部分，幫助你快速掌握這個現代化 API 開發工具。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;建議前置技能&quot;&gt;&lt;a href=&quot;#建議前置技能&quot; class=&quot;headerlink&quot; title=&quot;建議前置技能&quot;&gt;&lt;/a&gt;建議前置技能&lt;/h2&gt;&lt;p&gt;本系列的定位是「入門級」，但這裡所謂的入門，指的是 Django Ninja 框架的入門。&lt;/p&gt;
&lt;p&gt;所以，要充分利用好教學內容與範例專案程式碼，&lt;strong&gt;仍建議讀者具備以下技能：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Python 基礎知識&lt;/strong&gt;：熟悉 Python 語法，有 Python 開發經驗者佳。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django 基礎&lt;/strong&gt;：了解 Django 的基本組成，比如 ORM、Views、MTV 架構等。但無須了解 &lt;a href=&quot;https://docs.djangoproject.com/en/5.1/topics/templates/&quot;&gt;Templates&lt;/a&gt; 部分——因為我們是開發 API。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP 與 Web API 概念&lt;/strong&gt;：知道什麼是 HTTP、Web API、前後端分離，並對 RESTful API 設計原則有基本理解。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;版本控制&lt;/strong&gt;：為了能夠善用並操作範例專案，需要熟悉 Git、GitHub 的基本操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具備這些技能將幫助你更好地理解和應用本系列的內容。如果你對某些概念不太熟悉，也不用擔心，我們會在必要時進行一定的講解。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/5gGprsq.png" type="image"/>
    
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/categories/Django-Ninja/"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/tags/Django/"/>
    
    <category term="Django Ninja" scheme="https://blog.kyomind.tw/tags/Django-Ninja/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>2024 iThome 鐵人賽參賽思路：主題選擇、命名與標題策略</title>
    <link href="https://blog.kyomind.tw/2024-ironman-event/"/>
    <id>https://blog.kyomind.tw/2024-ironman-event/</id>
    <published>2024-09-12T07:15:09.000Z</published>
    <updated>2024-09-12T12:56:46.004Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/YmlPRz1.jpg" alt="by Sam Chivers"><span class="cap">by Sam Chivers</span></p><p>明天——13 號星期五——就是我參加今年 iThome 鐵人賽的正式開賽日。</p><p>開賽前夕，我想用本文介紹一下我的參賽主題與相關花絮。</p><p>不會提及太多技術，主要以一些個人思考及感受為主。</p><hr><p>不過在開始前，歡迎在鐵人賽網站上<strong>訂閱</strong>我的「<a href="https://ithelp.ithome.com.tw/users/20167825/ironman/7451">Django 忍法帖——Django Ninja 入門指南</a>」系列 🥰。文章也會<strong>在部落格同步發表。</strong></p><p>我為此投入了大量時間心力，還辭去了工作（誤），相信不會讓你失望。</p><p>行有餘力，也可以多多支持我們「<a href="https://ithelp.ithome.com.tw/2024ironman/signup/team/339">AI 寶寶上學去！</a>」小隊成員們的作品。</p><p>大家都是第一次參賽，非常需要您的鼓勵。</p><p>好，讓我們進入「正題」。</p><span id="more"></span><hr><h2 id="參賽主題選擇"><a href="#參賽主題選擇" class="headerlink" title="參賽主題選擇"></a>參賽主題選擇</h2><p>選擇參賽主題的無疑是最難的部分，如同我在〈<a href="https://blog.kyomind.tw/weekly-review-32/">32，下半年寫作目標</a>〉說的：</p><blockquote><p>我覺得「<strong>不大不小</strong>」的主題是最適合的。主題太大，不好下筆不說，可能已經有很多人寫過了，比如 Python 相關，需要自己再細分範疇。</p></blockquote><p>這麼說的話，我今年會首次參賽，也許只是因為剛好遇到了這個不大不小的主題——Django Ninja。</p><p>在工作上用了幾個月，覺得不錯，加上 <a href="https://fastapi.tiangolo.com/">FastAPI</a> 已經蔚為風潮好幾年，是時候讓 Django 生態系也有點新花樣了！</p><p>還有另一個理由，我在自己的部落格上連載著「<a href="https://blog.kyomind.tw/series/#Django-REST-framework-%E6%95%99%E5%AD%B8">Django REST framework 教學</a>」系列。</p><p>如你所見，這個系列寫作速度非常緩慢，其中一個主要原因，就是在接觸了 Django Ninja 之後，我變得好不想再碰 Django REST framework XD</p><p>所以，我決定以「Django Ninja」為主題參加鐵人賽，暫時擺脫 DRF 這個創作上的泥淖😷</p><hr><h2 id="如何為參賽主題命名？"><a href="#如何為參賽主題命名？" class="headerlink" title="如何為參賽主題命名？"></a>如何為參賽主題命名？</h2><p>為系列取個好名稱，我想是每個參賽者都希望的——但還真是不容易。</p><p>觀察眾多參賽主題可以看出，鐵人賽的命名氛圍一定程度受到了 ACG 圈子的影響。</p><p>其中最有名的大概就是「從零開始」系列，相關的主題可說<a href="https://ithelp.ithome.com.tw/2024ironman/signup/list?keyword=%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B">不計其數</a>。這是一個不錯的切入，也符合鐵人賽大部分文章都是<strong>面向新手</strong>的特性。</p><p>而我最終選擇了「<strong>忍法帖</strong>」這個稍微不同的命名。這個名稱不僅呼應了 Django Ninja 的「<strong>忍者</strong>」意象，也暗示了這個系列將會是一本實用的「<strong>秘笈</strong>」，包含了許多有用的技巧和知識。</p><p>更重要的是，寫程式的都知道，但我們提到「<strong>某某 Ninja</strong>」的時候，就是指很厲害的意思！😎</p><p>後來我覺得，系列的命名可能還是其次，更重要的是，每篇文章標題要怎麼跟系列名稱搭配。</p><p>這就要講到下面要說的：<strong>文章標題的前綴議題。</strong></p><hr><h2 id="如何決定文章標題前綴？"><a href="#如何決定文章標題前綴？" class="headerlink" title="如何決定文章標題前綴？"></a>如何決定文章標題前綴？</h2><p>標題前綴，這什麼東西？</p><p>這是指系列中的每一篇文章，<strong>在標題中都會有的「共同元素」</strong>，這個共同元素大多是以「標題的前綴」形式出現的。</p><p>最常見的標題前綴，就是「<strong>Day XX</strong>」。</p><p>這不難理解，畢竟鐵人賽就是一個為期 30 天的比賽。使用這樣的前綴，再自然不過。</p><p>而我為了配合我的主題名稱，所以會採用「<strong>卷 1</strong>」、「<strong>卷 2</strong>」這樣形式的前綴，感覺也是別有一番趣味。</p><p>當然，這些做法並非絕對，比如去年 <a href="https://ithelp.ithome.com.tw/2023ironman/cloud-native">Cloud Native</a> 的冠軍——「<a href="https://ithelp.ithome.com.tw/users/20162175/ironman/6445">時光之鏡：透視過去、現在與未來的 Observability</a>」系列，則反其道而行，不採用任何前綴。一眼望去，是不是也有幾分「霸氣外露」之感呢？</p><p>總的來說，無論是系列名稱還是文章前綴，主要是增加寫作上的「<strong>趣味性</strong>」，自己喜歡就行。</p><hr><p>本文講得相對粗淺，但不誇張的說，我還真的花了好些時間在這些「<strong>命名</strong>」上面。</p><p>只不過這些命名，並沒有一個很明確的<strong>通用法則</strong>可以供你參考，我只能聊聊我思考過的點點滴滴。</p><p>等完賽一段時間後，我還會寫一篇更全面的準備心得，敬請期待。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YmlPRz1.jpg&quot; alt=&quot;by Sam Chivers&quot;&gt;&lt;/p&gt;
&lt;p&gt;明天——13 號星期五——就是我參加今年 iThome 鐵人賽的正式開賽日。&lt;/p&gt;
&lt;p&gt;開賽前夕，我想用本文介紹一下我的參賽主題與相關花絮。&lt;/p&gt;
&lt;p&gt;不會提及太多技術，主要以一些個人思考及感受為主。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;不過在開始前，歡迎在鐵人賽網站上&lt;strong&gt;訂閱&lt;/strong&gt;我的「&lt;a href=&quot;https://ithelp.ithome.com.tw/users/20167825/ironman/7451&quot;&gt;Django 忍法帖——Django Ninja 入門指南&lt;/a&gt;」系列 🥰。文章也會&lt;strong&gt;在部落格同步發表。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我為此投入了大量時間心力，還辭去了工作（誤），相信不會讓你失望。&lt;/p&gt;
&lt;p&gt;行有餘力，也可以多多支持我們「&lt;a href=&quot;https://ithelp.ithome.com.tw/2024ironman/signup/team/339&quot;&gt;AI 寶寶上學去！&lt;/a&gt;」小隊成員們的作品。&lt;/p&gt;
&lt;p&gt;大家都是第一次參賽，非常需要您的鼓勵。&lt;/p&gt;
&lt;p&gt;好，讓我們進入「正題」。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/YmlPRz1.jpg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>38，Kyo 待業中！細數我過去的待業時光（上）</title>
    <link href="https://blog.kyomind.tw/weekly-review-38/"/>
    <id>https://blog.kyomind.tw/weekly-review-38/</id>
    <published>2024-09-09T14:23:16.000Z</published>
    <updated>2024-09-10T10:43:00.056Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>如標題所言，我又又待業了！</p><p>上一份工作做到 8 月 31 日止，從本月開始，我的職涯再度進入「<strong>無業遊民</strong>」階段。</p><p>這也是為什麼 9 月起<strong>我有更多時間準備鐵人賽XD</strong>（可見上一篇〈<a href="/myth-of-ai-writing-efficiency/">AI 讓寫作變輕鬆了？我可不這麼認為</a>〉的開頭）</p><p>我在〈<a href="https://www.threads.net/@kyomind.tw/post/C9Kkuh1ykIc">Day 4：4 年 8 個月</a>〉中曾說到：</p><blockquote><p>4 年 8 個月，這是我在大學畢業、當兵退伍後，作為「無業遊民」的總時長！</p></blockquote><p>沒錯，而這些時間又可以分成兩個階段。</p><p>如今再度待業，或許是回顧過往的好時機。讓我們來聊聊這兩個階段：<strong>當時在做什麼，以及現在的我如何會看待那時的自己。</strong></p><p>不過篇幅有限， 今天先講第一階段：準備書記官考試。</p><span id="more"></span><hr><h2 id="第一次應試：不知人生為何物"><a href="#第一次應試：不知人生為何物" class="headerlink" title="第一次應試：不知人生為何物"></a>第一次應試：不知人生為何物</h2><p>第一階段是 2009 年 7 月至 2011 年 12 月，共 2 年 6 個月，主要準備書記官（司法特考）。</p><p>我大學很混，雖然很少被當，但整體的法律實力實在不怎麼樣。而法律是一個需要投入龐大學習時間的學科——無人可以例外。所以沒能在畢業之前就考上任何國家考試。</p><p>和很多人一樣，我也是等到畢業、退伍之後才開始真正的法律之路。</p><p>必須坦承，剛退伍時，<strong>我對法律的興趣其實非常有限</strong>。為何要考試？只不過是因為沒有別的選擇而已——我只會這個！</p><p>6 月底才退伍，來不及準備當年的考試（在每年 8 月）。直到隔年才第一次應試。</p><p>第一次考試就是抱持上述「<strong>不知道法律對我意義為何</strong>」的心情在準備，結果可想而知。我還記得名次是 1142 名。</p><h2 id="第二次應試：做該做的事"><a href="#第二次應試：做該做的事" class="headerlink" title="第二次應試：做該做的事"></a>第二次應試：做該做的事</h2><p>這是我最後的機會，若沒考上，只能乖乖去找工作。</p><p>法律系畢業卻沒通過國考，工作選擇不多：要麼去事務所當助理，要麼去公司當法務。否則，就只能去一般公司做著跟法律無關的上班族工作。</p><p>上述這些都是當下的我所難以想像的，也不想面對，內心的不安感實在太強了。</p><p>就像我在〈<a href="https://medium.com/code-and-me/datalog-%E5%91%8A%E5%88%A5%E6%B3%95%E5%BE%8B-ccec58db9acb">告別法律</a>〉中說的，<strong>現在放棄的話，相當於對過去自己的否定</strong>：</p><blockquote><p>哭是因為無助，無助不僅是對於考試本身，更在於考試一旦落榜，我幾乎難以想像自己還有什麼價值可言，要以何種身分立足？就只是一隻沒有身分的孤魂。</p></blockquote><p>相比之下，考試和考上的路徑則是<strong>相對確定</strong>的。因此，儘管我還不確定是否喜歡法律，還是決定靜下心來重新準備考試。</p><p>這是當時的我唯一能做的事，也是我該做的事。</p><p>所幸，第二次的結果就好多了，我總算暫時脫離了考試的枷鎖。</p><hr><h2 id="努力過才會喜歡"><a href="#努力過才會喜歡" class="headerlink" title="努力過才會喜歡"></a>努力過才會喜歡</h2><p>兩年多的準備時光，確實讓我的法律素養提高不少。</p><p>毫不誇張的說，我 90% 的法律實力，都是在大學畢業後自學養成的。</p><p>但其中更重要的是，你對一件事、一門學問的熱愛，<strong>可能需要經過一定的努力與嘗試，才會慢慢地顯現出來</strong>。（在後續的軟體轉職的路上，我也有類似的感受）</p><p>經過這一波努力學習，我對法律的好感度確實提高了不少。</p><p>我想，<strong>滿足感</strong>都藏在那些<strong>複雜的挑戰</strong>裡。經歷了疑惑、困頓，然後重新思考，這些好不容易才理解的事物，更能夠帶給人「<a href="https://www.youtube.com/watch?v=bFd3l8Mrhgw">知覺與快樂的螺旋</a>」。</p><p>而囫圇吞棗、蜻蜓點水式的了解，<strong>很難真的登堂入室</strong>——無緣進入知識的桃花源。</p><hr><h2 id="長期準備考試的挑戰"><a href="#長期準備考試的挑戰" class="headerlink" title="長期準備考試的挑戰"></a>長期準備考試的挑戰</h2><p>長期準備考試最困難的部分，還是在心理層面上保持鬥志，這真的不容易。</p><p><strong>所謂的「鬥志」，不是要你每天都慷慨激昂、充滿戰鬥的熱情。而是要能夠在長期壓力下，保持一種穩定的心態。</strong></p><p>準備考試，雖然多少能感覺到自己有在進步，但重複的生活，不免讓人厭煩。就像走在巨大的沙漠中，每時每刻的風景都非常類似，有時你甚至不知道自己是否真的在前進。</p><p>在這樣的環境下，我遇到過很多次低潮。</p><p>低潮是可怕的東西，一開始可能只是一天、兩天。一旦出現，就<strong>很容易蔓延開來</strong>，最終你可能會連續好幾週、甚至一整個月都不想讀書。</p><p>第二年考試，為了減少這種情況，<strong>我設計一套制度來督促自己。</strong></p><p><img src="https://i.imgur.com/06XOOPj.png" alt="這是準備律師時期的記錄，但制度是同一套"><span class="cap">這是準備律師時期的記錄，但制度是同一套</span></p><p>儘管如此，就在考前兩個月的關鍵時刻，我又陷入了一次低潮，<strong>足足打了三個星期的電動！</strong>直到七月初，才心不甘情不願地重新開始讀書。</p><p><strong>好險，現在想想真的好險。</strong></p><hr><p>總之，第一階段待業就這樣落幕了，我也展開我的第一階段職涯——公務員。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;如標題所言，我又又待業了！&lt;/p&gt;
&lt;p&gt;上一份工作做到 8 月 31 日止，從本月開始，我的職涯再度進入「&lt;strong&gt;無業遊民&lt;/strong&gt;」階段。&lt;/p&gt;
&lt;p&gt;這也是為什麼 9 月起&lt;strong&gt;我有更多時間準備鐵人賽XD&lt;/strong&gt;（可見上一篇〈&lt;a href=&quot;/myth-of-ai-writing-efficiency/&quot;&gt;AI 讓寫作變輕鬆了？我可不這麼認為&lt;/a&gt;〉的開頭）&lt;/p&gt;
&lt;p&gt;我在〈&lt;a href=&quot;https://www.threads.net/@kyomind.tw/post/C9Kkuh1ykIc&quot;&gt;Day 4：4 年 8 個月&lt;/a&gt;〉中曾說到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4 年 8 個月，這是我在大學畢業、當兵退伍後，作為「無業遊民」的總時長！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;沒錯，而這些時間又可以分成兩個階段。&lt;/p&gt;
&lt;p&gt;如今再度待業，或許是回顧過往的好時機。讓我們來聊聊這兩個階段：&lt;strong&gt;當時在做什麼，以及現在的我如何會看待那時的自己。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不過篇幅有限， 今天先講第一階段：準備書記官考試。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="待業" scheme="https://blog.kyomind.tw/tags/%E5%BE%85%E6%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>AI 讓寫作變輕鬆了？我可不這麼認為</title>
    <link href="https://blog.kyomind.tw/myth-of-ai-writing-efficiency/"/>
    <id>https://blog.kyomind.tw/myth-of-ai-writing-efficiency/</id>
    <published>2024-09-05T14:49:20.000Z</published>
    <updated>2024-09-06T08:32:29.169Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/YmlPRz1.jpg" alt="by Sam Chivers"><span class="cap">by Sam Chivers</span></p><blockquote><p>相關文章：<a href="/weekly-review-35/">35，開始備戰 2024 iThome 鐵人賽</a></p></blockquote><p>從九月初開始，我投入了更多心力在今年的鐵人賽創作上。</p><p>這一次寫文章，畢竟是要參加比賽，還要連續發文 30 天，寫作量巨大。相比以往三天曬網、兩天捕魚的獨立部落格寫作，完全不可同日而語。</p><p>實際的感受是：更辛苦，而且<strong>讓人很想逃避XD</strong>——因為你的文字會被評審！</p><p>加上我又心心念念想要拿獎，以至於才開始沒多久，就有一種力不從心的感覺。<strong>我深刻感受到創作過程中帶來的壓力與精神消耗。</strong></p><p>這讓我不禁擔憂：「真的能在開賽日前囤完 20 篇文章嗎？」</p><p>不行，<strong>我需要助手！</strong></p><span id="more"></span><hr><h2 id="重啟-Notion-AI"><a href="#重啟-Notion-AI" class="headerlink" title="重啟 Notion AI"></a>重啟 Notion AI</h2><p>想到「寫作助手」會想到什麼？當然是 AI 囉！</p><p>於是我拿出了信用卡，刷了一個月份的 Notion AI。因為我的草稿都在 Notion 上，所以這個選擇是再合適不過。</p><p>一年多前我曾經寫過這篇〈<a href="https://blog.kyomind.tw/weekly-review-15/">15，付費一個月後，我還是退訂了 Notion AI</a>〉。事實上，中間我又付費過一次 Notion AI，但還是沒有續約。</p><p>所以這次算<strong>第三次</strong>使用了，希望它可以分擔一點工作。</p><p><strong>感覺如何？——確實比前兩次的使用體驗都來得好！</strong>這部分的提升，我認為主要來自於 prompt 與 UI&#x2F;UX 的加強，而不是背後的 LLM 變得多聰明了。</p><p>總之，Notion AI 有比較好用了，讓我有點考慮在完賽之後，仍繼續付費使用它。甚至考慮再為它寫一篇文章☺️</p><hr><h2 id="AI-讓寫作變輕鬆了嗎？"><a href="#AI-讓寫作變輕鬆了嗎？" class="headerlink" title="AI 讓寫作變輕鬆了嗎？"></a>AI 讓寫作變輕鬆了嗎？</h2><blockquote><p>那麼，Notion AI 讓我的寫作過程變得更輕鬆了嗎？</p></blockquote><p><strong>這取決於你如何看待寫作。</strong></p><p>如果只是想把文章大致寫完、語意通順，那麼我認為 AI 確實讓寫作變得更輕鬆了——甚至可以說「輕鬆許多」。</p><p>你再也不需要再去看一些奇怪的書，教你怎麼在 15 分鐘內寫出 1000 字的爆紅文章。畢竟有了 AI，15 分鐘都夠你寫一本書了！</p><p>但是，你我都心知肚明，<strong>這種文字往往缺乏足夠的吸引力——或說「個性」</strong>。畢竟人人都能透過 AI 大量產出這類內容。</p><p>可以說，對我而言，有了 AI 輔助，<strong>部分</strong>寫作環節確實變輕鬆了——<strong>但整體沒有，因為要做的事更多了。</strong></p><hr><h2 id="AI-輔助寫作，人類的角色轉換"><a href="#AI-輔助寫作，人類的角色轉換" class="headerlink" title="AI 輔助寫作，人類的角色轉換"></a>AI 輔助寫作，人類的角色轉換</h2><p>我覺得「整體」沒有變得更輕鬆，是因為下列的「<strong>角色轉換</strong>」緣故，讓我娓娓道來。</p><h3 id="沒有-AI-的時代"><a href="#沒有-AI-的時代" class="headerlink" title="沒有 AI 的時代"></a>沒有 AI 的時代</h3><p>在沒有 AI 的時代，作為文字創作者，我們主要的<strong>角色分配</strong>大概是 10 分作者、0 分編輯（這裡指的是比例）——寫就對了！</p><p>對自己的內容品質比較有要求的作者，則可能是 9 分作者、1 分編輯，或 8 分作者、2 分編輯。</p><p>我屬於<strong>吹毛求疵</strong>的人（真的不是很必要😂），大概可以來到 7 分作者、3 分編輯。</p><p>我在發文前後會<strong>經過幾次全文編輯</strong>。搭捷運時，也會用手機看自己的文章，找找錯誤、文句不夠通順之處，<strong>先截圖，然後回家修改。</strong></p><p>極限差不多就這樣了！ 沒有人喜歡當編輯，就像沒有人喜歡寫單元測試——因為真的有點無聊。<strong>誰不想要大刀闊斧地創作呢？</strong>😎</p><h3 id="AI-輔助時代"><a href="#AI-輔助時代" class="headerlink" title="AI 輔助時代"></a>AI 輔助時代</h3><p>有了 AI 以後（無論是 Notion AI 或 ChatGPT），情況大大不同。</p><p>為了善用 AI 的力量，我發現自己<strong>變成了 5 分作者、5 分編輯</strong>，而且<strong>經常在兩種身分間游移互換</strong>：一下子自己寫，讓 AI 看；一下子要 AI 寫、我來看。</p><p><strong>AI 在某些地方確實比我寫得快又好</strong>，比如請它介紹一下 <a href="https://django-ninja.dev/">Django Ninja</a> 的特色， 這類內容相對制式、創意的成分較少，全都自己寫，那該多辛苦？</p><h3 id="一人分飾兩角"><a href="#一人分飾兩角" class="headerlink" title="一人分飾兩角"></a>一人分飾兩角</h3><p>它寫完後，你又得化身編輯看看結果合不合意。不行就得再修。自己寫的東西不滿意，再請它當編輯，給出改善意見。<strong>如此反覆，直到大功告成。</strong></p><p>這種寫作體驗<strong>很難說好或不好</strong>——但確實變得<strong>更複雜</strong>了。</p><p>就像使用 <a href="/github-copilot/">GitHub Copilot</a>（或時下流行的 <a href="/cursor/">Cursor</a>）寫程式，我們常常需要中途停下來過問、請教 AI，同時又要當它的監督者。</p><p>如果目標只是「寫完」，那花不了多少時間。<strong>但如果目標是「寫好」，則其中的「戲」可比以前要多得多。</strong></p><hr><h2 id="小結：當個人愈來愈難了"><a href="#小結：當個人愈來愈難了" class="headerlink" title="小結：當個人愈來愈難了"></a>小結：當個人愈來愈難了</h2><p>AI 的普及，讓我們不僅僅是創作者，也成了編輯，甚至是策劃者（叫 AI 幹活）。<strong>這種角色的轉換增加了工作量和難度，但也讓我們對內容的掌控更為精細。</strong></p><p>創作不再是單一的過程，而是成了<strong>一場「與 AI 的持續對談」</strong>。</p><p>高度自我追求的創作者，必須不斷反思、修正、和 AI 討論，這讓創作變得<strong>更具挑戰性</strong>——當然，也<strong>更有趣。</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YmlPRz1.jpg&quot; alt=&quot;by Sam Chivers&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相關文章：&lt;a href=&quot;/weekly-review-35/&quot;&gt;35，開始備戰 2024 iThome 鐵人賽&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;從九月初開始，我投入了更多心力在今年的鐵人賽創作上。&lt;/p&gt;
&lt;p&gt;這一次寫文章，畢竟是要參加比賽，還要連續發文 30 天，寫作量巨大。相比以往三天曬網、兩天捕魚的獨立部落格寫作，完全不可同日而語。&lt;/p&gt;
&lt;p&gt;實際的感受是：更辛苦，而且&lt;strong&gt;讓人很想逃避XD&lt;/strong&gt;——因為你的文字會被評審！&lt;/p&gt;
&lt;p&gt;加上我又心心念念想要拿獎，以至於才開始沒多久，就有一種力不從心的感覺。&lt;strong&gt;我深刻感受到創作過程中帶來的壓力與精神消耗。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這讓我不禁擔憂：「真的能在開賽日前囤完 20 篇文章嗎？」&lt;/p&gt;
&lt;p&gt;不行，&lt;strong&gt;我需要助手！&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/YmlPRz1.jpg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
    <category term="Notion AI" scheme="https://blog.kyomind.tw/tags/Notion-AI/"/>
    
  </entry>
  
  <entry>
    <title>Django 專案加入 Mypy 指南</title>
    <link href="https://blog.kyomind.tw/mypy-django-guide/"/>
    <id>https://blog.kyomind.tw/mypy-django-guide/</id>
    <published>2024-09-03T00:52:58.000Z</published>
    <updated>2024-09-09T15:18:26.364Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/lyxUZv1.png" alt="Let&#39;s Django！"><span class="cap">Let&#39;s Django！</span></p><p>這是 <a href="/tags/Django-Tutorial/"><strong>Django Tutorial</strong></a> 的第 10 篇。</p><p>範例程式碼可參考我的 <a href="https://github.com/kyomind/Django-Tutorial"><strong>GitHub 專案</strong></a>。</p><p>本文相關的程式碼改動，都集中在這個 <a href="https://github.com/kyomind/Django-Tutorial/pull/5"><strong>PR</strong></a>。</p><hr><p>在〈<a href="/robust-python-01/">《強健的 Python》筆記（一）Type Hints 的成本與挑戰</a>〉一文中，我們探討了 <a href="https://docs.python.org/3/library/typing.html">type hints</a>（type annotation）對 Python 專案開發的重要性，並在〈<a href="/mypy/">Python type checker：Mypy 介紹</a>〉中介紹了<strong>目前最常用的 Python 型別檢查器——Mypy。</strong></p><p>我想，<strong>是時候為你的 Python 專案加入型別檢查了。</strong></p><p>本文介紹如何在 Django 專案中整合 Mypy，並提供一些實際例子來幫助你快速上手。透過這些步驟，你將能夠更好地利用型別檢查來提高程式碼的穩定性和可維護性。</p><h3 id="系列：Mypy-三部曲"><a href="#系列：Mypy-三部曲" class="headerlink" title="系列：Mypy 三部曲"></a>系列：Mypy 三部曲</h3><blockquote><ol><li><a href="/robust-python-01/">《強健的 Python》筆記（一）Type Hints 的成本與挑戰</a></li><li><a href="/mypy/">Python type checker：Mypy 介紹</a></li><li><strong>Django 專案加入 Mypy 指南</strong></li></ol></blockquote><span id="more"></span><hr><h2 id="有多少-Django-專案使用-Type-Hints？"><a href="#有多少-Django-專案使用-Type-Hints？" class="headerlink" title="有多少 Django 專案使用 Type Hints？"></a>有多少 Django 專案使用 Type Hints？</h2><p>你可能覺得 type hints 還很遙遠，甚至是<strong>比單元測試更加稀有的存在</strong>。畢竟在 Python 中，型別是完全「<strong>可選</strong>」的——就像測試一樣😆</p><p>然而，隨著社群的成長和工具的進步，越來越多 Django 開發者開始採用 type hints。</p><p>那具體是多少呢？</p><p>依照 JetBrains 對 Django 開發者的<a href="https://lp.jetbrains.com/django-developer-survey-2023/">這份調查</a>，竟然已有<a href="https://lp.jetbrains.com/django-developer-survey-2023/#syntax-and-documentation">一半</a>了！（出乎我的意料）</p><p><img src="https://i.imgur.com/QLQ5R8E.png" alt="Django Developers Survey 2023"><span class="cap">Django Developers Survey 2023</span></p><p>所以，為 Django 專案加入 type hints，已然是大勢所趨，今天就一起來實踐吧！</p><p>要為 Python 程式碼加上 type hints，<strong>關鍵在於 static type checker，也就是靜態型別檢查器</strong>。而 Mypy 正是其中最受歡迎的選擇。</p><p>Django 專案整合 Mypy，大概有以下幾步：</p><ol><li>建立並修改 Mypy 設定檔。</li><li>安裝 django-stubs。</li><li>安裝 VS Code Mypy 套件。</li><li>pre-commit 整合（與其中的問題）。</li></ol><p>讓我們一一解說。</p><hr><h2 id="一、建立-Mypy-設定檔"><a href="#一、建立-Mypy-設定檔" class="headerlink" title="一、建立 Mypy 設定檔"></a>一、建立 Mypy 設定檔</h2><p>Mypy 支援<a href="https://mypy.readthedocs.io/en/stable/config_file.html">好幾種</a>常見的設定檔。</p><p>最常見的是<code>mypy.ini</code>，它同時也支援<code>pyproject.toml</code>，而且很多大型開源專案都會採用後者，比如 <a href="https://github.com/fastapi/fastapi/blob/master/pyproject.toml#L123">FastAPI</a>。</p><p>上述兩種最推薦，這裡我們先採用<code>mypy.ini</code>。</p><p>不建立設定檔，也能使用 Mypy。設定檔主要是讓你的型別檢查更加<strong>客製化。</strong>尤其用來排除那些你不需要的規則。</p><h3 id="Django-特殊設定"><a href="#Django-特殊設定" class="headerlink" title="Django 特殊設定"></a>Django 特殊設定</h3><p>但對於 Django 專案來說，設定檔則是「必要」，因為有幾處必須定義——否則 Mypy 會跳出一大堆錯誤XD。</p><p>這是因為 Django 有很多<strong>動態屬性（執行時才會確定內容）</strong>，少了這些設定，Mypy 很可能無法正確檢查。</p><p>我們看一下設定內容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[mypy]</span></span><br><span class="line"><span class="comment"># 排除所有 migrations 資料夾和 manage.py</span></span><br><span class="line"><span class="attr">exclude</span> = ^(migrations|.*manage\.py)$</span><br><span class="line"></span><br><span class="line"><span class="attr">warn_return_any</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disallow_untyped_calls</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">allow_redefinition</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">check_untyped_defs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ignore_missing_imports</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">incremental</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">strict_optional</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">show_traceback</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">warn_unused_ignores</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">warn_redundant_casts</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">warn_unused_configs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">warn_unreachable</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disallow_untyped_defs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disallow_incomplete_defs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">disable_error_code</span> = empty-body</span><br><span class="line"><span class="attr">force_uppercase_builtins</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">force_union_syntax</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span> =</span><br><span class="line">    mypy_django_plugin.main</span><br><span class="line"></span><br><span class="line"><span class="section">[mypy.plugins.django-stubs]</span></span><br><span class="line"><span class="attr">django_settings_module</span> = DjangoTutorial.settings</span><br></pre></td></tr></table></figure><p>對 Django 專案來說，其中重點有三：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exclude = ^(migrations|.*manage\.py)$</span><br><span class="line">...</span><br><span class="line">plugins =</span><br><span class="line">    mypy_django_plugin.main</span><br><span class="line"></span><br><span class="line">[mypy.plugins.django-stubs]</span><br><span class="line">django_settings_module = &lt;你的 Django 專案名稱&gt;.settings</span><br></pre></td></tr></table></figure><p><code>exclude</code>中把 db 遷移檔資料夾和 Django 自帶的<code>manage.py</code>排除檢查，這是很常見的設定，強烈建議加上。</p><p><code>plugins</code>一定要有<code>mypy_django_plugin.main</code>（它的值可以是多個）。</p><p><code>django_settings_module</code>設定也是必要的，<strong>要使用你自己的 Django 專案名稱。</strong></p><p>其實，上述設定大多是我從 django-stubs 的 <a href="https://github.com/typeddjango/django-stubs/blob/master/mypy.ini">mypy.ini</a> 照搬過來的。</p><p>而且它在註解有聲明，其餘專案也可以適用：</p><blockquote><p>Regular configuration file (<strong>can be used as base in other projects</strong>, runs in CI)</p></blockquote><p>大部分設定我都直接套用了，以免 Mypy 的檢查太過寬鬆。如果想進行調整，則需要了解 Mypy 的設定細節，這部分請參考<a href="https://mypy.readthedocs.io/en/stable/config_file.html">官方文件</a>。</p><hr><h2 id="二、安裝-django-stubs"><a href="#二、安裝-django-stubs" class="headerlink" title="二、安裝 django-stubs"></a>二、安裝 django-stubs</h2><p>Type hints 是在 Python 3.5 才引入的功能，而在此之前誕生的套件和框架，<strong>自然不會有 type hints。</strong></p><p>少部分的套件可能會在後期加入 type hints，比如 Flask，在 2.0 版本加入了極大量的 type hints，但大多數套件仍需要額外的 stubs 檔來補充。</p><h3 id="什麼是-Stubs？"><a href="#什麼是-Stubs？" class="headerlink" title="什麼是 Stubs？"></a>什麼是 Stubs？</h3><p>所謂的 stubs（不是測試的那種），是指用來補充那些沒有 type hints 的模組或框架的<strong>檔案</strong>。它們通常是 <code>.pyi</code> 格式，類似於<strong>介面定義檔案</strong>，提供了函式、類別、方法等的<strong>型別資訊</strong>——但不會包含實際邏輯。</p><p>舉例而言，這是 Django ORM QuerySet 方法中的<code>bulk_create</code>的 stubs：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bulk_create</span>(<span class="params"></span></span><br><span class="line"><span class="params">   self,</span></span><br><span class="line"><span class="params">   objs: Iterable[_T],</span></span><br><span class="line"><span class="params">   batch_size: <span class="built_in">int</span> | <span class="literal">None</span> = ...,</span></span><br><span class="line"><span class="params">   ignore_conflicts: <span class="built_in">bool</span> = ...,</span></span><br><span class="line"><span class="params">   update_conflicts: <span class="built_in">bool</span> | <span class="literal">None</span> = ...,</span></span><br><span class="line"><span class="params">   update_fields: <span class="type">Sequence</span>[<span class="built_in">str</span>] | <span class="literal">None</span> = ...,</span></span><br><span class="line"><span class="params">   unique_fields: <span class="type">Sequence</span>[<span class="built_in">str</span>] | <span class="literal">None</span> = ...,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">list</span>[_T]: ...</span><br></pre></td></tr></table></figure><p><a href="https://github.com/typeddjango/django-stubs/tree/master">django-stubs</a> 就是為 Django 提供的 type hints 補充包，使用 <code>django-stubs</code> 可以讓 Django 在不修改原始程式碼的情況下，享受到 type hints 的優勢。</p><hr><h2 id="三、VS-Code-Mypy-套件整合"><a href="#三、VS-Code-Mypy-套件整合" class="headerlink" title="三、VS Code Mypy 套件整合"></a>三、VS Code Mypy 套件整合</h2><p>如果你使用 VS Code IDE，那 <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.mypy-type-checker">Mypy 套件</a>肯定是必須的，它能讓你在開發的當下就得知 Mypy 的型別錯誤提示。</p><p>該套件也會自動讀取專案根目錄下的 Mypy 設定檔，如果有設定檔，建議就<strong>不要</strong>在 VS Code 的 <code>settings.json</code>再額外<a href="https://github.com/microsoft/vscode-mypy?tab=readme-ov-file#settings">設定 Mypy 套件</a>的行為，以免衝突。</p><p>和其它<strong>開發類套件</strong>（如 linter、formatter）相同，該套件已自帶了一個 Mypy 版本，但如果你的虛擬環境中有安裝 Mypy，則會優先使用虛擬環境中的版本。</p><p>VS Code 的 Mypy 套件整合很簡單，卻非常實用。強烈建議你安裝。</p><hr><h2 id="四、pre-commit（與相關問題）"><a href="#四、pre-commit（與相關問題）" class="headerlink" title="四、pre-commit（與相關問題）"></a>四、pre-commit（與相關問題）</h2><p>Mypy 有 pre-commit 的 <a href="https://github.com/pre-commit/mirrors-mypy">hook</a>，但存在一些整合問題。</p><p>我遇到的問題是，Mypy hook 雖然可以正常執行，但<strong>無法正確讀取專案的 Mypy 設定檔</strong>。也就是說，<strong>它只會照「預設模式」來執行檢查</strong>，這就不太實用了。</p><p>即使在 pre-commit 的 hook 設定檔中加入下列參數也沒用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hooks:</span><br><span class="line">  - <span class="built_in">id</span>: mypy</span><br><span class="line">    args: [--config-file=mypy.ini]</span><br></pre></td></tr></table></figure><p>我後來還是找不到原因。我們知道，pre-commit 每一個 hook 都擁有自己獨立的執行虛擬環境——顯然這個環境還不健全！</p><blockquote><p><code>2024/09/09</code>更新：Mypy 的 pre-commit 設定確實相對複雜，網友 <a href="https://github.com/geminixiang">geminixiang</a> 提供了一個不錯的做法，不需要使用 local hook，而我也依此修改了一個自己的版本。詳情請見下方留言區。</p></blockquote><h3 id="本地-Hook"><a href="#本地-Hook" class="headerlink" title="本地 Hook"></a>本地 Hook</h3><p>一個釜底抽薪之計，就是建立 Mypy 的 本地 pre-commit hook。</p><p>不過做法上較為複雜，而且可能在不同開發者之間產生環境差異，我感覺也不是特別好的辦法。</p><p>有興趣的人可以參考這篇〈<a href="https://jaredkhan.com/blog/mypy-pre-commit">Running Mypy in Pre-commit</a>〉，裡面有詳細的步驟。</p><p>基於上述理由，本次範例專案的程式碼改動，<strong>沒有</strong>加入 Mypy pre-commit 設定。</p><p>我想最好的辦法，還是在 CI 階段執行 Mypy。這個我們另篇文章再談吧！</p><hr><h2 id="結語：Type-Hints-與未來"><a href="#結語：Type-Hints-與未來" class="headerlink" title="結語：Type Hints 與未來"></a>結語：Type Hints 與未來</h2><p>Mypy 與 Django 的整合，雖然需要花一些心思，但一旦完成，對於程式碼的穩定性與可維護性都會帶來顯著提升。</p><p>希望透過這篇文章，你已經掌握了如何為 Django 專案加入 Mypy 的基本步驟，並了解了在整合過程中可能遇到的挑戰。</p><p>期許未來所有 Python 專案使用 type hints 的比例，會愈來愈高，這樣我們就能更好地利用 Python 的動態特性，同時又享受到靜態型別語言的優勢。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lyxUZv1.png&quot; alt=&quot;Let&amp;#39;s Django！&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是 &lt;a href=&quot;/tags/Django-Tutorial/&quot;&gt;&lt;strong&gt;Django Tutorial&lt;/strong&gt;&lt;/a&gt; 的第 10 篇。&lt;/p&gt;
&lt;p&gt;範例程式碼可參考我的 &lt;a href=&quot;https://github.com/kyomind/Django-Tutorial&quot;&gt;&lt;strong&gt;GitHub 專案&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文相關的程式碼改動，都集中在這個 &lt;a href=&quot;https://github.com/kyomind/Django-Tutorial/pull/5&quot;&gt;&lt;strong&gt;PR&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在〈&lt;a href=&quot;/robust-python-01/&quot;&gt;《強健的 Python》筆記（一）Type Hints 的成本與挑戰&lt;/a&gt;〉一文中，我們探討了 &lt;a href=&quot;https://docs.python.org/3/library/typing.html&quot;&gt;type hints&lt;/a&gt;（type annotation）對 Python 專案開發的重要性，並在〈&lt;a href=&quot;/mypy/&quot;&gt;Python type checker：Mypy 介紹&lt;/a&gt;〉中介紹了&lt;strong&gt;目前最常用的 Python 型別檢查器——Mypy。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我想，&lt;strong&gt;是時候為你的 Python 專案加入型別檢查了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文介紹如何在 Django 專案中整合 Mypy，並提供一些實際例子來幫助你快速上手。透過這些步驟，你將能夠更好地利用型別檢查來提高程式碼的穩定性和可維護性。&lt;/p&gt;
&lt;h3 id=&quot;系列：Mypy-三部曲&quot;&gt;&lt;a href=&quot;#系列：Mypy-三部曲&quot; class=&quot;headerlink&quot; title=&quot;系列：Mypy 三部曲&quot;&gt;&lt;/a&gt;系列：Mypy 三部曲&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;/robust-python-01/&quot;&gt;《強健的 Python》筆記（一）Type Hints 的成本與挑戰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/mypy/&quot;&gt;Python type checker：Mypy 介紹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django 專案加入 Mypy 指南&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;</summary>
    
    
    <content src="https://i.imgur.com/lyxUZv1.png" type="image"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/categories/Django/"/>
    
    
    <category term="Python" scheme="https://blog.kyomind.tw/tags/Python/"/>
    
    <category term="Django Tutorial" scheme="https://blog.kyomind.tw/tags/Django-Tutorial/"/>
    
    <category term="Mypy" scheme="https://blog.kyomind.tw/tags/Mypy/"/>
    
    <category term="Type Hints" scheme="https://blog.kyomind.tw/tags/Type-Hints/"/>
    
  </entry>
  
  <entry>
    <title>37，加入健身房，專注 Zone 2</title>
    <link href="https://blog.kyomind.tw/weekly-review-37/"/>
    <id>https://blog.kyomind.tw/weekly-review-37/</id>
    <published>2024-08-28T06:55:48.000Z</published>
    <updated>2024-08-29T23:46:58.380Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>就在今天，我加入了住處附近的健身房會員，正式成為一個可以在健身房打卡的人。</p><p>事實上，我本來就有配合的健身教練（在別的地方），所以報名附近健身房並不是為了重訓，而是<strong>為了可以更常做有氧運動。</strong></p><p>這裡的有氧運動指的不是跑步。除了我實在不愛跑步，右膝的不平衡也讓我不敢讓它承受更大的衝擊力。</p><p>所以絕大部分時候，<strong>走路和健行</strong>才是我的首選——但現在不同了。</p><hr><p>今年 5 月做了年度例行體檢，沒想到偏瘦的我（當時 60 公斤，BMI 不到 20） ，體脂測出來竟然有 23% XD。報告直接給了我紅字！</p><p>難道這就是傳說中的<strong>「隱性肥胖」（Skinny Fat）</strong>嗎？ 我無法接受😂</p><h2 id="一週走-30-公里"><a href="#一週走-30-公里" class="headerlink" title="一週走 30 公里"></a>一週走 30 公里</h2><p>因此，在 6、7 月間，我增加了步行量，主要是平日晚餐後的走路，還有假日出遊。一週總距離落在 30-40 公里，總步數 7-10 萬步。</p><p>配合 4 月開始會不定期自煮中餐。這些改變讓我的體重進一步下降，現在只有 57 公斤左右。</p><p>瘦是瘦了，但這不是我主要的追求，我更關注的是體脂，而體脂還未臻理想。</p><p>畢竟上述運動， 強度有限，我需要尋找其他方法來改善。</p><p>經過一番查詢，我發現 Zone 2 訓練<strong>可能是一個好的選擇。</strong></p><span id="more"></span><hr><h2 id="Zone-2-介紹"><a href="#Zone-2-介紹" class="headerlink" title="Zone 2 介紹"></a>Zone 2 介紹</h2><p>Zone 2 訓練是一種<strong>中低強度的有氧運動</strong>，通常被定義為心率<strong>介於最大心率的 60% 到 70% 之間</strong>。</p><p>這種訓練方法<strong>可以有效提高身體的基礎代謝率和心肺功能，同時不會給身體帶來過大的壓力</strong>。對於想要提高整體健康水平和運動表現的人來說，Zone 2 是一個很不錯的選擇。</p><p>這兩年流行的超慢跑就是 Zone 2 的一種實踐。這種跑步方式強調以較慢的速度跑步，讓心率維持在 Zone 2 範圍內，從而達到最佳的脂肪燃燒效果。</p><h2 id="兩則-Zone-2-相關影片"><a href="#兩則-Zone-2-相關影片" class="headerlink" title="兩則 Zone 2 相關影片"></a>兩則 Zone 2 相關影片</h2><p>在運動方面， 遇事不決看修修。</p><p>我推薦下列這兩個跟 Zone 2 有關的影片：</p><ul><li><a href="https://youtu.be/yC5Hgm5tJ0U?si=UM1whqCkqbFz-rUr">一次弄懂 Zone 2 訓練、低心率、超慢跑，讓你提高燃脂效率又長壽</a></li><li><a href="https://youtu.be/KurzStE46vk?si=SWshms1VHsaiMnL4">運動科學專家：Zone 2 訓練怎麼做？你身上最重要的2個指標、減肥的熱量迷思｜【初日會客室】張修修</a></li></ul><p>看完之後，這樣的概念確實深得我心，我最喜歡這種<strong>中等強度</strong>的東西了。</p><p>肯定有人不認同，但我一直覺得，沒事不要追求極限——<strong>因為極限是不可持續的。</strong> 我喜歡持續不斷的小進步， 而非英雄般的大躍進。</p><p>（好吧，我承認，如果可以，誰不想當一回英雄呢XD）</p><p>總之，看完這些影片後，我內心更加篤定了。</p><hr><h2 id="一旦開始並持續，你已經贏過-80-的人"><a href="#一旦開始並持續，你已經贏過-80-的人" class="headerlink" title="一旦開始並持續，你已經贏過 80% 的人"></a>一旦開始並持續，你已經贏過 80% 的人</h2><p>上一段說，小進步就很不錯了，至少在運動方面，我認為這簡直是<strong>真理</strong>！</p><p>為什麼這麼說呢？</p><p>第二則影片中提到了政府提倡的「333」：</p><ul><li>每週運動 3 次</li><li>每次 30 分鐘</li><li>心率達到 130 以上</li></ul><blockquote><p>更具體的內容，可參考國民健康署的<a href="https://www.hpa.gov.tw/Pages/Detail.aspx?nodeid=333&pid=882">這個網頁</a>，內涵大同小異。</p></blockquote><p>張修修說，全台灣能做到 333 應該不到一半。</p><h3 id="不到一半？"><a href="#不到一半？" class="headerlink" title="不到一半？"></a>不到一半？</h3><p>我認為這個說法還是<strong>太含蓄了</strong>！仔細思考我身邊親朋好友，有可能持續達到 333 標準的人，基本上只有兩類：</p><ol><li>固定去健身房運動的人，</li><li>常常進行戶外活動（跑步、爬山、打球）的人。</li></ol><p>這樣的人多嗎？對我來說，屈指可數。當然這其中有「圈子」問題——我不是運動圈的人。</p><p>但我仍敢大膽妄論，真的達到 333，甚至能持續（養成習慣）的人，全台灣<strong>不是不到一半，而是低於兩成。</strong></p><p>換句話說，雖然 333 理論上是一個入門低標，但如果你能持續做到，你實際上已經贏過 80% 的人了。</p><hr><h2 id="小結：均衡與人生"><a href="#小結：均衡與人生" class="headerlink" title="小結：均衡與人生"></a>小結：均衡與人生</h2><p>有些事情，你得<strong>拼盡全力</strong>才能獲得， 比如在大公司升職加薪、<a href="https://medium.com/code-and-me/datalog-%E5%91%8A%E5%88%A5%E6%B3%95%E5%BE%8B-ccec58db9acb">律師國考</a>，或是在重要的比賽中名列前茅。</p><p>然而，還有另外一些事情， <strong>你根本不需要（也不應該）使出全力——只要六、七分力就夠了</strong>。它們更期望你在每一天、每一周、每個月，持續投入，穩步前進。</p><p>這個過程往往<strong>沒有太多激情</strong>，就像在健身房裡的 Zone 2 一樣，平淡無奇，卻能帶來長期的健康效益。</p><p>就這樣，一段時間過去，你可能會發現——你好像有點厲害🐸</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;就在今天，我加入了住處附近的健身房會員，正式成為一個可以在健身房打卡的人。&lt;/p&gt;
&lt;p&gt;事實上，我本來就有配合的健身教練（在別的地方），所以報名附近健身房並不是為了重訓，而是&lt;strong&gt;為了可以更常做有氧運動。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;這裡的有氧運動指的不是跑步。除了我實在不愛跑步，右膝的不平衡也讓我不敢讓它承受更大的衝擊力。&lt;/p&gt;
&lt;p&gt;所以絕大部分時候，&lt;strong&gt;走路和健行&lt;/strong&gt;才是我的首選——但現在不同了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;今年 5 月做了年度例行體檢，沒想到偏瘦的我（當時 60 公斤，BMI 不到 20） ，體脂測出來竟然有 23% XD。報告直接給了我紅字！&lt;/p&gt;
&lt;p&gt;難道這就是傳說中的&lt;strong&gt;「隱性肥胖」（Skinny Fat）&lt;/strong&gt;嗎？ 我無法接受😂&lt;/p&gt;
&lt;h2 id=&quot;一週走-30-公里&quot;&gt;&lt;a href=&quot;#一週走-30-公里&quot; class=&quot;headerlink&quot; title=&quot;一週走 30 公里&quot;&gt;&lt;/a&gt;一週走 30 公里&lt;/h2&gt;&lt;p&gt;因此，在 6、7 月間，我增加了步行量，主要是平日晚餐後的走路，還有假日出遊。一週總距離落在 30-40 公里，總步數 7-10 萬步。&lt;/p&gt;
&lt;p&gt;配合 4 月開始會不定期自煮中餐。這些改變讓我的體重進一步下降，現在只有 57 公斤左右。&lt;/p&gt;
&lt;p&gt;瘦是瘦了，但這不是我主要的追求，我更關注的是體脂，而體脂還未臻理想。&lt;/p&gt;
&lt;p&gt;畢竟上述運動， 強度有限，我需要尋找其他方法來改善。&lt;/p&gt;
&lt;p&gt;經過一番查詢，我發現 Zone 2 訓練&lt;strong&gt;可能是一個好的選擇。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="張修修" scheme="https://blog.kyomind.tw/tags/%E5%BC%B5%E4%BF%AE%E4%BF%AE/"/>
    
    <category term="健康" scheme="https://blog.kyomind.tw/tags/%E5%81%A5%E5%BA%B7/"/>
    
    <category term="Zone 2" scheme="https://blog.kyomind.tw/tags/Zone-2/"/>
    
  </entry>
  
  <entry>
    <title>36，預計創作「訂戶限定」內容</title>
    <link href="https://blog.kyomind.tw/weekly-review-36/"/>
    <id>https://blog.kyomind.tw/weekly-review-36/</id>
    <published>2024-08-23T13:14:23.000Z</published>
    <updated>2024-09-04T06:12:12.779Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>這幾天在思考，如何有效利用目前使用的電子報服務，讓訂戶感到更有價值。</p><p>畢竟一年也要付給供應商——<a href="https://buttondown.com/refer/kyo">Buttondown</a>——90 美元，要讓這筆錢花得值得。</p><blockquote><p>相關文章：<a href="/weekly-review-26/">26，改用 Buttondown 作為文章訂閱服務</a></p></blockquote><p>現階段我並不打算製作「付費訂閱」內容，只是想要為我的<strong>電子郵件訂閱者</strong>，嘗試寫作「<strong>專屬</strong>」內容——也就是「<a href="https://kyomind.notion.site/40b324f98ca94827921a6831b0d7a38f?v=4fa52cd0f4864800927c463d93078ee6">訂戶限定</a>」內容。</p><p>作為感謝這些讀者，願意留下自己 email 的小小心意。</p><p>對作者而言，有人願意訂閱，是一種<strong>不言而喻的信任。</strong></p><hr><p>「用戶郵件清單」無疑是現代行銷中的一大顯學，所以許多以「變現」為目標的網站、創作者，都會想方設法吸引用戶留下 email。</p><p>我雖然沒有要變現（至少短期內無此打算），但站在創作者的角度，文章一發布就有人看見，誰能拒絕這樣的誘惑呢？</p><p>所以很多網站會把<strong>訂閱電子報</strong>放在最顯眼的位置，甚至會有「訂閱即可獲得免費禮物」的活動。</p><p>這些我多少明白，但依舊沒有這麼做。</p><span id="more"></span><h2 id="為什麼我很少呼籲讀者訂閱我的電子報？"><a href="#為什麼我很少呼籲讀者訂閱我的電子報？" class="headerlink" title="為什麼我很少呼籲讀者訂閱我的電子報？"></a>為什麼我很少呼籲讀者訂閱我的電子報？</h2><p>如你所知，我目前的電子報，實際上只是<strong>部落格新文章的 RSS 轉發。</strong></p><p>然而，即使如此，其實還是可以多多呼籲讀者來訂閱，<strong>為什麼沒有積極做這件事？</strong></p><p>主要有兩個原因：</p><ol><li>我是<strong>雜食性創作者。</strong></li><li>我有 <strong>UI&#x2F;UX 潔癖。</strong></li></ol><h3 id="雜食性創作者"><a href="#雜食性創作者" class="headerlink" title="雜食性創作者"></a>雜食性創作者</h3><p>我是一個雜食性創作者，寫的主題相對多元，主要有幾大主軸：寫作、程式開發、筆記軟體、書評、生活感悟等等。</p><p>雖然「原則」上是技術部落客，但不滿足於只寫程式相關內容。</p><p>好處是，吸引的讀者群可以更廣泛，不會因為只寫技術文章而被限制。</p><p>不過這是把<strong>雙面刃</strong>，因為讀者缺乏一個<strong>非常明確的「期待」。</strong></p><p>換句話說，如果要呼籲讀者訂閱，我不知道該給讀者<strong>怎麼樣的承諾</strong>。我大概只能保證我會認真寫。</p><p>這是第一點，<strong>主題分散不利於吸引特定用戶</strong>。如果要搞自媒體，這種「不鮮明」應該是挺吃虧的。</p><h3 id="UI-UX-潔癖"><a href="#UI-UX-潔癖" class="headerlink" title="UI&#x2F;UX 潔癖"></a>UI&#x2F;UX 潔癖</h3><p>第二點，是我對於 UI&#x2F;UX 的潔癖。</p><p>這部分可參考「<a href="/weekly-review-12/#%E4%BA%8C%E3%80%81%E8%A8%82%E9%96%B1%E6%8C%89%E9%88%95%E6%94%BE%E5%93%AA%E5%A5%BD%EF%BC%9F">二、訂閱按鈕放哪好？</a>」，我有過較為詳細的討論。</p><p>我不喜歡網站上充斥「訂閱電子報」的按鈕，尤其是那種彈出式的——太煩了！</p><p>一直用彈出視窗來「提醒」我訂閱的網站，<strong>我會直接關掉。</strong></p><p>退而求其次的做法是，在每一篇文章最後，加上一個「訂閱電子報」的按鈕。讀者看完文章，如果覺得不錯，就可以順手訂閱。</p><p>但對我而言，這樣的「重複性」還是太高了！（尤其對於<strong>已經訂閱</strong>的讀者）</p><p>所以我最終選擇只放在右上角導覽列中一個連結——「<a href="/subscribe/">訂閱</a>」。</p><p>平心而論，<strong>我不認為這是一個很好的做法</strong>，它只是很簡潔，但往往不夠有效。</p><hr><h2 id="付費牆的兩難"><a href="#付費牆的兩難" class="headerlink" title="付費牆的兩難"></a>付費牆的兩難</h2><p>談到「訂戶限定」內容，就不得不提到「付費牆」。</p><p>雖然如前所述，我並不打算製作「付費訂閱」內容，但內容的「<strong>封閉性</strong>」，確實就像一道「<strong>牆</strong>」。</p><p>這構成一個<strong>常見的兩難</strong>：封閉內容有其<strong>特殊價值</strong>（比如最常見的<strong>收費</strong>），可是封閉內容<strong>無法讓更多人接觸</strong>，一定程度阻礙了創作者的影響力。</p><p>常見的解法是「部分內容開放」，這樣可以讓更多人看到，但同時也可以吸引有興趣的讀者進而付費。</p><p>我雖然沒有要收費，但我想要做的「訂戶限定」內容，也是一種「封閉」。</p><p>所以<strong>我多少需要調和這樣的矛盾。</strong></p><p>暫時我還沒有明確的想法——畢竟我根本還沒開始寫！</p><p>因此，這些「訂戶限定」內容，目前就是<strong>實驗性質、純封閉、不收費</strong>，只是為了讓訂戶感到更有價值。</p><p>不過考慮到未必每個人都有興趣，<strong>所以標題會特別標註「訂戶限定」</strong>，讓讀者可以自行選擇是否閱讀。</p><hr><h2 id="「訂戶限定」的創作方向"><a href="#「訂戶限定」的創作方向" class="headerlink" title="「訂戶限定」的創作方向"></a>「訂戶限定」的創作方向</h2><p>有一種電子報創作模式是我<strong>絕不考慮</strong>的，那就是「聚合型內容」。</p><p>聚合型指的是「<strong>就特定主題收集最新資訊</strong>」類的內容，畢竟我還信誓旦旦說過：<a href="/weekly-review-11/">我絕不當資訊的聚合者</a>XD</p><p>另一方面，聚合型內容已經有很多人在寫，我其實也寫不過人家😅，而且我對這種類型的創作沒有太多熱情。</p><p>又或者，把一些<strong>進階元素</strong>放在「訂戶限定」部分，這對於「付費訂閱」確實是不錯的做法，也相當合理。但顯然並不適合我這種<strong>以公開內容為主軸</strong>的創作者。</p><p>所以我現階段能想到的內容方向就是：<strong>個人化！</strong></p><h3 id="個人化"><a href="#個人化" class="headerlink" title="個人化"></a>個人化</h3><p>比 <a href="/weekly-review-25/#%E6%9B%B4%E7%A7%81%E4%BA%BA%E3%80%81%E6%9B%B4%E7%9B%B4%E7%99%BD">Weekly Review</a> 更個人的東西！</p><p>其中一種個人化，是表達<strong>對特定人事物的好惡</strong>。</p><p>畢竟你知道的，公開寫作，總是有一些東西不太方便寫，或者不太適合寫。我雖然沒有什麼「利益糾葛」，但發文之前還是不免會「自我審查」一下XD</p><p>在「訂戶限定」內容中，我可以更加<strong>放開自己</strong>，無須太過擔心。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>這篇文章，算是一個「預告」，也是一個「自我承諾」。</p><p>反正這東西是實驗性且不定期的，應該不會有太大的壓力。</p><p>我只要盡力確保，這些「訂戶限定」內容，是真的有價值，就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;這幾天在思考，如何有效利用目前使用的電子報服務，讓訂戶感到更有價值。&lt;/p&gt;
&lt;p&gt;畢竟一年也要付給供應商——&lt;a href=&quot;https://buttondown.com/refer/kyo&quot;&gt;Buttondown&lt;/a&gt;——90 美元，要讓這筆錢花得值得。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相關文章：&lt;a href=&quot;/weekly-review-26/&quot;&gt;26，改用 Buttondown 作為文章訂閱服務&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;現階段我並不打算製作「付費訂閱」內容，只是想要為我的&lt;strong&gt;電子郵件訂閱者&lt;/strong&gt;，嘗試寫作「&lt;strong&gt;專屬&lt;/strong&gt;」內容——也就是「&lt;a href=&quot;https://kyomind.notion.site/40b324f98ca94827921a6831b0d7a38f?v=4fa52cd0f4864800927c463d93078ee6&quot;&gt;訂戶限定&lt;/a&gt;」內容。&lt;/p&gt;
&lt;p&gt;作為感謝這些讀者，願意留下自己 email 的小小心意。&lt;/p&gt;
&lt;p&gt;對作者而言，有人願意訂閱，是一種&lt;strong&gt;不言而喻的信任。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;「用戶郵件清單」無疑是現代行銷中的一大顯學，所以許多以「變現」為目標的網站、創作者，都會想方設法吸引用戶留下 email。&lt;/p&gt;
&lt;p&gt;我雖然沒有要變現（至少短期內無此打算），但站在創作者的角度，文章一發布就有人看見，誰能拒絕這樣的誘惑呢？&lt;/p&gt;
&lt;p&gt;所以很多網站會把&lt;strong&gt;訂閱電子報&lt;/strong&gt;放在最顯眼的位置，甚至會有「訂閱即可獲得免費禮物」的活動。&lt;/p&gt;
&lt;p&gt;這些我多少明白，但依舊沒有這麼做。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="電子報" scheme="https://blog.kyomind.tw/tags/%E9%9B%BB%E5%AD%90%E5%A0%B1/"/>
    
    <category term="Buttondown" scheme="https://blog.kyomind.tw/tags/Buttondown/"/>
    
  </entry>
  
  <entry>
    <title>Cursor IDE 心得：三大亮點與三個阻礙</title>
    <link href="https://blog.kyomind.tw/cursor/"/>
    <id>https://blog.kyomind.tw/cursor/</id>
    <published>2024-08-10T06:14:07.000Z</published>
    <updated>2024-09-03T03:07:03.042Z</updated>
    
    <content type="html"><![CDATA[<!-- ![](https://i.imgur.com/VhSp2Jb.png) --><p><img src="https://i.imgur.com/8qdJkr4.png"></p><p>主打 AI 輔助寫程式的編輯器——<a href="https://cursor.com/">Cursor</a>，這陣子非常火紅。</p><p>剛好我在上星期經朋友推薦，認真試用了一下，還接了 OpenAI GPT-4o mini API 作為編輯器的 AI 助手。</p><p>本文會分享我試用 Cursor 的心得，以及我<strong>仍不打算</strong>從 VS Code 遷移至 Cursor 的<strong>三個理由</strong>。</p><p>雖然是從個人角度出發，但我會考慮不同狀況、不同需求的讀者，給出不同的建議。</p><hr><h2 id="Cursor-Editor-簡介"><a href="#Cursor-Editor-簡介" class="headerlink" title="Cursor Editor 簡介"></a>Cursor Editor 簡介</h2><p>Cursor 是一款主打 AI 輔助寫程式的新型態 IDE，它並非單純在既有編輯器加上外掛，而是<strong>將 AI 深度整合進編輯器中</strong>。</p><p>它直接使用了 VS Code 的開源程式碼來建構。</p><p>這意味著，Cursor 在介面與操作邏輯上都與 VS Code 極為相似，對於那些想要從 VS Code 遷移過來的使用者來說，幾乎不需要花費額外的時間適應，就能快速上手。</p><p>它的最大亮點，是<strong>內建了強大的 AI 功能（名為：Copilot++）</strong>，可以根據你的指令，自動生成程式碼、提供程式碼建議，甚至幫你 debug。</p><p>不過這些其實 <a href="https://github.com/features/copilot">GitHub Copilot</a> 也能做到。所以，我認為，真正讓 Cursor 脫穎而出的，是以下三點。</p><span id="more"></span><h2 id="Cursor-的三大賣點"><a href="#Cursor-的三大賣點" class="headerlink" title="Cursor 的三大賣點"></a>Cursor 的三大賣點</h2><p>在我看來，<strong>Cursor 的賣點（或說亮點）</strong>主要有三個：</p><ol><li>強大的<strong>專案 RAG 問答</strong>。</li><li>強大的<strong>自動完成</strong>。</li><li>用戶可以<strong>自行選擇</strong>回答問題的語言模型：GPT-4o、Claude、Gemini，隨你選。</li></ol><p>這三點足以支撐它目前得到的關注和好評——因為真的很厲害。</p><p>我只有認真使用過第一、三點，但已<strong>足夠讓我感到驚艷。</strong></p><p>話說回來，Cursor 的實際功能細節，非並本文重點。所以請容我引用<a href="https://blog.huli.tw/about/">胡立</a>剛出爐不久的這篇 <a href="https://www.facebook.com/huli.blog/posts/pfbid02rddupRmi7KgHvA6ZYdZShrJL2qAEbqRjHXTgeY17XmS9VEtfno2hhndk5tjUpGzQl">Cursor 心得</a>，來具體表達上述三點中的<strong>前兩點。</strong></p><h3 id="專案-RAG-問答"><a href="#專案-RAG-問答" class="headerlink" title="專案 RAG 問答"></a>專案 RAG 問答</h3><blockquote><p>第一個是我剛講的，我問他說：「專案裡面有用到跟 websocket 很像的機制，會從 server 推訊息過來，請問在哪裡？」，同樣的問題拿去問 GitHub Copilot，他只會回你應該怎麼去找，而不是跟你講答案。</p></blockquote><blockquote><p><strong>而問了 Cursor 之後，他直接把對應的檔案跟內容印出來，而且不止 websocket，連用到 Server-Sent Event 的地方都找出來了。</strong></p></blockquote><p>這部分也是我覺得 Cursor 最厲害的地方，它的專案 RAG 體驗實在比 GitHub Copilot 要好得太多。</p><p>真正做到了「<strong>隨時隨地和專案對話、問答</strong>」的感覺。</p><h3 id="自動完成"><a href="#自動完成" class="headerlink" title="自動完成"></a>自動完成</h3><blockquote><p>但下一步，我跟 Cursor 說「請幫我也應用到 Deleted, Published, Sold, Locked 這幾個狀態的細節頁面上」，<strong>接著他就出現了其他四個檔案的改動，我只要一直點 apply，就完成了。</strong></p></blockquote><p>這相當於 GitHub Copilot 的自動完成<strong>大幅增強版</strong>，不僅能夠生成程式碼，還能夠直接大範圍應用。而不需要你一步一步地去修改。</p><p>難怪有人說「<strong>自從用了 Cursor，軟體開發就是不斷地按 tab</strong>」，哈哈哈，我相信！</p><hr><h2 id="我的-Cursor-心得"><a href="#我的-Cursor-心得" class="headerlink" title="我的 Cursor 心得"></a>我的 Cursor 心得</h2><p>其實早在去年中，我就安裝過 Cursor，當時的版本還不那麼成熟，加上<strong>知道自己不太可能輕易離開 VS Code</strong>，所以也沒有認真對待。</p><p>現在不同了。</p><p>上面提到的第一個強大功能——RAG 問答，真是個<strong>殺手級應用。</strong></p><p>雖然 GitHub Copilot 也有類似實作，但效果實在差太多，用起來非常不便，還有很大的進步空間。</p><p><strong>這種能「和專案對話」的價值，主要體現在幾個場景：</strong></p><ol><li><strong>快速熟悉不是自己開發的專案</strong>，包括開源專案、新接手的專案等。</li><li><strong>快速找到專案中的某個功能，與相關的程式碼</strong>。因為可能散落在很多個地方，能一口氣找出來，真的非常方便。</li><li>就現有的程式碼，<strong>開發新功能</strong>。</li></ol><p><strong>這無疑是所有開發者都夢寐以求的。</strong></p><p>然而，儘管如此，我還是<strong>沒打算以 Cursor 作為我主要的 IDE</strong>——至少目前沒有。</p><hr><h2 id="我仍不打算改用-Cursor-的三個理由"><a href="#我仍不打算改用-Cursor-的三個理由" class="headerlink" title="我仍不打算改用 Cursor 的三個理由"></a>我仍不打算改用 Cursor 的三個理由</h2><p>毫無疑問，Cursor 是一個非常值得期待的編輯器，它的 AI 功能確實讓人驚艷。</p><p>現在，我會使用 Cursor 作為我的「<strong>RAG 專用機</strong>」，幫助我快速熟悉專案、找到相關的程式碼。</p><p>但我<strong>還是會繼續使用 VS Code，而非全面遷移至 Cursor。</strong></p><p>以下是我仍不打算改用 Cursor 的三個理由。</p><h2 id="理由一：快捷鍵衝突"><a href="#理由一：快捷鍵衝突" class="headerlink" title="理由一：快捷鍵衝突"></a>理由一：快捷鍵衝突</h2><p>雖然 Cursor 是基於 VS Code，但因為加上了自己開發的 AI 功能，所以必然會有一些預設的快捷鍵和 VS Code 不同。</p><p>我已經習慣了 VS Code 的快捷鍵，其中一些快捷鍵在 Cursor 中<strong>存在衝突或不起作用。</strong></p><p>最經典的是<code>Cmd + Shift + K</code>，在 VS Code 中是<strong>刪除游標所在的當前行</strong>，而在 Cursor 中是叫出 AI 助手。</p><p>雖然也是有替代方案，比如改用<code>Ctrl + Shift + K</code>，但就是得<strong>改變我的使用習慣</strong>。（重設快捷鍵道理相同）</p><p>Cursor 的<code>Cmd + K</code>也是叫出 AI 助手，而在 VS Code 中則是用來當「<strong>組合鍵</strong>」，比如<code>Cmd + K &amp;&amp; Cmd + S</code>是「打開快捷鍵設定」——我很常用。</p><p>這個改動顯然影響更大。</p><p>總之，對於已習慣 VS Code 快捷鍵的使用者來說，<strong>需要重設部分快捷鍵並重新適應。</strong></p><h2 id="理由二：比較醜"><a href="#理由二：比較醜" class="headerlink" title="理由二：比較醜"></a>理由二：比較醜</h2><p>說 Cursor 比 VS Code 醜，可能有點主觀，而且兩者不是<strong>同源</strong>的產品嗎？</p><p>沒錯，在 UI 上，99% 都是相同的——都是 VS Code 的 UI。</p><p>除了<strong>側邊欄</strong>的一些變化，以及 AI 助手的介面，Cursor 基本上就是 VS Code。</p><p>但就是這些自訂部分，總讓我感到有股「<strong>山寨味</strong>」XD</p><p>（老實說，我覺得 Copilot++ 這個名稱也很山寨）</p><p>所幸，和快捷鍵相比，這算不上什麼大問題。如果不喜歡 Cursor 的預設側邊欄樣式，可<a href="https://forum.cursor.com/t/getting-used-to-the-orientation-of-the-primary-sidebar/20/4">透過設定調回原版</a>。總之，適應一下即可。</p><h2 id="理由三：要付費-Pro-才能取得完整功能"><a href="#理由三：要付費-Pro-才能取得完整功能" class="headerlink" title="理由三：要付費 Pro 才能取得完整功能"></a>理由三：要付費 Pro 才能取得完整功能</h2><p><strong>我想這第 3 點才是最重要的。</strong></p><p>Cursor 是一個商業產品，它的 AI 功能需要<a href="https://www.cursor.com/pricing">付費</a>。當然，你可以不付錢，先享用一定的免費額度，但這些額度<strong>只夠你淺嘗輒止。</strong></p><p>想要用它來作為開發主力，還是得付費。</p><p>雖然說，編輯器允許你<strong>自行串接語言模型 API</strong>，可以一定程度上緩解這個問題。但人家也不是吃素的。</p><h3 id="付費成為-Pro"><a href="#付費成為-Pro" class="headerlink" title="付費成為 Pro"></a>付費成為 Pro</h3><p><strong>自行接 API 和付費成為 Pro，待遇終究有所不同。</strong></p><p>比如，胡立文章中提到的「<strong>apply</strong>」功能，目前<strong>只有 Pro 用戶才能使用，而這個又非常重要——不然就得自己複製貼上。</strong></p><p><img src="https://i.imgur.com/NeTrCMs.png" alt="想要 apply？請付費"><span class="cap">想要 apply？請付費</span></p><p>自行複製貼上？這顯然<strong>不現實</strong>，直接讓開發效率<strong>大打折扣。</strong></p><p>由此可見，想要<strong>完整享受</strong> Cursor 的強大與便利，<strong>你就是得付費！</strong></p><h3 id="我暫時不想付費"><a href="#我暫時不想付費" class="headerlink" title="我暫時不想付費"></a>我暫時不想付費</h3><p>現在的 AI 應用，動不動就要收你<strong>一個月 20 美元</strong>，這不是筆小數目。</p><p>更別說，手上可能已不止一個 20 美元的 AI 工具訂閱。</p><p>對我來說，要我每月拿出 20 美元，需要有一定的「<strong>泛用性</strong>」，否則很難說服我。</p><p>Cursor 如果還不是我的開發主力，那我自然不願意。</p><h3 id="那你要付費嗎？"><a href="#那你要付費嗎？" class="headerlink" title="那你要付費嗎？"></a>那你要付費嗎？</h3><p>以下三類人，值得認真考慮付費：</p><ol><li>VS Code 用戶，但只是輕度用戶，想要比 GitHub Copilot 更好的 AI 功能。</li><li>才剛開始程式之路的新手，對 IDE 還未形成明顯偏好。</li><li>對 AI 的主要訴求就是寫程式——「我就是要最好的 AI 開發助手！」</li></ol><p><strong>在 AI 時代，我們都要當一個挑剔的消費者😎</strong></p><hr><h2 id="結語：競爭是好事"><a href="#結語：競爭是好事" class="headerlink" title="結語：競爭是好事"></a>結語：競爭是好事</h2><p>要說服我從 VS Code 遷移到 Cursor，還有一段路要走——但並非不可能。</p><p>它的 AI 功能真的強大到，讓我不禁懷疑 GitHub Copilot 開發團隊<strong>是否用了太多力氣在不重要的地方</strong>；而 Cursor 則是用盡全力把 AI 功能做到極致。</p><p>我期待 Cursor 能夠持續發展，並且<strong>為 GitHub Copilot 帶來更多的競爭壓力</strong>。</p><p>畢竟，廠商之間有競爭，對消費者總是好事，到時候再來選擇，也還不遲。</p>]]></content>
    
    
    <summary type="html">&lt;!-- ![](https://i.imgur.com/VhSp2Jb.png) --&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8qdJkr4.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;主打 AI 輔助寫程式的編輯器——&lt;a href=&quot;https://cursor.com/&quot;&gt;Cursor&lt;/a&gt;，這陣子非常火紅。&lt;/p&gt;
&lt;p&gt;剛好我在上星期經朋友推薦，認真試用了一下，還接了 OpenAI GPT-4o mini API 作為編輯器的 AI 助手。&lt;/p&gt;
&lt;p&gt;本文會分享我試用 Cursor 的心得，以及我&lt;strong&gt;仍不打算&lt;/strong&gt;從 VS Code 遷移至 Cursor 的&lt;strong&gt;三個理由&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;雖然是從個人角度出發，但我會考慮不同狀況、不同需求的讀者，給出不同的建議。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Cursor-Editor-簡介&quot;&gt;&lt;a href=&quot;#Cursor-Editor-簡介&quot; class=&quot;headerlink&quot; title=&quot;Cursor Editor 簡介&quot;&gt;&lt;/a&gt;Cursor Editor 簡介&lt;/h2&gt;&lt;p&gt;Cursor 是一款主打 AI 輔助寫程式的新型態 IDE，它並非單純在既有編輯器加上外掛，而是&lt;strong&gt;將 AI 深度整合進編輯器中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;它直接使用了 VS Code 的開源程式碼來建構。&lt;/p&gt;
&lt;p&gt;這意味著，Cursor 在介面與操作邏輯上都與 VS Code 極為相似，對於那些想要從 VS Code 遷移過來的使用者來說，幾乎不需要花費額外的時間適應，就能快速上手。&lt;/p&gt;
&lt;p&gt;它的最大亮點，是&lt;strong&gt;內建了強大的 AI 功能（名為：Copilot++）&lt;/strong&gt;，可以根據你的指令，自動生成程式碼、提供程式碼建議，甚至幫你 debug。&lt;/p&gt;
&lt;p&gt;不過這些其實 &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt; 也能做到。所以，我認為，真正讓 Cursor 脫穎而出的，是以下三點。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/8qdJkr4.png" type="image"/>
    
    
    <category term="軟體開發" scheme="https://blog.kyomind.tw/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
    <category term="VS Code" scheme="https://blog.kyomind.tw/tags/VS-Code/"/>
    
    <category term="Cursor" scheme="https://blog.kyomind.tw/tags/Cursor/"/>
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>35，開始備戰 2024 iThome 鐵人賽</title>
    <link href="https://blog.kyomind.tw/weekly-review-35/"/>
    <id>https://blog.kyomind.tw/weekly-review-35/</id>
    <published>2024-08-04T07:06:14.000Z</published>
    <updated>2024-08-08T17:53:51.070Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>轉眼間就八月了！我的天，時間過得真快。</p><p>渡過了相對低迷的七月，這個月我要好好備戰鐵人賽——不然也沒有時間了XD</p><p>本期講一下我對於鐵人賽的看法、準備（雖然才剛開始），與個人期待。</p><hr><h2 id="iThome-鐵人賽"><a href="#iThome-鐵人賽" class="headerlink" title="iThome 鐵人賽"></a>iThome 鐵人賽</h2><p>2024 iThome 鐵人賽的<a href="https://ithelp.ithome.com.tw/2024ironman/event">官方頁面</a>已經上線，報名時間從八月到九月中。</p><p>今年新增了 <a href="https://ithelp.ithome.com.tw/2024ironman/python#ir-list">Python 組</a>和 <a href="https://ithelp.ithome.com.tw/2024ironman/javascript#ir-list">JavaScript 組</a>，這是個好消息，作為一個 Python 開發者，能在 Python 組參賽是最好。</p><p>尤其這是我第一次參加 iThome 鐵人賽，別具意義。</p><p>早在〈<a href="/weekly-review-32/">32，下半年寫作目標</a>〉中，我就<a href="/weekly-review-32/#%E4%BA%8C%E3%80%81%E5%8F%83%E5%8A%A0-iThome-%E9%90%B5%E4%BA%BA%E8%B3%BD">宣布要參加鐵人賽</a>，結果一個月過去，現在才開始動工😂</p><p>那時收到了一位，我覺得很厲害的開發者的來信，表示對鐵人賽如果有什麼疑問，可以協助，我當下真的是又驚又喜！</p><p>不過隨著七月一整個月的低迷（包括前半月的生病），這份驚喜逐漸轉變為一種<strong>淡淡的罪惡感</strong>：「可惡，我怎麼還沒開始！這樣豈不是浪費了別人的好意？」</p><span id="more"></span><hr><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>個性使然，我做很多事都很講究事前準備，有時難免帶來一種<strong>變相的拖延</strong>。</p><p>不過，只要把其中的「<strong>度</strong>」拿捏好，<strong>事前準備往往是很值得的。</strong></p><p>讀者之中也許有跟我一樣，今年第一次參加鐵人賽的朋友，在此分享一下我的事前準備事項與想法。</p><h2 id="一、避開太常見的主題"><a href="#一、避開太常見的主題" class="headerlink" title="一、避開太常見的主題"></a>一、避開太常見的主題</h2><p>前人已經寫過太多的主題，讀者容易審美疲勞。</p><p>就像在〈<a href="/ruff/">Python 開發：Ruff Linter、Formatter 介紹 + 設定教學</a>〉中<a href="https://blog.kyomind.tw/ruff/#%E6%9C%AC%E6%96%87%E4%B8%BB%E6%97%A8%E8%88%87%E7%9B%AE%E6%A8%99%E8%AE%80%E8%80%85">提到的</a>，我真的很不喜歡重複別人寫過的內容——<strong>尤其是那些人家已經寫得很好的內容。</strong></p><p>所以雖然一直有在部落格寫作，卻遲至今年才參加鐵人賽，也是因為此前我只能想到「Python 入門」之類的主題，這些都已經被寫爛了。</p><p>很難別出心裁不說，寫得可能也沒有前人好。</p><p>當然，<strong>這只是我個人的看法，或說偏好</strong>。寫作畢竟是為了自己——還有讀者。顧慮太多往往沒什麼必要。</p><p>如果心中真的有一個很想寫的主題，那就寫吧！不要被我這種想法給限制住，哪怕是個尋常的主題，也可以注入自己<strong>獨一無二的愛</strong>🥹</p><h2 id="二、觀摩得獎作品的結構與表達"><a href="#二、觀摩得獎作品的結構與表達" class="headerlink" title="二、觀摩得獎作品的結構與表達"></a>二、觀摩得獎作品的結構與表達</h2><p>這就要先提到<a href="https://s.itho.me/vendor/2024/iThome/iThome%E9%90%B5%E4%BA%BA%E8%B3%BD%E6%B4%BB%E5%8B%95%E7%B0%A1%E7%AB%A0-20240614.pdf">活動簡章</a>中的「陸、主題競賽評審要點」：</p><blockquote><ul><li><strong>主題</strong>：主題規劃符合該組別的立意，並能充份切合所選參賽主題下，參賽者所訂定之議題</li><li><strong>結構</strong>：<strong>30 篇文章組織良好、其所規劃結構足以引導讀者理解參賽者訂定之議題</strong></li><li><strong>內容</strong>：文章內容的技術或經驗具備專業性、豐富性、深入性</li><li><strong>表達</strong>：透過適當文字、圖片、程式碼或影片等方式，讓人更容易理解</li></ul></blockquote><p>其中我覺得相當重要的是「結構」與「表達」，尤其是這段「所規劃結構<strong>足以引導讀者理解</strong>」。</p><p>過去的得獎作品，肯定相當程度符合了上述標準。觀摩這些作品，可以幫助我們更好地理解<strong>如何組織文章</strong>，以及<strong>如何呈現</strong>。</p><p>畢竟<strong>系列長篇創作</strong>不同於<strong>單篇文章</strong>，<strong>結構的合理性</strong>對於讀者的理解與學習<strong>至關重要。</strong></p><h2 id="三、與-AI-討論-30-天標題"><a href="#三、與-AI-討論-30-天標題" class="headerlink" title="三、與 AI 討論 30 天標題"></a>三、與 AI 討論 30 天標題</h2><p>想達到「30 篇文章組織良好」，<strong>絕不是一件容易的事。</strong></p><p>這就需要一個<strong>合理的寫作計畫</strong>，這個計畫不僅要考慮到<strong>系列主題的選擇</strong>，還要考慮<strong>每篇文章的標題、內容</strong>，包括可能的篇幅大小。</p><p>先有一個<strong>粗略的計畫</strong>，無疑是好的、必要的。</p><p>此時 AI（ChatGPT、Claude、Gemini 等）就派上用場了，我們可以先和它討論一下，看看它有什麼建議。</p><p>我覺得一次就要決定好 30 天標題，未免強人所難，不太現實。不如退而求其次，優先討論<strong>前十天</strong>的內容，了解 AI 有什麼想法、回饋。</p><p>尤其要讓它當你的「<strong>編輯</strong>」，站在「<strong>讀者</strong>」的角度，看看這十天的內容安排——也就是<strong>結構</strong>——是否合理。</p><hr><h2 id="個人期待"><a href="#個人期待" class="headerlink" title="個人期待"></a>個人期待</h2><p>當然是得獎啦！哈哈哈，誰不想得獎呢？</p><p>具體的獎項，依照<a href="https://ithelp.ithome.com.tw/2024ironman/event#awardDiv">規則</a>，每一參賽組別都有「冠軍」、「優選」、「佳作」三種：</p><h4 id="冠軍"><a href="#冠軍" class="headerlink" title="冠軍"></a>冠軍</h4><ul><li>冠軍（每組 1 名）</li><li>頒發獎金 1 萬元、2024 賽季紀念品以及獎盃 1 座。各組完賽人數達 100 人，每逾 50 人，額外增設 1 個名額。</li></ul><h4 id="優選"><a href="#優選" class="headerlink" title="優選"></a>優選</h4><ul><li>優選（每組 2 名）</li><li>頒發2024 賽季紀念品以及獎盃 1 座。各組完賽人數達 100 人，每逾 50 人，額外增設 2 個名額。</li></ul><h4 id="佳作"><a href="#佳作" class="headerlink" title="佳作"></a>佳作</h4><ul><li>佳作（若干名）</li><li>獲頒2024 賽季紀念品以及獎牌 1 面。不分組別，由評審委員會依賽事整體作品水準，議定標準、擇優入選，名額不限。</li></ul><p>「冠軍 + 優選」其實就是傳統意義上的前三名。而且依組別<strong>參賽人數不同</strong>，想要獲得前三名的<strong>競爭激烈程度</strong>也不盡相同。（PS：較多人參賽組別，達一定條件有<strong>增設名額</strong>規定，如上）</p><p>相較之下，「佳作」則是意味著<strong>你的作品是否達到一定水準。</strong></p><p>我的目標是「佳作」以上，不容退讓。</p><p>至於「冠軍」或「優選」，<strong>我覺得「期待」本身需要適度控制</strong>，這樣的心態會讓我比較<strong>自然、放鬆</strong>，是我喜歡的。</p><p>當然，你也可以<a href="https://life.huli.tw/2024/07/10/the-story-behind-my-xss-book/">像胡立一樣</a>，就是衝著「出書」的目標去的！</p><hr><h2 id="小結：以鐵人賽為主"><a href="#小結：以鐵人賽為主" class="headerlink" title="小結：以鐵人賽為主"></a>小結：以鐵人賽為主</h2><p>鐵人賽畢竟要寫 30 篇文章，一篇算 1000 字，30 篇就是 3 萬字，實在是一個不小的挑戰。</p><p>我希望在開賽前可以先寫完一半以上，這樣完賽的壓力才不會那麼大。因此最快要九月才會開始。</p><p>這段時間，<strong>我將以準備鐵人賽為主，其他技術文章暫時停止</strong>。Weekly Review 可能再發個一、兩篇。</p><p>我不是一個擅長壓榨自己，進而超越極限之人。反之，我更希望以<strong>平和的心態、穩定的節奏</strong>來面對這個挑戰，所以<strong>取捨</strong>是必要的。</p><p>總之，有捨有得囉！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;轉眼間就八月了！我的天，時間過得真快。&lt;/p&gt;
&lt;p&gt;渡過了相對低迷的七月，這個月我要好好備戰鐵人賽——不然也沒有時間了XD&lt;/p&gt;
&lt;p&gt;本期講一下我對於鐵人賽的看法、準備（雖然才剛開始），與個人期待。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;iThome-鐵人賽&quot;&gt;&lt;a href=&quot;#iThome-鐵人賽&quot; class=&quot;headerlink&quot; title=&quot;iThome 鐵人賽&quot;&gt;&lt;/a&gt;iThome 鐵人賽&lt;/h2&gt;&lt;p&gt;2024 iThome 鐵人賽的&lt;a href=&quot;https://ithelp.ithome.com.tw/2024ironman/event&quot;&gt;官方頁面&lt;/a&gt;已經上線，報名時間從八月到九月中。&lt;/p&gt;
&lt;p&gt;今年新增了 &lt;a href=&quot;https://ithelp.ithome.com.tw/2024ironman/python#ir-list&quot;&gt;Python 組&lt;/a&gt;和 &lt;a href=&quot;https://ithelp.ithome.com.tw/2024ironman/javascript#ir-list&quot;&gt;JavaScript 組&lt;/a&gt;，這是個好消息，作為一個 Python 開發者，能在 Python 組參賽是最好。&lt;/p&gt;
&lt;p&gt;尤其這是我第一次參加 iThome 鐵人賽，別具意義。&lt;/p&gt;
&lt;p&gt;早在〈&lt;a href=&quot;/weekly-review-32/&quot;&gt;32，下半年寫作目標&lt;/a&gt;〉中，我就&lt;a href=&quot;/weekly-review-32/#%E4%BA%8C%E3%80%81%E5%8F%83%E5%8A%A0-iThome-%E9%90%B5%E4%BA%BA%E8%B3%BD&quot;&gt;宣布要參加鐵人賽&lt;/a&gt;，結果一個月過去，現在才開始動工😂&lt;/p&gt;
&lt;p&gt;那時收到了一位，我覺得很厲害的開發者的來信，表示對鐵人賽如果有什麼疑問，可以協助，我當下真的是又驚又喜！&lt;/p&gt;
&lt;p&gt;不過隨著七月一整個月的低迷（包括前半月的生病），這份驚喜逐漸轉變為一種&lt;strong&gt;淡淡的罪惡感&lt;/strong&gt;：「可惡，我怎麼還沒開始！這樣豈不是浪費了別人的好意？」&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="鐵人賽" scheme="https://blog.kyomind.tw/tags/%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
</feed>
