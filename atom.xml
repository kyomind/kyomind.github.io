<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code and Me</title>
  <icon>https://blog.kyomind.tw/favicon-32x32.png</icon>
  <subtitle>Kyo 的程式與學習心得</subtitle>
  <link href="https://blog.kyomind.tw/atom.xml" rel="self"/>
  
  <link href="https://blog.kyomind.tw/"/>
  <updated>2025-04-03T09:48:41.851Z</updated>
  <id>https://blog.kyomind.tw/</id>
  
  <author>
    <name>Kyo Huang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>待業 6 個月，我做了哪些事？</title>
    <link href="https://blog.kyomind.tw/weekly-review-42/"/>
    <id>https://blog.kyomind.tw/weekly-review-42/</id>
    <published>2025-04-03T09:01:12.000Z</published>
    <updated>2025-04-03T09:48:41.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>這是第 42 期的 Weekly Review，這系列主要記錄我的一些近況、生活與想法。</p><p>在第 38 期〈<a href="https://blog.kyomind.tw/weekly-review-38/">Kyo 待業中！細數我過去的待業時光（上）</a>〉曾提過，我大學畢業後待業的總時間，長達 4 年 8 個月。如果再加上這半年，就超過 5 年了😂</p><p>當然，這些時期，往往也是我人生的重要轉折點：</p><ol><li>第一次待業：書記官考試。</li><li>第二次待業：律師考試 + 轉職軟體工程師。</li></ol><p>而這次，雖然沒有那麼大幅度的轉換，但感覺也是不輕鬆的半年。</p><p>本期就來聊聊，這半年發生了哪些事、我有哪些心得。</p><p>用階段來區分，主要可分為三個部分。</p><span id="more"></span><hr><h2 id="階段一：鐵人賽"><a href="#階段一：鐵人賽" class="headerlink" title="階段一：鐵人賽"></a>階段一：鐵人賽</h2><p>從 Day 1 就開始的鐵人賽準備。</p><p>我在去年 8 月底正式從公司離職，9 月 1 日起進入待業狀態。</p><p>沒有工作的第一天，我做的不是休息，而是直接投入寫作。因為我報名了 iThome 鐵人賽，一場需要連續寫作 30 天的活動。</p><blockquote><p>相關文章：</p><ul><li><a href="https://blog.kyomind.tw/weekly-review-35/">35，開始備戰 2024 iThome 鐵人賽</a></li><li><a href="https://blog.kyomind.tw/2024-ironman-event/">2024 iThome 鐵人賽參賽思路：主題選擇、命名與標題策略</a></li></ul></blockquote><p>我知道，如果等到開賽再寫肯定來不及，容易虎頭蛇尾。因此從 9 月 1 日開始就逐日撰寫內容，為開賽日作「準備」。</p><h3 id="全神貫注"><a href="#全神貫注" class="headerlink" title="全神貫注"></a>全神貫注</h3><p>寫作——哪怕是有壓力的寫作——也可以是一種享受。</p><p>參加鐵人賽這種競賽型的寫作，心理上並不輕鬆。但這段時間是本次待業三個階段中，內心最篤定，行為模式也最為固定的一段時光。</p><p>從完賽的角度，我們不必和別人比較，而是要用力去追逐心中認為「好」的內容。</p><p>這種一心一意的追求，在全職準備的前提下，沒有太多外力的束縛與干擾。</p><p>就是寫！</p><p>辛苦是必然的，但這樣的狀態讓人著迷。</p><p>不過話說回來，我覺得這種經驗一次就可以了🤗</p><hr><h2 id="階段二：軟體工程師求職準備"><a href="#階段二：軟體工程師求職準備" class="headerlink" title="階段二：軟體工程師求職準備"></a>階段二：軟體工程師求職準備</h2><p>過完充實的寫作時光後，接下來就要面對現實了！</p><p>雖然十月中後有小休一星期，但內心還是很難放鬆啦！為什麼？當然是因為後續就要開始求職了。</p><p>10 月底，我正式啟動求職的前置準備：</p><ul><li>回顧之前工作上的專案，整理<a href="https://www.cake.me/kyomind">履歷</a>、更新 <a href="https://www.linkedin.com/in/kyo-huang/">LinkedIn</a>。</li><li><a href="https://github.com/kyomind/Grind-75">LeetCode 刷題</a>，還發表了「<a href="https://blog.kyomind.tw/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93">我的 LeetCode 刷題之道</a>」系列文章。</li><li>學習系統設計。</li></ul><p>其實就是一般軟體工程師求職時會做的事。</p><h3 id="履歷、LinkedIn，也是文字的藝術"><a href="#履歷、LinkedIn，也是文字的藝術" class="headerlink" title="履歷、LinkedIn，也是文字的藝術"></a>履歷、LinkedIn，也是文字的藝術</h3><p>我相信，更新履歷或 LinkedIn 這種事情，應該是很多人下意識在逃避的吧——至少我就一直在逃避XD</p><p>結果開始做之後發現——<strong>事情果然如我想像中的困難</strong>🤣</p><p>要整理自己過去累積的經驗、有效地向別人表達，從來都不是一件容易的事。</p><p>尤其像我這種對文字十分敏感的人，更容易感受到其中讓我不滿意的地方。</p><p>而且我寫履歷比較喜歡有幾分就寫幾分，任何超過我實際能力或經驗的描述甚至推論，都會讓我感受到一絲心虛跟罪惡。</p><p>但我建議你不要這樣，如果你覺得實際上是 7 分，但你寫到 8、9 分，我認為完全可以接受。</p><p>一來是你不一定真的只有 7 分；二來是……你懂的，JD 描述也未必真實。</p><p>更別說，求職是一個自我推廣的舞台與戰場，太過謙虛、含蓄或保守，基本上只會有害無利。</p><h3 id="我真的不喜歡刷題"><a href="#我真的不喜歡刷題" class="headerlink" title="我真的不喜歡刷題"></a>我真的不喜歡刷題</h3><p>接著是 LeetCode 刷題。</p><p>我一開始就知道這不是我喜歡的部分，也知道它是多數工程師面試的「必要之惡」。</p><p>這幾個月我大約刷了七、八十小時，約莫 40 題，但說真的，效果普通。</p><p>進步當然有，但很難說這樣的學習是高效的。</p><p>雖然這個系列還沒有完成，不過我可以確定，實際自己親身刷題過後，<strong>我感受到我對 LeetCode 的厭惡是如此之大，遠超乎我的想像。</strong></p><p>一言以蔽之：我不認為這是一個成年人該做的事情。</p><hr><h2 id="階段三：求職與-Burnout"><a href="#階段三：求職與-Burnout" class="headerlink" title="階段三：求職與 Burnout"></a>階段三：求職與 Burnout</h2><p>該來的還是要來，準備是準備不完的。</p><h3 id="早點面試真的很重要"><a href="#早點面試真的很重要" class="headerlink" title="早點面試真的很重要"></a>早點面試真的很重要</h3><p>進入 1 月，我開始投遞履歷。第一場面試讓我意識到一件事：<strong>準備再久，都比不上「實戰一次」有效</strong>。</p><p>面試能讓你知道哪些題目真正重要、哪些表達還需要修正，<strong>效率比自己埋頭苦練高出許多</strong>。</p><p>你甚至能夠從面試中，<strong>更加了解自己</strong>。</p><p>如果可以重來，我會更早開始面試。</p><h3 id="面試能力明顯進步，但身體已到極限"><a href="#面試能力明顯進步，但身體已到極限" class="headerlink" title="面試能力明顯進步，但身體已到極限"></a>面試能力明顯進步，但身體已到極限</h3><p>2 月時，我能明顯感受到自己的進步。不論是技術表達、問答邏輯，還是面對問題的沉著度，都提升許多。</p><p>雖然，每次面試官要說出「下一題」的前一秒，我的內心還是超緊張！——這似乎是無法適應的🐥</p><p>與此同時，我的身體也漸漸產生了 burnout 的前兆。</p><p>那種「每天醒來就要戰鬥」的感覺，把我的精神推向極限。</p><p>這是一個不健康的過程。</p><h3 id="拿到-Offer-後的-Burnout-症狀"><a href="#拿到-Offer-後的-Burnout-症狀" class="headerlink" title="拿到 Offer 後的 Burnout 症狀"></a>拿到 Offer 後的 Burnout 症狀</h3><p>當我終於拿到 offer，情緒才剛放鬆下來，身體就出現了睡不好、短眠等窘況。</p><p>AI 認為，這是求職壓力褪去後，少了抑制 burnout 無力感的正常反應，也就是身體此時的<strong>真正狀態</strong>。</p><p>然後它極力建議我一定要進入「<strong>強制休息</strong>」模式，不然會很危險。</p><blockquote><p>先別想著要為新工作做什麼準備，而是好好休息。</p></blockquote><p>一開始我還不甚情願，還好我一向很信任 AI，於是安排了幾次短暫旅行，和所謂的「<a href="https://kyomind.notion.site/15-Threads-1b36a92a98a680909220dfbd6fce9bbe">資訊斷捨離</a>」，讓身體和心靈從高壓中慢慢解脫出來。</p><hr><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在這個快速變動的時代，休息數個月重新準備與摸索方向，應該會變得更加常見，至少比以前更容易發生。</p><p>其實，能夠好好放鬆、休息，本身就是一種能力，而這樣的能力也是需要培養的——卻往往被忽視。</p><p>隨時都在汲汲營營，孜孜不倦，最終所能帶來成果，未必如想像中可觀。</p><p>更多是一種自我安慰和徒勞吧！</p><p>所以，即使是待業和求職的階段，也沒必要把自己逼得太緊。</p><p>這樣想，可能會讓人輕鬆些，並帶來更好的結果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是第 42 期的 Weekly Review，這系列主要記錄我的一些近況、生活與想法。&lt;/p&gt;
&lt;p&gt;在第 38 期〈&lt;a href=&quot;https://blog.kyomind.tw/weekly-review-38/&quot;&gt;Kyo 待業中！細數我過去的待業時光（上）&lt;/a&gt;〉曾提過，我大學畢業後待業的總時間，長達 4 年 8 個月。如果再加上這半年，就超過 5 年了😂&lt;/p&gt;
&lt;p&gt;當然，這些時期，往往也是我人生的重要轉折點：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次待業：書記官考試。&lt;/li&gt;
&lt;li&gt;第二次待業：律師考試 + 轉職軟體工程師。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而這次，雖然沒有那麼大幅度的轉換，但感覺也是不輕鬆的半年。&lt;/p&gt;
&lt;p&gt;本期就來聊聊，這半年發生了哪些事、我有哪些心得。&lt;/p&gt;
&lt;p&gt;用階段來區分，主要可分為三個部分。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>筆記軟體 UpNote 最吸引我的三大亮點</title>
    <link href="https://blog.kyomind.tw/upnote/"/>
    <id>https://blog.kyomind.tw/upnote/</id>
    <published>2025-03-29T06:13:09.000Z</published>
    <updated>2025-03-29T06:56:13.377Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/uAUlRuc.jpeg" alt="by William Chen on Pexels"><span class="cap">by William Chen on Pexels</span></p><p>如你所知，我是一個「<a href="https://github.com/kyomind#%E7%B0%A1%E4%BB%8B">不做筆記就不會學習</a>」的人🥹</p><p>但就像我在〈<a href="/noteless/">逐漸被我遺忘的卡片筆記</a>〉中提到的那樣，我並不喜歡對特定的筆記軟體過於鑽研、深挖它的大量用法與變化，更不可能建立一個所謂的<a href="/less-is-more/">筆記系統</a>。</p><p><strong>我更愛「簡單粗暴」的方式</strong>😎</p><p>關於我的筆記軟體使用演進史，可以參考過往這幾篇文章：（依時間順序）</p><ul><li><a href="https://medium.com/code-and-me/why-evernote-7cd2abbfbafd">心得 |《曼無止盡》第 40 期：Evernote 的重生之路</a></li><li><a href="/simple-notion/">使用Notion 滿 3 年，為何我仍「不推薦」用它來管理你的人生？</a></li><li><a href="/logseq/">Logseq 心得：一顆冉冉升起的「卡片筆記」新星</a></li><li><a href="/bear/">Evernote 替代方案——筆記軟體 Bear 2 升級心得</a></li></ul><p>除了 Evernote 之外，其餘三者都是我現在仍有在使用的。所以它們相互之間<strong>並不是進化式的替代關係</strong>，而是不斷完善的<strong>補充關係</strong>。</p><p>本文要來講講，為何在這三個筆記軟體之外，我還需要第四個筆記軟體——UpNote。</p><span id="more"></span><h2 id="第四個筆記軟體"><a href="#第四個筆記軟體" class="headerlink" title="第四個筆記軟體"></a>第四個筆記軟體</h2><blockquote><p>第四個筆記軟體真的有必要嗎？或者它只是另一種疊床架屋或自我滿足？</p></blockquote><p>我也曾思考過這個問題，所幸，現在已經有了明確的答案，本文就是我對這個答案的闡述。</p><p>如果你對 UpNote 這個軟體有興趣，本文可能是一個很好的切入點。</p><p>我們暫時拋開對細節的教學，直接看看為什麼我都已經有三個筆記軟體了，還認為自己需要它——而你也有可能有相類似的原因。</p><p>不過，開始之前，我們得先對 UpNote 進行簡要的介紹。</p><hr><h2 id="UpNote-簡介"><a href="#UpNote-簡介" class="headerlink" title="UpNote 簡介"></a>UpNote 簡介</h2><p><a href="https://getupnote.com/">UpNote</a> 是一款<strong>跨平台筆記軟體</strong>，支援 iOS、Android、macOS 和 Windows，旨在為用戶提供簡單、優雅且高效的筆記體驗。</p><p>它<strong>以 Markdown 為基礎</strong>，結合直觀的介面設計和強大的功能，吸引了許多尋求 Evernote 替代方案的用戶——包括我。</p><p><img src="https://i.imgur.com/87FzPPL.png" alt="UpNote 使用者介面"><span class="cap">UpNote 使用者介面</span></p><p>UpNote 的核心理念是讓筆記變得輕鬆流暢，並<strong>幫助使用者專注於最重要的內容</strong>。</p><p>免費版限 50 則筆記，只適合作為體驗、測試之用。付費才能解鎖無限筆記數量、附件插入與進階格式化等功能。</p><p>付費方式又分為<strong>月費</strong>或<strong>一次性買斷</strong>：</p><blockquote><p><strong>$1.99&#x2F;month</strong> or <strong>$39.99 Lifetime.</strong></p></blockquote><p>我個人是用了一、兩個月後，覺得 OK 就索性買斷了。</p><hr><h2 id="為什麼還需要第四個筆記軟體？"><a href="#為什麼還需要第四個筆記軟體？" class="headerlink" title="為什麼還需要第四個筆記軟體？"></a>為什麼還需要第四個筆記軟體？</h2><p>曾經，我以為 Notion 足夠萬能，Logseq 足夠自由，Bear 足夠簡單、美型。它們陪我度過了不同階段的筆記需求，同時不斷形塑著我對「好筆記軟體」的定義。</p><p>一般的隨手記事，我不會打開 Notion 或 Logseq——因為它們都很「重」，有著較多的層級或複雜的筆記關聯。</p><p>對於簡單記錄，Bear 無疑是最好的選擇，但它僅限於蘋果生態系（iOS、macOS），而我的手機是安卓啊啊啊！</p><p>這就是我找到 UpNote 並開始使用它的起點。</p><h3 id="本文主旨"><a href="#本文主旨" class="headerlink" title="本文主旨"></a>本文主旨</h3><p>這篇文章沒有詳細的功能介紹，也不是使用教學，而是我的<strong>選擇與考慮</strong>。</p><p>在已經擁有三款筆記軟體的情況下，為什麼我還需要 UpNote？以下是我選擇它的三個關鍵理由。</p><p>最後，我會為讀者——尤其是還在摸索自己喜歡的筆記方式、軟體的人，提出「<strong>基於我個人使用經驗</strong>」的<strong>筆記軟體選擇建議</strong>，作為你下一步的參考。</p><hr><p>因為 Bear 跟 UpNote 兩者的性質很像、介面也大同小異，都屬於 Evernote 的典型替代，所以我會特別比較它跟 Bear 之間的關係。</p><p>好，我們開始吧！</p><h2 id="一、跨平台同步：真正的全裝置筆記自由"><a href="#一、跨平台同步：真正的全裝置筆記自由" class="headerlink" title="一、跨平台同步：真正的全裝置筆記自由"></a>一、跨平台同步：真正的全裝置筆記自由</h2><p>Bear 的一大限制，就是只能在 Apple 生態系內同步。作為 Android 手機使用者，我無法隨時記錄靈感，讓 Bear 成為一個「只能在電腦使用」的工具。</p><p>出門在外的時候，我們常常習慣用手機快速記下一些待辦事項、突然浮現的靈感。這些事如果無法立法被留下來，會讓人很不安XD——因為很可能會忘記。</p><p>UpNote 的全平台支援剛好補足了這塊，讓我在任何裝置（主要是手機）都能隨時記錄。</p><p>雖然和學習關係不大，但記錄雜事、靈感卻也是生活中的「硬需求」。</p><h2 id="二、筆記本：處理「專案」型筆記"><a href="#二、筆記本：處理「專案」型筆記" class="headerlink" title="二、筆記本：處理「專案」型筆記"></a>二、筆記本：處理「專案」型筆記</h2><p>Bear 採用純標籤系統對筆記進行分類，雖然彈性高，但<strong>無法封存</strong>。</p><p>這意味著，當一個標籤底下的筆記現階段已不再重要，它們也無法從視野中淡出，除非直接刪除該標籤。但這樣又不利於複習或尋找，因為它們曾經擁有分類。</p><p>我覺得「刪除標籤」是一種<strong>不夠溫柔</strong>的處理方式，儘管它很簡潔。</p><p>UpNote 除了支援標籤，還有「筆記本」設計（如圖中的 1️⃣），讓我可以為<strong>專案性質（比如去日本旅遊）、階段性任務</strong>建立專屬的筆記本。</p><p>更重要的是，它們可以<strong>封存</strong>！</p><p>完成的專案不需刪除，只需收進封存區，不佔視野，卻能隨時調出查閱。</p><p>實際使用上，我<strong>幾乎不碰 UpNote 的標籤</strong>（因為這和 Bear 重疊了），而且，我<strong>很克制地只用五到六個筆記本（如上圖）</strong>，讓它成為我處理<strong>專案型筆記</strong>的專屬空間。</p><h2 id="三、空間：清楚區分工作與生活"><a href="#三、空間：清楚區分工作與生活" class="headerlink" title="三、空間：清楚區分工作與生活"></a>三、空間：清楚區分工作與生活</h2><p>UpNote 還有一個低調但強大的功能：<strong>空間（Spaces</strong>，如圖中的 2️⃣）每個空間都是獨立的筆記世界，擁有自己的筆記與筆記本。</p><p>我為工作設立了獨立空間，把工作上的學習筆記、工作日誌、任務追蹤分開管理。這些東西我也不想塞到 Bear，因為 Bear 主要作為我個人學習之用。</p><p>比起 Notion 的多層級資料庫系統，UpNote 的單層架構讓我不會陷入<strong>過度整理的深淵</strong>——這超重要XD</p><p>這不只是分類上的便利，更是<strong>心理上的切割</strong>——當我切換到「工作」這個空間，就彷彿進入另一個世界，幫助我更快地進入狀態。</p><p>工作與生活的筆記區隔清晰，我的筆記邏輯也變得更簡單，更有彈性。</p><hr><h2 id="結語：足夠好的筆記軟體"><a href="#結語：足夠好的筆記軟體" class="headerlink" title="結語：足夠好的筆記軟體"></a>結語：足夠好的筆記軟體</h2><p><strong>上述這三點，就足以讓我長期使用 UpNote</strong>，並不會覺得它多餘，因為這三點恰恰都是 Bear 所不足備的。</p><p>但我得強調：無論是 UpNote 或 Bear，它們對我來說，都已經「足夠好」了。剩下的是我作為使用者該如何運用與獨立思考的議題。</p><p>UpNote 並非完美，也不是最強大的筆記軟體。但它剛好補足了我現有的缺口——跨平台的行動筆記、可封存的分類機制、獨立清晰的空間設計。</p><p>與其說我「選擇了」 UpNote，不如說<strong>它填補了我筆記需求中的一個空白。更重要的是——這個空白有填補的價值與必要</strong>。</p><p>這正是我持續使用它的原因。</p><hr><h2 id="給筆記新手的軟體選擇攻略"><a href="#給筆記新手的軟體選擇攻略" class="headerlink" title="給筆記新手的軟體選擇攻略"></a>給筆記新手的軟體選擇攻略</h2><p>我覺得<strong>選擇筆記軟體就像選擇信用卡</strong>，除非它能夠<strong>帶來明顯的效益</strong>、<strong>解決具體的痛點</strong>，不然<strong>多一事不如少一事</strong>。</p><p>常用的工具我覺得還是少一點會比較好——雖然我自己好像也沒有做到😅，因為切換不同軟體的 context 需要時間、心力。</p><p>以下是我的選擇建議，依照你的「筆記軟體使用哲學」進行區分。</p><h3 id="一、簡單派"><a href="#一、簡單派" class="headerlink" title="一、簡單派"></a>一、簡單派</h3><p>希望用「一個」筆記軟體打天下的人：</p><ul><li><strong>純 Apple 生態系用戶</strong>：選擇 Apple Notes 或 Bear。據我所知，Apple Notes 現在基本上已經足夠強大。至於我為何不選它？我已在〈<a href="/bear/">Evernote 替代方案——筆記軟體Bear 2 升級心得</a>〉有所說明。</li><li><strong>Windows + 安卓</strong>：選擇 UpNote。</li><li><strong>生態混合型用戶</strong>：選擇 UpNote，或像我一樣，兩者皆有XD</li></ul><p>「簡單粗暴」是我的理想，只是我尚未做到。</p><p>總歸一句：「我還是對筆記太過貪心了。」</p><p>這讓我無法成為最優秀的學習者。</p><h3 id="二、複雜派"><a href="#二、複雜派" class="headerlink" title="二、複雜派"></a>二、複雜派</h3><p>這裡的複雜，不是指筆記軟體數量的多寡，而是<strong>需求的複雜</strong>——你希望它可以做<strong>更多事，超乎單純筆記的事</strong>。</p><p>不用說，Notion 就是你的不二選擇，其實在很多場合我還是蠻推薦 Notion 的。</p><p>原因是因為它可以很複雜，也可以很簡單，而且對免費用戶非常大方。</p><p>唯一要小心的，就是<strong>過度使用：</strong>指用來做它其實並不擅長的事情，或者是把簡單的筆記需求太複雜化。</p><p>這些行為可能會造成時間黑洞，而且不容易察覺😬</p><p>奉勸你一句：</p><blockquote><p>不要妄像任何筆記軟體能夠改變你的人生。</p></blockquote><p>它甚至改變不了筆記。</p><hr><p>至於那些擅長<strong>雙向連結</strong>的<strong>卡片筆記軟體</strong>，我個人<strong>並不特別推薦</strong>，<strong>除非你很清楚自己要什麼，否則我認為先不要考慮它們</strong>。</p><p>因為它們從來就不簡單。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/uAUlRuc.jpeg&quot; alt=&quot;by William Chen on Pexels&quot;&gt;&lt;/p&gt;
&lt;p&gt;如你所知，我是一個「&lt;a href=&quot;https://github.com/kyomind#%E7%B0%A1%E4%BB%8B&quot;&gt;不做筆記就不會學習&lt;/a&gt;」的人🥹&lt;/p&gt;
&lt;p&gt;但就像我在〈&lt;a href=&quot;/noteless/&quot;&gt;逐漸被我遺忘的卡片筆記&lt;/a&gt;〉中提到的那樣，我並不喜歡對特定的筆記軟體過於鑽研、深挖它的大量用法與變化，更不可能建立一個所謂的&lt;a href=&quot;/less-is-more/&quot;&gt;筆記系統&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我更愛「簡單粗暴」的方式&lt;/strong&gt;😎&lt;/p&gt;
&lt;p&gt;關於我的筆記軟體使用演進史，可以參考過往這幾篇文章：（依時間順序）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/code-and-me/why-evernote-7cd2abbfbafd&quot;&gt;心得 |《曼無止盡》第 40 期：Evernote 的重生之路&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/simple-notion/&quot;&gt;使用Notion 滿 3 年，為何我仍「不推薦」用它來管理你的人生？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/logseq/&quot;&gt;Logseq 心得：一顆冉冉升起的「卡片筆記」新星&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/bear/&quot;&gt;Evernote 替代方案——筆記軟體 Bear 2 升級心得&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了 Evernote 之外，其餘三者都是我現在仍有在使用的。所以它們相互之間&lt;strong&gt;並不是進化式的替代關係&lt;/strong&gt;，而是不斷完善的&lt;strong&gt;補充關係&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文要來講講，為何在這三個筆記軟體之外，我還需要第四個筆記軟體——UpNote。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/uAUlRuc.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
    <category term="Logseq" scheme="https://blog.kyomind.tw/tags/Logseq/"/>
    
    <category term="筆記軟體" scheme="https://blog.kyomind.tw/tags/%E7%AD%86%E8%A8%98%E8%BB%9F%E9%AB%94/"/>
    
    <category term="Bear" scheme="https://blog.kyomind.tw/tags/Bear/"/>
    
  </entry>
  
  <entry>
    <title>現代斯多葛——哲學能否成為信仰？</title>
    <link href="https://blog.kyomind.tw/stoicism/"/>
    <id>https://blog.kyomind.tw/stoicism/</id>
    <published>2025-03-15T07:43:54.000Z</published>
    <updated>2025-03-15T08:49:27.107Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/zRJZNHB.jpeg" alt="from Pixabay"><span class="cap">from Pixabay</span></p><p>本文講述我開始接觸<strong>斯多葛</strong>哲學（<strong>Stoicism</strong>）的契機，以及我挑選的一些素材，還有<strong>為什麼我認為自己需要一個價值觀之外的「信仰」。</strong></p><p>我得強調，這一切才剛開始，有著強烈的實驗性質。</p><p>只不過，基於對自己的了解，我認為斯多葛很可能就是我正在追求的信仰框架。</p><p>如果你對此也感興趣，且讓我為你娓娓道來。</p><span id="more"></span><hr><h2 id="開端：意外的發現"><a href="#開端：意外的發現" class="headerlink" title="開端：意外的發現"></a>開端：意外的發現</h2><p>一切的起點，是我女朋友讀到的一本心理學相關的書。</p><p>幾個月前，某天聊天時，她突然對我說：「我覺得你很像一個斯多葛主義者。」</p><p>我當下有點訝異，斯多葛主義這個詞雖然不陌生——畢竟中學歷史課本都有！但我從未認真研究過。</p><p>我問她為什麼這麼說，她便分享了書中提到的一些斯多葛主義者的思維方式和行為準則。我聽完之後，驚訝地發現這確實與我的價值觀相似。</p><p>比如常常記錄想法、反省，以便日後遇到類似情況時重新調整行為的選擇。</p><p>儘管如此，當時的我仍只是覺得有趣，並沒有特別放在心上。</p><hr><h2 id="AI-幫我整理斯多葛主義"><a href="#AI-幫我整理斯多葛主義" class="headerlink" title="AI 幫我整理斯多葛主義"></a>AI 幫我整理斯多葛主義</h2><p>過了一段時間，xAI 的 Grok 3 這個 AI 服務推出了，它內建了我個人頗為喜歡的 DeepSearch 功能。我在〈<a href="https://kyomind.notion.site/40b324f98ca94827921a6831b0d7a38f">訂戶限定 13：Deep Research × SuperGrok × 鐵人賽頒獎典禮</a>〉簡單介紹過，還沒訂閱電子報的，趕緊<a href="/subscribe/">訂起來</a>唷！</p><p>我突然想起這件事，於是請它幫我整理「作為一個現代斯多葛主義者，會有怎麼樣的行事與價值觀？」</p><p>其實整理這樣的內容，倒不一定要 DeepSearch 這類的功能，一般的 LLM 都行，只是我希望它的回答，能結合更多網路上「現代素材」。</p><p>它的回答沒讓我失望，詳細內容可點擊<a href="https://grok.com/share/bGVnYWN5_dc0316c1-6d94-4fb0-9efe-fdde34c8393d">這個連結</a>，在此只引用一小部分：</p><ul><li><strong>重視美德</strong>：優先考慮道德卓越和誠實行為，而非物質成功。</li><li><strong>情緒韌性</strong>：通過正念和反思等技術管理情緒，特別是負面情緒。</li><li><strong>接受不確定性</strong>：理解某些事情超出控制範圍，專注於可控制的事物。</li><li><strong>終身學習</strong>：持續追求知識和自我提升，深化對斯多葛原則的理解。</li><li><strong>建立有意義的關係</strong>：重視與他人的深層連結。</li><li><strong>理性導向行動</strong>：基於邏輯和理性做出決策，而非衝動或情緒。</li><li><strong>專注於能掌控的事情，不浪費精力在無法改變的事物上。</strong></li></ul><p>這些原則看起來並不新鮮，甚至部分內容你可能會覺得有些「教條感」。</p><p>可不是嗎？</p><p>但我確實喜歡這些概念，其中一部分已經內化成我的行為模式，而更多則是我仍在努力實踐的方向。</p><p>這讓我不禁開始好奇：如果這些原則是斯多葛主義的一部分，那麼斯多葛主義到底是什麼？</p><p>或許我應該更深入了解。</p><h2 id="斯多葛主義的經典書籍"><a href="#斯多葛主義的經典書籍" class="headerlink" title="斯多葛主義的經典書籍"></a>斯多葛主義的經典書籍</h2><p>於是，我開始請 AI 推薦一些適合入門的書籍——古代、現代各 10 本。</p><p>這裡各選一本介紹即可，因為我目前就只打算讀這 2 本。</p><p>畢竟 Stoicism 是<strong>「用來實踐」的哲學</strong>。我個人是覺得不需要多麼精通其中的「教義」啦！可以慢慢理解、慢慢體會。</p><p>毫無疑問，古羅馬皇帝<a href="https://zh.wikipedia.org/zh-tw/%E9%A6%AC%E7%88%BE%E5%BA%AB%E6%96%AF%C2%B7%E5%A5%A7%E5%88%97%E9%87%8C%E7%83%8F%E6%96%AF">馬可．奧理略</a>的《<a href="https://zh.wikipedia.org/zh-tw/%E6%B2%89%E6%80%9D%E5%BD%95">沉思錄</a>》是必讀經典。</p><p>現代相關書籍中，《The Daily Stoic》則是不錯的入門。台灣翻譯為《<a href="https://www.books.com.tw/products/0010784805">回到自己的內心，每天讀點斯多噶</a>》。</p><p>兩本書風格不同：《沉思錄》是奧理略的私人筆記，內容深刻，卻也帶著強烈的個人色彩；而《The Daily Stoic》則是一本更容易消化的書，每天提供一則斯多葛智慧，並搭配現代詮釋。</p><p>雖然有些評論認為，《The Daily Stoic》對斯多葛主義的理解<strong>過於淺顯</strong>，甚至有點「<strong>過度解讀</strong>」之嫌。</p><p>我從圖書館借了一本，目前讀到五月結束。個人覺得還不錯，我認為現階段不用太糾結於「正確性」——以後可能也不需要。</p><p><img src="https://i.imgur.com/fGlbQze.jpeg"></p><hr><h2 id="為什麼我仍需要信仰？"><a href="#為什麼我仍需要信仰？" class="headerlink" title="為什麼我仍需要信仰？"></a>為什麼我仍需要信仰？</h2><p>在這個過程中，我開始思考一個更深層次的問題：斯多葛主義對我的意義是什麼？</p><p>我不算無神論者（大體而言，我願意相信有神），但我並沒有特定的宗教信仰。或者說，<strong>我並不在乎</strong>。</p><p>然而，和很多人一樣，我始終也在追尋一種「<strong>在我之上</strong>」的東西——Something bigger than yourself。</p><p>這種「更大的東西」，能夠在低潮時期給予人力量，讓人不只是依賴自己的意志力、價值觀，孤軍奮戰。</p><p>這讓我意識到，我所追尋的並非傳統宗教，而是一種能夠在低潮時支持我的力量。這樣的<strong>心靈力量</strong>，我願稱之為<strong>信仰</strong>。</p><h3 id="我需要信仰"><a href="#我需要信仰" class="headerlink" title="我需要信仰"></a>我需要信仰</h3><p>宗教是最常見的支持來源，可惜我無緣擁有。</p><p>我習慣記錄自己的想法、價值觀、對世界的切入角度，這讓我相較於多數人而言，有著更加明確的信念與好惡。</p><p>然而，即便如此，我仍然希望有一個<strong>能夠引導我前進的思維框架</strong>，斯多葛主義或許可以扮演這個角色。</p><p>我們常說「當局者迷」，即使一個人價值觀鮮明，但在低潮的時候，還是很容易會自我懷疑、猶豫不決，甚至迷失方向。</p><p>作為一個有追求的人，我不想只依靠自己，我需要<strong>更堅實的指引</strong>——我需要<strong>信仰</strong>。</p><hr><h2 id="Cal-Newport-與斯多葛主義"><a href="#Cal-Newport-與斯多葛主義" class="headerlink" title="Cal Newport 與斯多葛主義"></a>Cal Newport 與斯多葛主義</h2><p>我還問了 AI：</p><blockquote><p>那 Cal Newport 對斯多葛主義有什麼看法？我感覺他的思想與主張，例如《深度工作》（Deep Work）和《數位極簡主義》（Digital Minimalism），都<strong>很斯多葛</strong>！</p></blockquote><p>沒錯！AI 甚至直接幫我找到了 Cal Newport 在 Daily Stoic 的<a href="https://dailystoic.com/cal-newport-interview/">談訪內容</a>。我們引用一段前言：</p><blockquote><p>Cal is also a fan of the Stoics. In our interview with Cal, he explains his interest and application of Stoicism, why the idea that <em>less can be more</em> has held up since ancient times, the importance of solitude and high-quality leisure, and so much more.</p></blockquote><p>這篇訪談很值得一讀（大部分是 Cal Newport 核心價值觀的重新強調），他提到自己一直廣泛閱讀哲學和宗教歷史，因此斯多葛學說一直在他關注範圍內。</p><p>他還特別提到閱讀 William Irvine 的《A Guide to the Good Life》以及 Tim Ferriss 討論 Seneca 的內容，這些都對他有所啟發。</p><p>說到這裡，我不禁想再回到「<a href="/about/">關於我</a>」中的這一段：<a href="/about/#%E5%B0%88%E6%B3%A8%E8%88%87%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%83">專注與深度思考</a>。</p><p>我想，這也是為什麼我喜歡斯多葛的一大理由吧！</p><p>這個議題，我們還要繼續。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zRJZNHB.jpeg&quot; alt=&quot;from Pixabay&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文講述我開始接觸&lt;strong&gt;斯多葛&lt;/strong&gt;哲學（&lt;strong&gt;Stoicism&lt;/strong&gt;）的契機，以及我挑選的一些素材，還有&lt;strong&gt;為什麼我認為自己需要一個價值觀之外的「信仰」。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我得強調，這一切才剛開始，有著強烈的實驗性質。&lt;/p&gt;
&lt;p&gt;只不過，基於對自己的了解，我認為斯多葛很可能就是我正在追求的信仰框架。&lt;/p&gt;
&lt;p&gt;如果你對此也感興趣，且讓我為你娓娓道來。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/zRJZNHB.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
    <category term="Cal Newport" scheme="https://blog.kyomind.tw/tags/Cal-Newport/"/>
    
    <category term="Stoicism" scheme="https://blog.kyomind.tw/tags/Stoicism/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 AI 對創作者的衝擊</title>
    <link href="https://blog.kyomind.tw/weekly-review-41/"/>
    <id>https://blog.kyomind.tw/weekly-review-41/</id>
    <published>2025-03-07T04:11:30.000Z</published>
    <updated>2025-03-07T04:51:57.744Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>久違的一篇 Weekly Review！</p><p>前幾天聽了〈<a href="https://open.spotify.com/episode/66BXP3Rb0HOSpmcd3lTENr">EP95 |（自）媒體的 AI 焦慮指南 ft. IEObserve &amp; 商周副總編輯吳中傑</a>〉這則 Podcast，覺得挺有趣，也來說說我的看法。</p><p>我不一定會重複它，但肯定有共通的論點，本篇主要是個人的 murmur。</p><p>附帶一提，本文所說的「創作者」主要是指文字創作，畢竟這是我的領域。但套用在其他類型，比如說影音創作，大概也差不多啦。</p><span id="more"></span><hr><h2 id="AI-影響創作者的兩大面向"><a href="#AI-影響創作者的兩大面向" class="headerlink" title="AI 影響創作者的兩大面向"></a>AI 影響創作者的兩大面向</h2><p>AI 不僅能夠快速產生大量文字，尤其是資訊型內容，AI 生成的文字、文章可能沒有特色，但其產出速度快、成本低，足以吸引一定的注意力。</p><p>事實就是，<strong>我們待在 AI 聊天視窗的時間比以前多得多（至少我是如此啦！）</strong>，而親自去 Google 並找到一篇文章好好閱讀的時間，恐怕是減少了。</p><p>Stack Overflow 表示：<a href="https://www.techbang.com/posts/108814-stack-overflow-ai">哭哭</a>。</p><p>此外，許多 AI 聊天服務都整合了 Web Search 功能，能夠幫用戶自動搜尋、爬取並整理網頁資訊。</p><p>這意味著我們在尋找資訊時，不需要親自 Google，而是透過 AI 直接獲取整理後的結果。</p><p>這類變化將<strong>進一步降低</strong>創作者的曝光機會。</p><p>簡單來說：</p><ol><li>你辛苦花了三小時寫一篇文章，AI 可能幾秒鐘就產生了類似的資訊，只是沒特色而已——但可能已經「部分符合」使用者的需求！</li><li>你付出心力寫了文章，但你的讀者可能只是透過 AI 的網路搜尋，得到你文章的<strong>一個小片段</strong>，而且是被整合後的片段XD</li></ol><p>這教創作者情何以堪？</p><hr><h2 id="從讀者的角度"><a href="#從讀者的角度" class="headerlink" title="從讀者的角度"></a>從讀者的角度</h2><p>話雖如此，但有件事別忘了，那就是：<strong>任何一個創作者也都是一個讀者</strong>。</p><p>對創作者有威脅的事情，<strong>不一定是讀者所關心的</strong>。</p><p>就像我在〈<a href="https://blog.kyomind.tw/not-by-ai/">為文章標註 Not By AI？ 我覺得大可不必</a>〉一文中說的「<a href="https://blog.kyomind.tw/not-by-ai/#%E8%AE%80%E8%80%85%E6%88%96%E8%A8%B1%E6%B2%92%E9%82%A3%E9%BA%BC%E5%9C%A8%E6%84%8F%EF%BC%8C%E6%96%87%E7%AB%A0%E6%98%AF%E4%BA%BA%E9%82%84%E6%98%AF-AI-%E5%AF%AB%E7%9A%84">讀者或許沒那麼在意，文章是人還是 AI 寫的</a>」。</p><p>我可以很誠實地說：「作為一個讀者，我才不管這些事情！」</p><p><strong>我就是要取得資訊越來越方便</strong>，有 AI 我就用 AI，絕對不會再浪費不必要的時間去慢慢讀一篇文章——除非我很喜歡。</p><p>偷偷告訴你，開頭的那一則 Podcast 我其實<strong>根本就沒有聽</strong>，我沒有一小時的時間，就算有，<strong>我也打算花在別的地方</strong>。</p><p>我只是把它的聲音檔下載，用 MacWhisper 轉成字幕，然後再丟給 NotebookLM 整理重點而已。我只想要知道其中一部分的重點，而這對我來說就已經足夠。</p><p>好啦，有機會我還是會再回去聽的😅</p><hr><h2 id="AI-對影音創作的衝擊未必小於文字"><a href="#AI-對影音創作的衝擊未必小於文字" class="headerlink" title="AI 對影音創作的衝擊未必小於文字"></a>AI 對影音創作的衝擊未必小於文字</h2><p>我本來以為「AI 整合網路搜尋」功能對部落格的衝擊最大，其他媒介的影響可能還好。影音創作者應該還是可以活得不錯？</p><p>想太多，因為 AI 還有別的功能呀！</p><p>拿我自己來說，對於資訊型的影片、Podcast，我會「親自看（聽）」的比例大概只有以前的 20%——或者更低。</p><p>剩下的情境，都是聲音轉文字後交給 NotebookLM。</p><p>雖然我不是很常看短影音，但顯然的，我也耐心也愈來愈少了XD</p><p>但還是要認真說一句：「有些東西，我<strong>就是只想</strong>花這樣的時間去吸收、了解。」</p><p><strong>以前沒有這樣做，是因為以前沒有 AI，不是因為以前我比較有耐心。</strong></p><hr><h2 id="我接下來該怎麼寫？"><a href="#我接下來該怎麼寫？" class="headerlink" title="我接下來該怎麼寫？"></a>我接下來該怎麼寫？</h2><p>方向其實很簡單，以後我會更在乎，文章是否符合以下兩點：</p><ol><li><strong>不要重複網路上已有的東西</strong>，尤其是已經被講爛的東西。其實這部分從以前就是如此，不信可以看<a href="https://blog.kyomind.tw/ruff/#%E6%9C%AC%E6%96%87%E4%B8%BB%E6%97%A8%E8%88%87%E7%9B%AE%E6%A8%99%E8%AE%80%E8%80%85">這一段</a>。</li><li><strong>有一定的個人特色、經驗、價值觀</strong>。這不用說吧！——<strong>「<a href="https://www.youtube.com/watch?v=tJpR0Ur20as">啾啾鞋看甄嬛</a>」系列我超愛</strong>🥰</li></ol><p>你會發現，有了 AI 以後，創作者要如何吸引讀者、讓讀者願意閱讀你的內容，<strong>和以前並沒有太大的差別，只是要求提高了而已。</strong></p><p>但不可否認，文章的曝光率正在下降。同樣的努力，甚至更多的努力，可能也無法獲得像以前一樣的回報了。</p><p>這也是沒有辦法的事。</p><hr><h2 id="結論：創作者的未來"><a href="#結論：創作者的未來" class="headerlink" title="結論：創作者的未來"></a>結論：創作者的未來</h2><p>最後，我不打算高談闊論或說些正能量的東西。我覺得想寫就寫，覺得灰心無望，不想寫就先不寫。</p><p>創作者有創作的權利，也有<strong>不創作的權利</strong>。</p><p>只能說，<strong>創作的意義對作者而言，也在隨著時間不斷地轉換跟變化。</strong></p><p>我希望我能跟上時代的腳步，直到我發現我的作品已經不再吸引、不再有價值時，我會停下來。</p><p>值得慶幸的是：還好不是現在😷</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;久違的一篇 Weekly Review！&lt;/p&gt;
&lt;p&gt;前幾天聽了〈&lt;a href=&quot;https://open.spotify.com/episode/66BXP3Rb0HOSpmcd3lTENr&quot;&gt;EP95 |（自）媒體的 AI 焦慮指南 ft. IEObserve &amp;amp; 商周副總編輯吳中傑&lt;/a&gt;〉這則 Podcast，覺得挺有趣，也來說說我的看法。&lt;/p&gt;
&lt;p&gt;我不一定會重複它，但肯定有共通的論點，本篇主要是個人的 murmur。&lt;/p&gt;
&lt;p&gt;附帶一提，本文所說的「創作者」主要是指文字創作，畢竟這是我的領域。但套用在其他類型，比如說影音創作，大概也差不多啦。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="AI 工具" scheme="https://blog.kyomind.tw/tags/AI-%E5%B7%A5%E5%85%B7/"/>
    
    <category term="寫作" scheme="https://blog.kyomind.tw/tags/%E5%AF%AB%E4%BD%9C/"/>
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>逐漸被我遺忘的卡片筆記</title>
    <link href="https://blog.kyomind.tw/noteless/"/>
    <id>https://blog.kyomind.tw/noteless/</id>
    <published>2025-01-25T03:17:54.000Z</published>
    <updated>2025-02-18T02:08:12.521Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/M62tm5t.jpeg"></p><p>如你所知，我絕對稱得上是一個「筆記愛好者」，甚至在 <a href="https://github.com/kyomind">GitHub Profile</a> 中還提到：</p><blockquote><p>喜好寫作與筆記，患有「<strong>不做筆記便不會學習</strong>」症候群。</p></blockquote><p>這一點也不假，很多時候我確實就是不做筆記便無法學習。</p><p>兩年多前，我寫下了這篇〈<a href="/logseq/">Logseq 心得：一顆冉冉升起的「卡片筆記」新星</a>〉，宣告我的「筆記人生」進入了一個<strong>全新階段</strong>——我發現了卡片筆記（卡片盒筆記法）與雙向連結筆記軟體 Logseq。</p><p>文中還充滿期待地規劃了系列內容，宣稱要透過一連串教學，讓讀者知曉「卡片筆記」的美妙，讓它不再曲高和寡。</p><p>然後呢？<strong>就沒有然後了。</strong></p><span id="more"></span><hr><h2 id="卡片筆記與卡片筆記軟體"><a href="#卡片筆記與卡片筆記軟體" class="headerlink" title="卡片筆記與卡片筆記軟體"></a>卡片筆記與卡片筆記軟體</h2><p>有一點我們要先釐清，卡片盒筆記法（以下簡稱卡片筆記）主要是從《<a href="https://www.books.com.tw/products/0010922143">卡片盒筆記</a>》一書中延伸、發展而來的概念。</p><p>我建議你也不必太計較它的「定義」為何、必須要具備哪些元素。就像我在文中說的：</p><blockquote><p>你需要的<strong>不是</strong>對<strong>特定筆記工具</strong>或<strong>方法細節</strong>的了解，甚至也不必看書。而是必須動用你的<strong>筆記思維、歸納能力與想像力</strong>——這是對卡片筆記的「<strong>戰略層級</strong>」理解。</p></blockquote><p>只是現代人應該極少會用紙本來實現這個方法，多半是透過軟體。</p><p>最常見的，就是那些極具<strong>卡片筆記精神</strong>的「雙向鏈結」筆記軟體，比如目前仍火紅的 <a href="https://obsidian.md/">Obsidian</a>、<a href="https://heptabase.com/">Heptabase</a> 等。</p><p>撇開使用上的細節差異不談——沒錯，上述軟體間的差異還不小！你不得不承認，<strong>雙向鏈結</strong>這種做法，確實和傳統的<strong>目錄式筆記</strong>有著根本的不同。</p><p>這也是為何我當初如此興奮的原因。有興趣可以去看看這段「<a href="/logseq/#%E4%BA%8C%E3%80%81%E5%8E%BB%E4%B8%AD%E5%BF%83%E5%8C%96%E7%AD%86%E8%A8%98">二、去中心化筆記</a>」。我相信文中有把那種「<strong>自由感</strong>」表達出來。</p><hr><h2 id="雙向鏈結的生活應用"><a href="#雙向鏈結的生活應用" class="headerlink" title="雙向鏈結的生活應用"></a>雙向鏈結的生活應用</h2><p>使用 Logseq 初期，我勤勤勉勉地寫下一張又一張的小卡，內容通常不多，主要著重在<strong>視角上的隨意切換</strong>，並用雙向鏈結來加以關聯。比如我會記錄<strong>每天的晚餐</strong>：</p><p><img src="https://i.imgur.com/KUv502A.png"></p><p>這圖中可以有好幾個視角：</p><ol><li>晚餐清單視角，也就是上圖。</li><li>某一家店視角：是最近<strong>哪些時候、去了幾次</strong>。只要點入其中一家店的連結，就能看到<strong>有關這家店的所有記錄</strong>。</li><li>每一天筆記內容的視角：點入日期連結，就能看到這天的所有記錄。</li></ol><p>這種<strong>隨意切換主視角的檢視法</strong>，只有雙向鏈結筆記能輕鬆辦到！</p><p>所以，Logseq 對我的生活管理，有一定的幫助。晚餐只是其中一例。</p><blockquote><p>相關文章：<a href="/less-is-more/">為什麼你「不需要」所謂的人生管理系統</a></p></blockquote><hr><h2 id="學習閃卡化"><a href="#學習閃卡化" class="headerlink" title="學習閃卡化"></a>學習閃卡化</h2><p>但說真的，我寫筆記主要還是為了「學習」。不知為何，雙向鏈結用在我的學習上，就沒有那麼「輕鬆寫意」了。</p><p>當然它肯定還是有它的優勢（與劣勢）。</p><p>但關鍵似乎是——我<strong>並不想</strong>這麼麻煩！或許是因為學習這個議題本身還是相對複雜吧。</p><p>學習上，我的 Logseq 用法<strong>趨向單純——製作一堆閃卡</strong>！（flashcards）</p><p>這些閃卡，通常是我在學習某個主題時，遇到的<strong>重要概念、定義</strong>等等。我會把它們寫成一張張卡片，然後用 Logseq 的「閃卡模式」來複習。</p><p><img src="https://i.imgur.com/pug7GUb.png"></p><p>用了近 2 年，我必須說，閃卡的學習效果還是<strong>相對有限</strong>的。它確實可以讓你「<strong>記得一些事</strong>」，但也僅止於此。</p><p>我還是會繼續用閃卡學習，但我心裡清楚：<strong>它只是一種輔助</strong>——就像左手一樣。</p><hr><h2 id="簡單粗暴的筆記方式"><a href="#簡單粗暴的筆記方式" class="headerlink" title="簡單粗暴的筆記方式"></a>簡單粗暴的筆記方式</h2><p>我雖然是筆記愛好者，但我<strong>並不喜歡</strong>在「筆記方法」上玩出各種花樣。</p><p>畢竟，我真正想要的是<strong>把事情做好</strong>，而不是<strong>把筆記做好</strong>XD</p><p>能不做的筆記就別做了，更別說大部分筆記根本也不會複習，多是一場枉然。</p><p>現在回頭看，<strong>卡片筆記其實從來沒有在我的學習中佔據要角</strong>。所以這一年來我也幾乎不在文章中提及了。</p><p>那我現在用什麼方法做筆記？很多種工具！（Notion、Bear、Logseq、UpNote）</p><p>雖然用很多種筆記軟體，但基本都只用<strong>最簡單粗暴的方式</strong>。依據<strong>不同的素材與複習習慣</strong>來決定該用哪一個。</p><h2 id="Notion-的文藝復興"><a href="#Notion-的文藝復興" class="headerlink" title="Notion 的文藝復興"></a>Notion 的文藝復興</h2><p>在〈<a href="/simple-notion/">使用 Notion 滿 3 年，為何我仍「不推薦」用它來管理你的人生？</a>〉一文，有很多批評（和鼓勵），可以見留言處。</p><p>一開始，這些批評我會滿在意的，但現在有不同看法，批評可以作為讀者思考的素材，我就不必期待自己面面俱到，至少通篇看完後，不會只有我的片面之言。</p><p>當然，我不是說這些批評都沒道理，很多時候是沒有足夠的心力再好好修改、重構文章。</p><p>回歸正題，事實上，我最近使用 Notion 寫筆記的頻率<strong>又提高了</strong>！</p><h3 id="長文本筆記"><a href="#長文本筆記" class="headerlink" title="長文本筆記"></a>長文本筆記</h3><p>原因無它，Notion 很適合「<strong>長文本</strong>」，而 Logseq 這種卡片筆記軟體卻很忌諱長文本——因為卡片就是要短小嘛。</p><p>這些長文本是什麼？主要是和 AI 的<strong>對話</strong>！（尤其是它的<strong>回答</strong>）</p><blockquote><p>相關文章：<a href="/my-ai-dialogue-notes/">我寫「AI 對話筆記」的方法與思考</a></p></blockquote><p>以前我通常是做成一張張的閃卡，慢慢複習，後來發現，這也太「搞剛」了，全部摻在一起做成 Notion 筆記才是<strong>最簡單粗暴的方式</strong>😎</p><p><img src="https://i.imgur.com/ABrQYZd.png" alt="Notion 筆記（點圖可放大）"><span class="cap">Notion 筆記（點圖可放大）</span></p><p>而且欄位不必太多，<strong>最好不超過 3 個</strong>，這樣<strong>視覺上的資訊負擔</strong>才不會太重。</p><hr><h2 id="結語：筆記，就只是筆記"><a href="#結語：筆記，就只是筆記" class="headerlink" title="結語：筆記，就只是筆記"></a>結語：筆記，就只是筆記</h2><p>如同我在「<a href="/about/#%E7%AD%86%E8%A8%98%EF%BC%8C%E5%B0%B1%E5%8F%AA%E6%98%AF%E7%AD%86%E8%A8%98">關於我</a>」中對筆記軟體們的評論：</p><blockquote><p>這些工具終歸只是<strong>記錄的手段，並不是價值真正誕生的地方。</strong>用什麼工具、該怎麼用，<strong>真的沒那麼重要。</strong></p></blockquote><p>從這個角度看，我們還可以更「<strong>狠</strong>」一點。</p><p>我希望不止是卡片筆記被我遺忘了，甚至是<strong>所有的筆記形式，從長遠來看，最好都能夠逐漸式微</strong>。</p><p>那時候，或許我就從一個「筆記愛好者」，變成「善於學習之人」了。</p><blockquote><p>推薦影片：<a href="https://youtu.be/oBbz-tSw7QQ?si=Do00pVPrOroFlkdt">複雜化、過度分析的誤區：停止內耗開始行動</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/M62tm5t.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;如你所知，我絕對稱得上是一個「筆記愛好者」，甚至在 &lt;a href=&quot;https://github.com/kyomind&quot;&gt;GitHub Profile&lt;/a&gt; 中還提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;喜好寫作與筆記，患有「&lt;strong&gt;不做筆記便不會學習&lt;/strong&gt;」症候群。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這一點也不假，很多時候我確實就是不做筆記便無法學習。&lt;/p&gt;
&lt;p&gt;兩年多前，我寫下了這篇〈&lt;a href=&quot;/logseq/&quot;&gt;Logseq 心得：一顆冉冉升起的「卡片筆記」新星&lt;/a&gt;〉，宣告我的「筆記人生」進入了一個&lt;strong&gt;全新階段&lt;/strong&gt;——我發現了卡片筆記（卡片盒筆記法）與雙向連結筆記軟體 Logseq。&lt;/p&gt;
&lt;p&gt;文中還充滿期待地規劃了系列內容，宣稱要透過一連串教學，讓讀者知曉「卡片筆記」的美妙，讓它不再曲高和寡。&lt;/p&gt;
&lt;p&gt;然後呢？&lt;strong&gt;就沒有然後了。&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/M62tm5t.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="Notion" scheme="https://blog.kyomind.tw/tags/Notion/"/>
    
    <category term="Logseq" scheme="https://blog.kyomind.tw/tags/Logseq/"/>
    
    <category term="個人知識管理" scheme="https://blog.kyomind.tw/tags/%E5%80%8B%E4%BA%BA%E7%9F%A5%E8%AD%98%E7%AE%A1%E7%90%86/"/>
    
    <category term="筆記軟體" scheme="https://blog.kyomind.tw/tags/%E7%AD%86%E8%A8%98%E8%BB%9F%E9%AB%94/"/>
    
    <category term="卡片盒筆記法" scheme="https://blog.kyomind.tw/tags/%E5%8D%A1%E7%89%87%E7%9B%92%E7%AD%86%E8%A8%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>用 Docker 容器化你的 Django 專案</title>
    <link href="https://blog.kyomind.tw/dockerize-django-project/"/>
    <id>https://blog.kyomind.tw/dockerize-django-project/</id>
    <published>2025-01-24T10:21:59.000Z</published>
    <updated>2025-03-13T01:42:11.530Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/lyxUZv1.png" alt="Let&#39;s Django！"><span class="cap">Let&#39;s Django！</span></p><p>這是 <a href="/tags/Django-Tutorial/">Django Tutorial</a> 的第 11 篇，同時也是「Django 專案容器化」<strong>三部曲</strong>的第 1 篇。</p><p>範例程式碼可參考我的 <a href="https://github.com/kyomind/Django-Tutorial">GitHub 專案</a>。</p><p>本文相關的程式碼改動，都集中在這個 <a href="https://github.com/kyomind/Django-Tutorial/pull/6">PR</a>。</p><h3 id="系列：Django-專案容器化"><a href="#系列：Django-專案容器化" class="headerlink" title="系列：Django 專案容器化"></a>系列：Django 專案容器化</h3><ul><li><a href="/series/#Django-%E5%B0%88%E6%A1%88%E5%AE%B9%E5%99%A8%E5%8C%96">文章清單（連載中）</a></li></ul><hr><p>「<strong>環境不一致</strong>」是軟體開發中的常見困境，你用 Windows、我用 Mac，在我的機器上順利運行的程式碼，換到另一個人的電腦可能就不對了。</p><p>而「容器化」正是處理這類環境設定議題的主要手段。</p><p>容器化技術不僅一定程度解決了「<a href="https://thoughtbot.com/blog/it-works-on-my-machine-why">在我的電腦可以執行</a>」的老問題，更在不同面向上，改變了軟體開發的方式。</p><p>不止是開發，從測試到部署，<strong>容器都佔據了重要角色。</strong></p><p>透過標準化的容器環境，團隊成員可以確保程式碼在不同環境中的<strong>表現一致</strong>。</p><span id="more"></span><h2 id="容器化開發"><a href="#容器化開發" class="headerlink" title="容器化開發"></a>容器化開發</h2><p>由此可見，「容器化」是現代開發的 ABC。</p><p>我更想強調是：<strong>哪怕只是在本機上運行，維持專案的容器化也是一個好習慣</strong>，方便日後遷移、分享，甚至協作。</p><p>本文是「Django 專案容器化」三部曲系列的第一篇，將帶你從零開始，將一個 Django 專案進行容器化。</p><p>下一篇介紹如何將 Django 專案容器與的 db 容器整合，並使用 Docker Compose 建立多容器架構。</p><p>最後則是（拖稿許久的）Python 套件管理器——Poetry——的容器化設定，讓你正式告別<code>requirements.txt</code>。</p><p>這些都是<strong>現代開發日常</strong>，值得我們一一了解並實踐。</p><hr><h2 id="本文主旨與目標讀者"><a href="#本文主旨與目標讀者" class="headerlink" title="本文主旨與目標讀者"></a>本文主旨與目標讀者</h2><p>本文會帶你手把手<strong>將一個 Django 專案進行容器化改造。</strong></p><p>讓你在本地開發時，也透過 Docker 容器來運行專案 app。而不是常見的——在本機的 CLI 直接執行<code>python manage.py runserver</code>指令。</p><p>這些改造並不難，但仍然需要讀者<strong>對 Docker 有基礎的了解。</strong></p><p>此外，任何軟體專案都可以容器化，選擇 Django 只是為了讓例子更具體，而且它是我相當熟悉的工具。</p><p>如果你已經在工作中使用 Docker，那本文將會是一個實用的示範。</p><h2 id="Docker-與容器"><a href="#Docker-與容器" class="headerlink" title="Docker 與容器"></a>Docker 與容器</h2><p>Docker 是一個開源的容器化平台，它讓開發者能夠將應用程式與其依賴（執行環境）打包成一個獨立的元件，確保在大部分環境中都能<strong>一致地運行。</strong></p><p>關於 Docker 的學習指引，可參考這篇〈<a href="/docker-learning/">Docker 新手入門：書與線上課程推薦</a>〉，本文主要關注「實作面」。</p><h3 id="Docker-核心概念"><a href="#Docker-核心概念" class="headerlink" title="Docker 核心概念"></a>Docker 核心概念</h3><p>使用 Docker，需要了解以下重要概念：</p><ul><li><strong>Image</strong>：包含執行環境、作業系統和應用程式等等的定義，是容器的基礎。</li><li><strong>Container</strong>：根據 image 啟動起來的執行單位，本身是一個 process。其特性是在 image 之上再建立一個「讀寫層」。</li><li><strong>Dockerfile</strong>：定義如何建立 image 的檔案。（<strong>本文重點</strong>）</li><li><strong>Volume</strong>：容器的持久化儲存空間，可將資料獨立存放在主機上（而不是直接置於容器中），避免容器刪除時資料遺失。使用<code>-v</code>參數來設定。</li></ul><p>這些概念環環相扣，形成了一個完整的 <strong>Docker 容器生態系統</strong>。</p><p>接下來，讓我們實際動手，將這些概念應用在我們的 Django 專案中。</p><hr><h2 id="為-Django-專案建立-Dockerfile"><a href="#為-Django-專案建立-Dockerfile" class="headerlink" title="為 Django 專案建立 Dockerfile"></a>為 Django 專案建立 Dockerfile</h2><p>想要將現有的 Django 專案容化器，就要從建立自己的 Docker Image 開始。</p><p>想要為專案建立<strong>專屬的 image</strong>，你需要<strong>自行定義 Dockerfile</strong>。</p><p>我們一樣以<a href="https://github.com/kyomind/Django-Tutorial">範例專案</a>為例，試著在「專案根目錄」新增一個 Dockerfile。</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>下面是一個基礎的 Dockerfile，使用了 Python 的官方 image：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Python Image</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.12</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定工作目錄</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 複製專案環境與相關檔案</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 啟動 Django 開發伺服器</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;manage.py&quot;</span>, <span class="string">&quot;runserver&quot;</span>, <span class="string">&quot;0.0.0.0:8000&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>非常簡單！</p><h3 id="重點說明"><a href="#重點說明" class="headerlink" title="重點說明"></a>重點說明</h3><ul><li><code>FROM</code>：選擇基礎環境，這裡使用較輕量的<code>python:3.12-slim</code>。</li><li><code>WORKDIR</code>：設定工作目錄，確保相關檔案、資源都在同一處。</li><li><code>COPY</code>：複製檔案至容器內部。這裡使用了兩次，主要是為了「快取最佳化」。</li><li><code>RUN</code>：執行指令——使用 pip 安裝 Python 套件。</li><li><code>CMD</code>：定義啟動容器時要執行的指令，這裡用來啟動 Django 開發伺服器。</li></ul><p>在容器內執行 Python 專案的一大特色，就是<strong>不需要再建立一個專案虛擬環境</strong>——因為<strong>容器本身就已經是一個隔離環境</strong>。</p><p>容器內的 Python 及相關套件是<strong>專屬於這個容器</strong>的，不會與其他容器或系統產生衝突。這種<strong>環境隔離</strong>也是 Docker 容器化的<strong>核心優勢</strong>之一。</p><hr><h2 id="用-Dockerfile-建立-Image"><a href="#用-Dockerfile-建立-Image" class="headerlink" title="用 Dockerfile 建立 Image"></a>用 Dockerfile 建立 Image</h2><p>Dockerfile 是<strong>自定義 image</strong> 的工具，或說<strong>設計圖</strong>。</p><p>有了 Dockerfile 後，我們在專案根目錄下使用 build 指令來建立 image：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-django-app .</span><br></pre></td></tr></table></figure><p>這個指令會根據 Dockerfile 的設定，建立一個名為<code>my-django-app</code>的 image。當然，這裡的名稱是自訂的。</p><p>執行後我得到了錯誤訊息，才發現我竟然還沒有為本專案建立<code>requirements.txt</code>😅</p><p>參考〈<a href="/python-poetry/">Python 套件管理器——Poetry 完全入門指南</a>〉中的<a href="/python-poetry/#%E8%BC%B8%E5%87%BA-requirements-txt">這段</a>來將 Poetry 虛擬環境內容輸出為<code>requirements.txt</code>。</p><p>或直接使用下列指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry <span class="built_in">export</span> -f requirements.txt -o requirements.txt --without-hashes</span><br></pre></td></tr></table></figure><blockquote><p>貼心提醒：我們會在第三篇將 Poetry 一併容器化。至此之後，專案中就<strong>不再需要</strong><code>requirements.txt</code>了。</p></blockquote><h3 id="建立-Image-並確認"><a href="#建立-Image-並確認" class="headerlink" title="建立 Image 並確認"></a>建立 Image 並確認</h3><p>新增<code>requirements.txt</code>後重新執行指令，得到下列成功結果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">=&gt; [internal] load build context                                                     0.4s</span><br><span class="line">=&gt; =&gt; transferring context: 1.20MB                                                   0.4s</span><br><span class="line">=&gt; [2/5] WORKDIR /app                                                                0.2s</span><br><span class="line">=&gt; [3/5] COPY requirements.txt .                                                     0.0s</span><br><span class="line">=&gt; [4/5] RUN pip install -r requirements.txt                                         5.7s</span><br><span class="line">=&gt; [5/5] COPY . .                                                                    0.8s</span><br><span class="line">=&gt; exporting to image                                                                0.5s</span><br><span class="line">=&gt; =&gt; exporting layers                                                               0.5s</span><br><span class="line">=&gt; =&gt; writing image sha256:5dfec18599155b31991534edc194511e43400db93ca7831284277f41  0.0s</span><br><span class="line">=&gt; =&gt; naming to docker.io/library/my-django-app                                      0.0s</span><br></pre></td></tr></table></figure><p>保險起見，還是先用指令<code>docker image ls</code>確認一下 image 真的存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ docker image <span class="built_in">ls</span></span><br><span class="line">REPOSITORY       TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">my-django-app    latest    5dfec1859915   5 minutes ago   356MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>至此，image 的建立大功告成。接下來我們要把容器 run 起來。</p><hr><h2 id="運行-Docker-容器"><a href="#運行-Docker-容器" class="headerlink" title="運行 Docker 容器"></a>運行 Docker 容器</h2><p>使用下面 Docker 指令運行容器，並將容器內部的 8000 port 對應到主機：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $(<span class="built_in">pwd</span>)/db.sqlite3:/app/db.sqlite3 -p 8000:8000 my-django-app</span><br></pre></td></tr></table></figure><p>除了 port mapping，我們還用了<code>-v</code>參數進行「<a href="https://docs.docker.com/engine/storage/bind-mounts/">bind mounts</a>」，確保本機的 SQLite 資料庫檔案可以直接 mount 到容器中。</p><p>執行成功後，在瀏覽器中輸入 <code>http://localhost:8000/hello/</code>，就可以看到專案已經正常執行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">❯ docker run -v $(<span class="built_in">pwd</span>)/db.sqlite3:/app/db.sqlite3 -p 8000:8000 my-django-app</span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">[24/Jan/2025 08:52:47] <span class="string">&quot;GET /hello/ HTTP/1.1&quot;</span> 200 28</span><br><span class="line">[24/Jan/2025 08:52:52] <span class="string">&quot;GET /hello/ HTTP/1.1&quot;</span> 200 28</span><br><span class="line">[24/Jan/2025 08:52:54] <span class="string">&quot;GET /hello/ HTTP/1.1&quot;</span> 200 28</span><br></pre></td></tr></table></figure><p>PS：目前專案只有一個端點可以使用XD，那就是<code>/hello/</code>，回應如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// http://127.0.0.1:8000/hello/</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="目前的不足之處"><a href="#目前的不足之處" class="headerlink" title="目前的不足之處"></a>目前的不足之處</h2><p>這樣算是完成初步的容器化了，但說真的，如果只是做到這步，你可能會覺得<strong>這簡直比之前還不便！</strong></p><p>不便之處有下。</p><h3 id="問題一：修改專案程式碼後無法即時更新"><a href="#問題一：修改專案程式碼後無法即時更新" class="headerlink" title="問題一：修改專案程式碼後無法即時更新"></a>問題一：修改專案程式碼後無法即時更新</h3><p>在本機運行時，程式碼只要一改，服務就會自動更新（使用測試模式），最多也只要重啟就可以看到新的變動。</p><p>但容器中的程式碼並不會「自動同步」。</p><p>簡單暴力的方式，是將「<strong>整個專案目錄</strong>」內容都透過 bind mount 掛載到容器中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8000:8000 -v $(<span class="built_in">pwd</span>):/app my-django-app</span><br></pre></td></tr></table></figure><p>而不僅僅是掛載<code>db.sqlite3</code>這個檔案。</p><h3 id="問題二：每次都要執行「Docker-指令-參數」，好麻煩！"><a href="#問題二：每次都要執行「Docker-指令-參數」，好麻煩！" class="headerlink" title="問題二：每次都要執行「Docker 指令 + 參數」，好麻煩！"></a>問題二：每次都要執行「Docker 指令 + 參數」，好麻煩！</h3><p>落落長的指令加參數，真的讓人很排斥，遠不如原來的<code>python manage.py runserver</code>指令簡潔。</p><p>如果每次重置環境都要輸入這些內容，會讓人動力大減。</p><p>放心，以上兩個問題都會在下一篇中改善——畢竟應該沒有人是這樣開發的吧？😅</p><hr><h2 id="小結與下一步"><a href="#小結與下一步" class="headerlink" title="小結與下一步"></a>小結與下一步</h2><p>本文完成了對 Django 專案的基礎容器化，從建立 Dockerfile 到建立 Image，再到運行容器，一步步帶你體驗 Docker 的基本操作。</p><p>還處理了 SQLite 資料庫檔案的持久化問題。</p><p>不過，這些都只是「暫時」的做法。</p><p>在下一篇文章中，我們將更進一步：</p><ul><li>探討如何替換 SQLite 為生產級資料庫（如 PostgreSQL）。</li><li>使用 Docker Compose 將 Django 與資料庫容器整合，建立一個多容器架構。</li></ul><p>透過 Docker，為我們<strong>打造更流暢的現代開發體驗</strong>，敬請期待。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lyxUZv1.png&quot; alt=&quot;Let&amp;#39;s Django！&quot;&gt;&lt;/p&gt;
&lt;p&gt;這是 &lt;a href=&quot;/tags/Django-Tutorial/&quot;&gt;Django Tutorial&lt;/a&gt; 的第 11 篇，同時也是「Django 專案容器化」&lt;strong&gt;三部曲&lt;/strong&gt;的第 1 篇。&lt;/p&gt;
&lt;p&gt;範例程式碼可參考我的 &lt;a href=&quot;https://github.com/kyomind/Django-Tutorial&quot;&gt;GitHub 專案&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本文相關的程式碼改動，都集中在這個 &lt;a href=&quot;https://github.com/kyomind/Django-Tutorial/pull/6&quot;&gt;PR&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;系列：Django-專案容器化&quot;&gt;&lt;a href=&quot;#系列：Django-專案容器化&quot; class=&quot;headerlink&quot; title=&quot;系列：Django 專案容器化&quot;&gt;&lt;/a&gt;系列：Django 專案容器化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/series/#Django-%E5%B0%88%E6%A1%88%E5%AE%B9%E5%99%A8%E5%8C%96&quot;&gt;文章清單（連載中）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;「&lt;strong&gt;環境不一致&lt;/strong&gt;」是軟體開發中的常見困境，你用 Windows、我用 Mac，在我的機器上順利運行的程式碼，換到另一個人的電腦可能就不對了。&lt;/p&gt;
&lt;p&gt;而「容器化」正是處理這類環境設定議題的主要手段。&lt;/p&gt;
&lt;p&gt;容器化技術不僅一定程度解決了「&lt;a href=&quot;https://thoughtbot.com/blog/it-works-on-my-machine-why&quot;&gt;在我的電腦可以執行&lt;/a&gt;」的老問題，更在不同面向上，改變了軟體開發的方式。&lt;/p&gt;
&lt;p&gt;不止是開發，從測試到部署，&lt;strong&gt;容器都佔據了重要角色。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;透過標準化的容器環境，團隊成員可以確保程式碼在不同環境中的&lt;strong&gt;表現一致&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/lyxUZv1.png" type="image"/>
    
    
    <category term="Django" scheme="https://blog.kyomind.tw/categories/Django/"/>
    
    
    <category term="Docker" scheme="https://blog.kyomind.tw/tags/Docker/"/>
    
    <category term="Django Tutorial" scheme="https://blog.kyomind.tw/tags/Django-Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>壓力太大怎麼辦？——接受殘缺與遺憾</title>
    <link href="https://blog.kyomind.tw/weekly-review-40/"/>
    <id>https://blog.kyomind.tw/weekly-review-40/</id>
    <published>2025-01-07T09:36:03.000Z</published>
    <updated>2025-01-16T00:10:38.416Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/3auatX0.png"></p><p>各位朋友們，新年快樂！2025 年到了！而我又好一段時間沒寫 Weekly Review 了😅</p><p>這是第 40 期。從本期開始，我決定不再於標題前方放期數前綴，讓它看起來更自然。</p><p>對我來說，一篇文章究竟要放「<a href="/categories/%E5%BF%83%E5%BE%97/">心得</a>」還是「<a href="/categories/Weekly-Review/">Weekly Review</a>」，有時候真是想破頭——作繭自縛的範例。</p><p>兩者其實很難有明確的分界，真要說的話，較零碎、個人的部分我會放這裡。較完整、面向客觀事物的看法，則偏好放心得。</p><p>這篇文章想分享一些最近的雜感，有點零散，請多見諒。</p><span id="more"></span><hr><p>前幾天，我發了一篇關於<a href="/bbc-6-minute-english/">學英文的文章</a>。不知道你是否好奇：「我是不是一個沒事都在想著學習的人？」</p><p>答案——好像是如此！</p><p>但我覺得這並不是一件好事，至少不完全是。因為<strong>學習不等於創造價值</strong>，如果學習最終只成為了<strong>自我滿足</strong>，而無法帶來實際的影響，那我<strong>寧可不學</strong>。</p><p>隨著時間的推移，我愈明白一件事——<strong>人生有限，我更希望為自己和他人創造價值</strong>。</p><p>因為當生命走到終點時，或許最讓人感到欣慰的，並不是「學到了多少」，而是「<strong>做到了多少</strong>」。</p><p>當然，誰學習不是想創造價值呢？可惜很多時候都<strong>事與願違</strong>而已。</p><p>而且我覺得，所謂熱衷學習，往往也會帶來不少的<strong>額外壓力</strong>。</p><p>你是否也有同感，光看到〈<a href="/network-101-course/">《給網站工程師的網路課》心得：Web 開發者的網路學習指南</a>〉、〈<a href="/grind-leetcode-with-ai-preparation/">與 AI 共舞——我的 LeetCode 刷題之道（準備篇）</a>〉這類的文章標題，就不禁帶給人一種壓力😰</p><p>至少我有啦！</p><h2 id="求職壓力與刷題"><a href="#求職壓力與刷題" class="headerlink" title="求職壓力與刷題"></a>求職壓力與刷題</h2><p>壓力百百種，但「<strong>軟體工程師求職</strong>」的壓力正是讓人很想逃避的那種XD</p><p>作為一個軟體工程師，面試不只是談談過去的專案與技術經驗，還需要刷題、學習系統設計等等。</p><p>尤其是<strong>刷題</strong>，需要額外投入一定的時間和心力，是智識上的一大挑戰。</p><p>我不愛刷題，但我也理解，刷題對於了解這些資料結構、演算法，確實有其價值。</p><p>而且退萬步言，這就是目前公司用來篩選人才的方式之一。</p><p>即使不喜歡，該做的準備還是要做。</p><hr><h2 id="反脆弱與-aMCC"><a href="#反脆弱與-aMCC" class="headerlink" title="反脆弱與 aMCC"></a>反脆弱與 aMCC</h2><p>求職的日子，也讓我開始重新思考<strong>自己與挑戰、壓力之間的關係</strong>。</p><p>剛好，昨天聽到 JR Lee 的 Podcast〈<a href="https://www.youtube.com/watch?v=hPdrI2zi3Kg">什麼是反脆弱？如何面對壓力，讓自己變得更強？｜The JR Lee Podcast Ep067</a>〉。</p><p>JR Lee 是我很喜歡的一位創作者。我不只喜歡他的內容本身，更欣賞他對創作的態度——為那一小群願意支持深度內容的讀者與觀眾，全心全意地投入創作。</p><p>這樣的「創作魂」讓我感動，儘管這注定不是大眾路線，但我深表認同。</p><p>所以看到一半時，我又「抖內」了 500 塊😘</p><h3 id="aMCC-與抗壓力"><a href="#aMCC-與抗壓力" class="headerlink" title="aMCC 與抗壓力"></a>aMCC 與抗壓力</h3><p>在這期節目裡，有段內容讓我印象深刻：（整理 by NotebookLM）</p><blockquote><p>節目提到一個大腦區域——<strong>aMCC</strong>（Anterior Mid-Cingulate Cortex，前扣帶皮層中部），它和人類的意志力、求生本能有很大的關聯。</p></blockquote><blockquote><p>雖然目前對 aMCC 的研究還處於初期階段，但科學家們相信 aMCC 不僅與意志力有關，更與求生意志密切相關。<strong>擁有較大的 aMCC 代表著更強大的意志力和求生意志，這能幫助人們在面對挑戰和壓力時，更能堅持下去，並最終克服挑戰。</strong></p></blockquote><blockquote><p>科學家發現，aMCC 的大小<strong>會隨著個人狀態改變</strong>。例如，肥胖者的 aMCC 較小，但節食後會變大；運動員的 aMCC 通常較大，而<strong>那些經常挑戰自我、克服困難的人，aMCC 甚至可以「持續變大」。</strong></p></blockquote><p>那麼，<strong>如何讓 aMCC 變大？</strong></p><blockquote><p>從事讓你<strong>感到厭惡、但具挑戰性的事情</strong>。 當你投入精力去做那些困難、讓你抗拒的事時，aMCC 就會增長。<strong>反之，當你過於安於現狀時，aMCC 會逐漸縮小。</strong></p></blockquote><p>這段理論讓我得到了一絲慰藉——至少在面對求職壓力時，可以勇敢安慰自己：「我的 aMCC 正在變大呢！」😆</p><hr><h2 id="降低期待，減少焦慮"><a href="#降低期待，減少焦慮" class="headerlink" title="降低期待，減少焦慮"></a><strong>降低期待，減少焦慮</strong></h2><p>作為一個高敏感型人格（HSP）、I 型人，我很希望自己能<strong>對壓力沒那麼敏感</strong>、不要那麼容易焦慮。</p><p>按照上述內容，看起來想辦法讓 aMCC 增大是一個方向XD</p><p>但這畢竟需要一定的時間和精力（還得「勉強」自己🥹），有沒有更簡單的辦法？有！</p><p>節目中還提到了一個我很喜歡的觀念，那就是——<strong>不要太認真</strong>！簡單來說，就是要學會「<strong>降低期待</strong>」。</p><p>很多事情（真的很多），<strong>70 分就是滿分</strong>。當你不再追求 80、90 分時，<strong>反而更容易發揮出好表現</strong>，因為你的大腦不會因為害怕失敗、壓力過大而<strong>認知癱瘓</strong>。</p><p>這也是我在準備面試時最大的感悟：只求沒有明顯弱點XD，別想著面面俱到。</p><p>當然，完全不準備是不可行的，<strong>但在某些細節上學會適可而止，往往能保持更好的心理狀態。</strong></p><p>講白了就是：<strong>請為自己鬆一口氣😇</strong></p><hr><h2 id="小結：接受殘缺與遺憾"><a href="#小結：接受殘缺與遺憾" class="headerlink" title="小結：接受殘缺與遺憾"></a>小結：接受殘缺與遺憾</h2><p>最後，我想分享一段話，來自我之前的文章〈<a href="/less-is-more/#%E7%B5%90%E8%AA%9E%EF%BC%9A%E6%8E%A5%E5%8F%97%E6%AE%98%E7%BC%BA%E8%88%87%E9%81%BA%E6%86%BE">為什麼你「不需要」所謂的人生管理系統</a>〉：</p><blockquote><p>手段可以殘缺。唯有本質的完整，才值得我們一心追求——至死方休。</p></blockquote><blockquote><p>接受殘缺並不意味著放棄進步，而是在進步的過程中，<strong>試著學會區分：哪些只是手段，而哪些才是本質。</strong></p></blockquote><blockquote><p>擺脫對系統的「<strong>依賴</strong>」後，甚至會發現，我們的生產力<strong>其實已經有了顯著的提升</strong>。這樣的提升，<strong>來自於我們對「自身侷限」的理解和接受。</strong></p></blockquote><blockquote><p>這種心態的轉變，不僅提高了生產力，更重要的是：<strong>減少了不必要的壓力和焦慮。</strong></p></blockquote><p>重新看完後，我不禁心想：「這文章，也寫得太好了吧！」</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3auatX0.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;各位朋友們，新年快樂！2025 年到了！而我又好一段時間沒寫 Weekly Review 了😅&lt;/p&gt;
&lt;p&gt;這是第 40 期。從本期開始，我決定不再於標題前方放期數前綴，讓它看起來更自然。&lt;/p&gt;
&lt;p&gt;對我來說，一篇文章究竟要放「&lt;a href=&quot;/categories/%E5%BF%83%E5%BE%97/&quot;&gt;心得&lt;/a&gt;」還是「&lt;a href=&quot;/categories/Weekly-Review/&quot;&gt;Weekly Review&lt;/a&gt;」，有時候真是想破頭——作繭自縛的範例。&lt;/p&gt;
&lt;p&gt;兩者其實很難有明確的分界，真要說的話，較零碎、個人的部分我會放這裡。較完整、面向客觀事物的看法，則偏好放心得。&lt;/p&gt;
&lt;p&gt;這篇文章想分享一些最近的雜感，有點零散，請多見諒。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/3auatX0.png" type="image"/>
    
    
    <category term="Weekly Review" scheme="https://blog.kyomind.tw/categories/Weekly-Review/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="生活" scheme="https://blog.kyomind.tw/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="人生思考" scheme="https://blog.kyomind.tw/tags/%E4%BA%BA%E7%94%9F%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>BBC 6 Minute English：提升英文聽力的好夥伴</title>
    <link href="https://blog.kyomind.tw/bbc-6-minute-english/"/>
    <id>https://blog.kyomind.tw/bbc-6-minute-english/</id>
    <published>2025-01-04T09:07:18.000Z</published>
    <updated>2025-02-27T02:59:48.548Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/aL3kCBo.jpeg" alt="6 Minute English by BBC Learning English"><span class="cap">6 Minute English by BBC Learning English</span></p><p>眾所周知，<strong>學英文</strong>不僅是軟體工程師的常見需求，更是許多台灣人的長期課題。</p><p>我自然也不例外。</p><p>為了彌補自己在英文<strong>聽力</strong>和<strong>閱讀</strong>之間的落差，我最近開始重新<strong>練習英文聽力</strong>。而我使用的素材，如標題所言，正是 <a href="https://www.youtube.com/playlist?list=PLcetZ6gSk96-FECmH9l7Vlx5VDigvgZpt">BBC 6 Minute English</a> 節目——外加 AI 🤖</p><hr><h2 id="為什麼開始練習聽力？"><a href="#為什麼開始練習聽力？" class="headerlink" title="為什麼開始練習聽力？"></a>為什麼開始練習聽力？</h2><p>多年前第一次轉職求職之際，曾考過一次多益（當公務員時完全不需要這東西XD），我的總分為 785 分，閱讀拿到 440 分，聽力則只有 345 分。</p><p>兩者相差了 95 分。</p><p>這樣的差距與<strong>不均</strong>，難免讓人不快，也反映了許多台灣人的常見問題：我們能讀懂英文文章，卻<strong>無法聽懂簡單的日常對話</strong>。</p><p>提升英文聽力的動機很多，比如希望<strong>進入外商工作</strong>，或是在國外旅遊時能<strong>與當地人交流</strong>等等。我應該屬於前者。</p><p>在台灣，生活中缺乏自然的英文環境，我們必須自行尋找適合自己的練習方式。</p><p>在嘗試多種方法後，我發現目前的方式相對簡單且可持續，<strong>不會太過負擔</strong>。</p><p>至於有沒有效，等我實踐一段時間後，再向大夥報告🫡</p><span id="more"></span><h2 id="為何選擇-BBC-6-Minute-English？"><a href="#為何選擇-BBC-6-Minute-English？" class="headerlink" title="為何選擇 BBC 6 Minute English？"></a>為何選擇 BBC 6 Minute English？</h2><p><a href="https://www.bbc.co.uk/learningenglish/english/features/6-minute-english">BBC 6 Minute English</a> 是一個圍繞熱門話題和實用知識進行探討的節目，內容涵蓋新聞事件、科普、文化背景等不同主題。</p><p>兩位主持人透過<strong>輕鬆的對談形式</strong>，引導聽眾學習<strong>關鍵詞彙</strong>並理解背景資訊，很適合用來提升聽力並增加英文詞彙量。</p><p>你可以在 <strong>BBC Learning English</strong> 的 <a href="https://www.youtube.com/@bbclearningenglish">YouTube 頻道</a>上看到所有集數。</p><p>主持人<strong>語速適中</strong>，雖然是英國腔，但由於是<strong>針對英語學習者設計的內容</strong>，因此發音清晰標準，不會構成太多理解障礙，是理想的聽力學習素材。</p><p>相比動輒 40 分鐘或一小時的影集，這樣的短節目更容易融入日常生活、減少負擔。</p><p>但有一點需要留意：6 Minute English 的<strong>難度定位</strong>約為 <strong>Intermediate level（中級）</strong>，大概是 <a href="https://zh.wikipedia.org/zh-tw/%E6%AD%90%E6%B4%B2%E5%85%B1%E5%90%8C%E8%AA%9E%E8%A8%80%E5%8F%83%E8%80%83%E6%A8%99%E6%BA%96">CEFR</a> 的 B1-B2 左右。初學者可以考慮 <a href="https://learningenglish.voanews.com/">VOA</a>（Voice of America）等更簡單的節目。</p><hr><h2 id="其他方法的嘗試與反省"><a href="#其他方法的嘗試與反省" class="headerlink" title="其他方法的嘗試與反省"></a>其他方法的嘗試與反省</h2><p>在找到 BBC 6 Minute English 之前，我嘗試過其他方法，但效果有限——應該說<strong>難以持續</strong>。</p><h3 id="1-影集學習法"><a href="#1-影集學習法" class="headerlink" title="1. 影集學習法"></a>1. 影集學習法</h3><p>看美劇學英文！你可能不陌生，但我覺得很難XD</p><p>首先，我平常看劇就是為了放鬆，這和「學習」這個目標<strong>恰好相反</strong>，難免有些心理上的排斥。</p><p>而且實際操作時，我很難專心聽完整集（其實半集也無法），劇情進展速度常超過對話理解能力。與其說在「練習聽力」，更像是被劇情牽著走，效果不彰。</p><p>當然，這很可能是我聽力太弱了。但我想強調的是：我個人並不喜歡這個方式。</p><h3 id="2-VoiceTube"><a href="#2-VoiceTube" class="headerlink" title="2. VoiceTube"></a>2. VoiceTube</h3><p>我也使用過 VoiceTube 這個學習平台，影片長度約 5 分鐘，這大幅和緩了<strong>專注力不足</strong>的問題。</p><p>甚至還訂了一年份的「<a href="https://www.google.com/search?q=VoiceTube%20Hero">VoiceTube Hero</a>」，因為看到網路上一片好評，加上 YouTube 網紅的折扣，所以忍不住刷卡了！</p><p>說真的，當下也是充滿信心，覺得口說、聽力應該有救了XD</p><p>然而事與願違，用了一個月後，前幾天我提交了退費申請，因為我覺得<strong>課程設計不符合我的需求</strong>。具體細節有機會再另篇說明，畢竟這不是本文重點。</p><p>這裡不是說它無效，願意聽肯定有效，只是我無法持續下去。</p><p>話說回來，單就那些影片，我認為還是很不錯的聽力素材。</p><hr><h2 id="BBC-6-Minute-English-AI"><a href="#BBC-6-Minute-English-AI" class="headerlink" title="BBC 6 Minute English + AI"></a>BBC 6 Minute English + AI</h2><p>接觸 BBC 6 Minute English 後，我確定了<strong>結合 AI 工具來輔助並提升聽力</strong>的練習流程。終於不用再尋尋覓覓，因為這就是我要的。</p><p>所謂的 AI，具體而言就像「<a href="https://blog.kyomind.tw/gpts-for-leetcode/#%E4%B8%80%E3%80%81%E3%80%8C%E5%93%A9%E5%93%A9%E6%89%A3%E6%89%A3%E3%80%8DGPTs-%E4%BB%8B%E7%B4%B9">哩哩扣扣</a>」，它也是一個 GPTs，負責幫我「出選擇題」來進行聽力測驗。</p><p>這要感謝 BBC 6 Minute English <strong>每一集都有字幕（逐字稿）</strong>，只要把字幕提供給 AI，它就能知道這一集的內容，然後出題。</p><p>這個 GPTs 叫「<a href="https://chatgpt.com/g/g-6760497918c8819187ea4b7209ba30b6-earwise">EarWise</a>」，只有我自己在用，但因為寫了這篇文章我就直接公開了，有興趣可以自行試試，起手式就是<strong>把字幕上傳餵給它，然後送出</strong>。</p><p>它的第一次回應大概如下（每次不盡相同）：</p><p><img src="https://i.imgur.com/kvdZbte.png" alt="EarWise"><span class="cap">EarWise</span></p><p>剩下的部分，如圖，你應該知道怎麼做了。有機會我們再另篇介紹。</p><p>不止 BBC，其實它<strong>可以用在任何英文節目</strong>！有沒有覺得活在 AI 時代真的很幸福😇</p><hr><h2 id="具體流程與實踐"><a href="#具體流程與實踐" class="headerlink" title="具體流程與實踐"></a>具體流程與實踐</h2><p>以下是我練習聽力的整體流程！大概需要 30 分鐘。</p><h3 id="1-初次聆聽節目"><a href="#1-初次聆聽節目" class="headerlink" title="1. 初次聆聽節目"></a>1. 初次聆聽節目</h3><p>完整聆聽 6 分鐘的內容，不使用任何字幕輔助，專注於理解主持人的對話脈絡。</p><p>俗稱「<strong>裸聽</strong>」。</p><h3 id="2-利用-AI-生成練習題（選擇題）"><a href="#2-利用-AI-生成練習題（選擇題）" class="headerlink" title="2. 利用 AI 生成練習題（選擇題）"></a>2. <strong>利用 AI 生成練習題（選擇題）</strong></h3><p>將該集字幕丟給 AI，生成選擇題，看看每一題內容，嘗試作答。</p><p>有些題目你可能會了，有些則還沒有聽清楚，沒關係，請先「<strong>記得這些題目</strong>」。</p><p><img src="https://i.imgur.com/6mMZo8i.png" alt="EarWise"><span class="cap">EarWise</span></p><h3 id="3-第二次，帶著問題重新聆聽"><a href="#3-第二次，帶著問題重新聆聽" class="headerlink" title="3. 第二次，帶著問題重新聆聽"></a>3. 第二次，帶著問題重新聆聽</h3><p><strong>帶著問題學習</strong>有助於記憶和理解，聽力也不例外。</p><p>看完聽力練習題後，再次聆聽內容，這次我們就可以<strong>集中在與選擇題有關的部分</strong>。</p><p>這就跟你<strong>看完目錄才開始讀書</strong>是類似的，你會<strong>更有「問題意識」</strong>。</p><p>這會增進你的聽力與理解——因為<strong>認知的範圍縮小了</strong>。</p><h3 id="4-作答選擇題、產出筆記"><a href="#4-作答選擇題、產出筆記" class="headerlink" title="4. 作答選擇題、產出筆記"></a>4. 作答選擇題、產出筆記</h3><p>依序使用下列三個指令對內容進行解析，這個很好懂，就不多解釋：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a (--answers)：提供選擇題答案與解析</span><br><span class="line">-n (--notes)：產生內容與語言學習重點筆記</span><br><span class="line">-t (--take-offs)：從筆記中萃取關鍵學習重點</span><br></pre></td></tr></table></figure><p>我通常會把<code>-t</code>的內容整理到 Notion，但會不會複習我就不敢說了😅</p><h3 id="5-聽第三次，開字幕！"><a href="#5-聽第三次，開字幕！" class="headerlink" title="5. 聽第三次，開字幕！"></a>5. 聽第三次，開字幕！</h3><p>沒錯，還沒完，而且這一步非常重要，可謂——last but not the least。</p><p>最後一次聆聽，<strong>開啟字幕來確認自己的理解是否正確</strong>。</p><p>這個步驟不僅能夠幫助我確認之前<strong>可能聽錯的部分</strong>，還能加深對單字和片語的印象。在這個階段，我會特別注意那些之前<strong>聽不清楚</strong>的段落。</p><p>我認為，如果少了這最後一次的聽力練習，那整體的學習效果可能會<strong>大打扣折</strong>。</p><hr><h2 id="做法與思路解析"><a href="#做法與思路解析" class="headerlink" title="做法與思路解析"></a>做法與思路解析</h2><p>法律系畢業的我，酷愛對任何重要事情的<strong>想法、思路</strong>進行整理，已經到了<strong>偏執狂</strong>的地步——寫程式也是如此😈</p><p>因此，對於「<strong>如何練習並增進英文聽力</strong>」這個議題，我也有一些話要說。這些想法主要源自過去的經驗和偏好，你看看就好。</p><p>我個人並不喜歡聽西洋歌曲，美劇也是可看可不看。所以很難用這方面（娛樂）來驅動自己學習英文，尤其是聽力。</p><p>所以，對我來說，我更需要「<strong>簡單、可重複</strong>」的策略。</p><p>這個策略的重點是<strong>阻力很低（簡單）</strong>，而且<strong>方便每天進行（可重複）</strong>。這樣就足夠了！</p><p>上述兩種「失敗」方法，對我來說不僅阻力大，就結果而言，常常也是三天曬網、兩天捕魚，難以堅持。</p><h3 id="方法簡評"><a href="#方法簡評" class="headerlink" title="方法簡評"></a>方法簡評</h3><p>BBC 6 Minute English 結合 AI，不僅縮短了單次學習的時間負擔——因為一集不長。藉由 AI 解說，更提升了你<strong>對細節的理解</strong>。</p><p>對於聽力還在起步階段的人（我也是），強烈建議避免「貪多」，可以從短節目開始，專注於重複聆聽，以獲得<strong>相對穩定的學習熟練度</strong>。</p><p>此外，<strong>降低學習過程中的阻力</strong>非常重要。</p><p>尤其對於工作或生活中<strong>不常用到英文</strong>的人，<strong>減少阻力</strong>可說是持續學習的<strong>唯一</strong>關鍵。</p><p>因此我選擇每集約 5-6 分鐘的內容，這樣的時長不會帶來太多負擔，反而更容易融入日常生活——任何時候開始都可以。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>你覺得，學英文是必要的嗎？我不認為。</p><p>個人非常認同 <a href="https://www.facebook.com/will.fans/?locale=zh_TW">Will 保哥</a>在《<a href="https://www.accupass.com/event/2408150700092666728070">ChatGPT 進階語音互動：打造個人化的英語口說教練</a>》這堂課中說的：「學語言如果沒有動機就別學了！」——事倍功半。</p><p>既然要學，就選擇擇一個<strong>不會太痛苦，又容易持續</strong>的方式，畢竟刻苦不是我的 style 😇</p><p>我認為「BBC 6 Minute English + AI」就是這樣的方式。</p><p>希望我們都能在每一天的練習中，逐步提升自己。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aL3kCBo.jpeg&quot; alt=&quot;6 Minute English by BBC Learning English&quot;&gt;&lt;/p&gt;
&lt;p&gt;眾所周知，&lt;strong&gt;學英文&lt;/strong&gt;不僅是軟體工程師的常見需求，更是許多台灣人的長期課題。&lt;/p&gt;
&lt;p&gt;我自然也不例外。&lt;/p&gt;
&lt;p&gt;為了彌補自己在英文&lt;strong&gt;聽力&lt;/strong&gt;和&lt;strong&gt;閱讀&lt;/strong&gt;之間的落差，我最近開始重新&lt;strong&gt;練習英文聽力&lt;/strong&gt;。而我使用的素材，如標題所言，正是 &lt;a href=&quot;https://www.youtube.com/playlist?list=PLcetZ6gSk96-FECmH9l7Vlx5VDigvgZpt&quot;&gt;BBC 6 Minute English&lt;/a&gt; 節目——外加 AI 🤖&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;為什麼開始練習聽力？&quot;&gt;&lt;a href=&quot;#為什麼開始練習聽力？&quot; class=&quot;headerlink&quot; title=&quot;為什麼開始練習聽力？&quot;&gt;&lt;/a&gt;為什麼開始練習聽力？&lt;/h2&gt;&lt;p&gt;多年前第一次轉職求職之際，曾考過一次多益（當公務員時完全不需要這東西XD），我的總分為 785 分，閱讀拿到 440 分，聽力則只有 345 分。&lt;/p&gt;
&lt;p&gt;兩者相差了 95 分。&lt;/p&gt;
&lt;p&gt;這樣的差距與&lt;strong&gt;不均&lt;/strong&gt;，難免讓人不快，也反映了許多台灣人的常見問題：我們能讀懂英文文章，卻&lt;strong&gt;無法聽懂簡單的日常對話&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;提升英文聽力的動機很多，比如希望&lt;strong&gt;進入外商工作&lt;/strong&gt;，或是在國外旅遊時能&lt;strong&gt;與當地人交流&lt;/strong&gt;等等。我應該屬於前者。&lt;/p&gt;
&lt;p&gt;在台灣，生活中缺乏自然的英文環境，我們必須自行尋找適合自己的練習方式。&lt;/p&gt;
&lt;p&gt;在嘗試多種方法後，我發現目前的方式相對簡單且可持續，&lt;strong&gt;不會太過負擔&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;至於有沒有效，等我實踐一段時間後，再向大夥報告🫡&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/aL3kCBo.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="語言學習" scheme="https://blog.kyomind.tw/tags/%E8%AA%9E%E8%A8%80%E5%AD%B8%E7%BF%92/"/>
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
  </entry>
  
  <entry>
    <title>我的 LeetCode 筆記：記錄刷題的簡單做法</title>
    <link href="https://blog.kyomind.tw/leetcode-notes-method/"/>
    <id>https://blog.kyomind.tw/leetcode-notes-method/</id>
    <published>2024-12-24T06:19:26.000Z</published>
    <updated>2024-12-24T09:47:03.942Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/g9WO9S7.jpeg"></p><p>系列的前兩篇中，我們首先介紹了準備工作、學習資源和基本的刷題原則，這些內容<strong>特別適合初學者或希望減少刷題壓力的讀者</strong>。畢竟我也不喜歡刷題😂</p><p>接著，在第二篇裡，我們討論了如何使用 AI 工具（我設計的 <a href="https://chatgpt.com/g/g-6731960a3a2081909fe1975e05c034c4-li-li-kou-kou">GPTs</a>）來提高刷題效率（或說提高「意願」），以及使用 AI 輔助刷題時的一些重點與注意事項。</p><p>如果你還沒看過前兩篇，建議可以先看看，會對整個學習脈絡有更清楚的理解。</p><h3 id="系列：我的-LeetCode-刷題之道"><a href="#系列：我的-LeetCode-刷題之道" class="headerlink" title="系列：我的 LeetCode 刷題之道"></a>系列：我的 LeetCode 刷題之道</h3><ul><li><a href="https://blog.kyomind.tw/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93">文章清單（連載中）</a></li></ul><p>本文將聚焦於刷題過程中的<strong>筆記</strong>環節，採取簡單、實用的筆記方式，讓你的學習過程更有條理，並在複習時更加輕鬆。</p><p>話不多說，讓我們開始。</p><span id="more"></span><hr><h2 id="為什麼要做筆記？"><a href="#為什麼要做筆記？" class="headerlink" title="為什麼要做筆記？"></a>為什麼要做筆記？</h2><p>學習是否一定要做筆記？不同的人有不同看法。我也遇過很厲害但不太做筆記的人。</p><p><a href="https://www.facebook.com/will.fans/">保哥</a>在其臉書發文中提過：</p><p><img src="https://i.imgur.com/lvzlAud.png"></p><p>這段內容<strong>讓我最有感觸</strong>的是「<strong>只有不到 1% 會重看一次</strong>」，你也有類似經驗嗎？</p><p>我學習時幾乎都會做筆記。不過，不得不承認，「做了卻沒複習」這件事也很常發生。</p><p>而且我覺得，筆記如果沒有被複習，<strong>那其實和沒做差不多</strong>——都是船過水無痕。</p><p>所以，筆記建議不要寫太多、太長，組織上也不要太複雜，夠用就好。</p><blockquote><p>延伸閱讀：<a href="/less-is-more/">為什麼你「不需要」所謂的人生管理系統</a></p></blockquote><p>我的 LeetCode 筆記法相對簡單，沒有使用任何專門的筆記軟體，只是將程式碼和筆記緊密結合在一起，放在 Git repo（repository）中。</p><p>接下來，我將分享具體的做法、思路與注意事項。</p><hr><h2 id="Git-Repo-介紹"><a href="#Git-Repo-介紹" class="headerlink" title="Git Repo 介紹"></a>Git Repo 介紹</h2><p>把刷題筆記放在一個 repo 中，是「簡單筆記」的第一步——可能是最重要的一步。</p><p>我將所有寫過的 LeetCode 題目與筆記放在一個 Git repo 裡，並同步到 GitHub，名為「<a href="https://github.com/kyomind/Grind-75">Grind-75</a>」。</p><p>這個名稱顯然是「致敬」第一篇提到的刷題清單「<a href="https://www.techinterviewhandbook.org/grind75/">Grind 75</a>」，同時也是期許自己刷個 75 題就好。</p><p>Repo 的結構非常簡單，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── pyproject.toml</span><br><span class="line">└── solutions</span><br><span class="line">    ├── 1. Two Sum.md</span><br><span class="line">    ├── 1. Two Sum.py</span><br><span class="line">    ├── 102. Binary Tree Level Order Traversal.md</span><br><span class="line">    ├── 102. Binary Tree Level Order Traversal.py</span><br><span class="line">    ├── ...(中略)</span><br><span class="line">    ├── 973. K Closest Points to Origin.md</span><br><span class="line">    ├── 973. K Closest Points to Origin.py</span><br><span class="line">    └── 98. Validate Binary Search Tree.py</span><br></pre></td></tr></table></figure><p>每道題目都會有一個同名的 Python 檔案。（我用 Python 刷題）</p><p>此外，複習時會再建立一個同名的 Markdown 筆記，補充更多內容。兩者的搭配構成了我的筆記總合。</p><p>這樣的組織方式有幾個好處：</p><ol><li><strong>檔名與題目名稱一致</strong>：能快速定位到需要查看的題目。</li><li><strong>版本管理（版控）</strong>：版控的重要性在開發時自不待言，寫筆記倒是還好。主要的好處應該是：要刪內容時可以「大方」一點，反正有 Git！</li><li><strong>相互對照</strong>：放在同一個地方，筆記和程式碼方便快速對照。</li></ol><p>Git repo 也方便上傳到 GitHub 分享、供他人參考。雖然除了自己應該沒人會想看🤣，但至少是個足跡！</p><hr><h2 id="筆記方法與流程"><a href="#筆記方法與流程" class="headerlink" title="筆記方法與流程"></a>筆記方法與流程</h2><p>刷題時，我分兩個階段建立筆記。</p><p>這些做法目前都還在<strong>實驗階段</strong>，可作為參考。</p><p>如果後續有更新或不同想法，我會再回來修正、補充。</p><h2 id="第一次刷題：記錄在-Python-檔中"><a href="#第一次刷題：記錄在-Python-檔中" class="headerlink" title="第一次刷題：記錄在 Python 檔中"></a>第一次刷題：記錄在 Python 檔中</h2><p>在第一次刷題時，我的重心在於「理解」。此時大部分時候都不是我獨立完成答案，而是與 AI 協作。</p><p>在這階段，我會將筆記以「程式碼註解」形式寫在 Python 檔裡，格式有兩種：</p><ol><li><strong>使用「單行註解」記錄重點</strong>：說明解題意圖、做法，或需要特別注意的細節。</li><li><strong>使用「多行字串」記錄長筆記</strong>：例如思路分析或 AI 提供的重要觀念。</li></ol><p>範例如下，來自「<a href="https://github.com/kyomind/Grind-75/blob/main/solutions/102.%20Binary%20Tree%20Level%20Order%20Traversal.py">102. Binary Tree Level Order Traversal.py</a>」：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 BFS 進行層序遍歷 + queue</span></span><br><span class="line"><span class="comment"># 這過程和爬蟲一個網站非常像</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">levelOrder</span>(<span class="params">self, root</span>):</span><br><span class="line">        levels = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> levels</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化佇列，將根節點加入佇列</span></span><br><span class="line">        <span class="comment"># XXX 這裡使用 list 來模擬 queue，在移除第一個元素時，效率較低</span></span><br><span class="line">        <span class="comment"># 可以使用 collections.deque 來實現，移除時則使用 popleft() 方法</span></span><br><span class="line">        <span class="comment"># queue = deque([root])</span></span><br><span class="line">        queue = [root]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 開始 BFS</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>我會適時使用「<code>XXX</code>」這類 Code Tags 來標註特別重要的部分。如上述第 10 行。</p><h2 id="第一次複習：建立-Markdown-筆記"><a href="#第一次複習：建立-Markdown-筆記" class="headerlink" title="第一次複習：建立 Markdown 筆記"></a>第一次複習：建立 Markdown 筆記</h2><p>當我第二次接觸這道題目（第一次複習）時，會再新增一個 Markdown 檔案，<strong>進一步補充</strong>筆記內容。</p><p>這些 Markdown 筆記通常包括：</p><ul><li>和 AI 的<strong>關鍵環節問答</strong>。</li><li>具體的<strong>易錯點</strong>分析。</li><li>自己對解題的<strong>額外補充或心得</strong>。</li></ul><p>範例如下，取自「<a href="https://github.com/kyomind/Grind-75/blob/main/solutions/567.%20Permutation%20in%20String.md">567. Permutation in String.md</a>」：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 2024-12-13</span></span><br><span class="line"><span class="section">## 我反對使用 range() 來滑動視窗</span></span><br><span class="line">在LeetCode官方的題目tag中，給的是「Hash Table Two Pointers String Sliding Window」</span><br><span class="line">如果用range，其實就沒有突顯Two Pointers的實作，要用while才有</span><br><span class="line">我覺得range方法雖然「簡潔」，但理解負擔也很大——更加抽象，而且更加「不通用」(無法離開Python)</span><br><span class="line"></span><br><span class="line"><span class="section">##  ChatGPT</span></span><br><span class="line">你說得非常有道理！在 <span class="strong">**LeetCode 官方標籤**</span> 中，明確提到 <span class="strong">**Two Pointers**</span>，但如果我們使用 <span class="code">`range`</span> 搭配索引來寫，雖然程式碼簡潔，但這種寫法：</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> <span class="strong">**沒有突顯 Two Pointers**</span> 的概念：雙指標本質上是維護兩個獨立的索引來滑動視窗，而非透過單個索引來完成。</span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**抽象度較高**</span>：對於初學者來說，<span class="code">`range(len(s1), len(s2))`</span> 的邏輯並不直觀，理解它為什麼能模擬視窗移動較為困難。</span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**不通用**</span>：這種寫法過於依賴 Python 語言特性，無法直接轉換到其他語言（如 C++、Java）。</span><br><span class="line"></span><br><span class="line">...(下略)</span><br></pre></td></tr></table></figure><p>Markdown 的內容通常會比較長，而且會標註日期——即複習日。</p><p>這份 Markdown，就是傳統意義上的筆記，和程式碼放在一起。</p><hr><h2 id="筆記的價值與兩難"><a href="#筆記的價值與兩難" class="headerlink" title="筆記的價值與兩難"></a>筆記的價值與兩難</h2><p>話說回來，這些筆記，我日後真的都會回去看嗎？</p><p>就像前面引用保哥的那段話，說真的，我自己也不敢肯定。</p><p>但可以確定的是，當我要複習時，這些筆記能讓我<strong>快速回復記憶、重新建立大腦的答題情境</strong>。</p><p>考慮到「<strong>筆記愈長，複習意願愈低</strong>」的人性，我們應盡可能只記錄關鍵部分，避免未來回顧時需要費力過濾內容。</p><p>隨著刷題的進展與對一些概念的熟悉，不需要的筆記也要<strong>狠心將其刪除</strong>。</p><p>這正是為何要在 Git repo 中寫筆記——你可以大膽刪內容！</p><hr><h2 id="常見問題"><a href="#常見問題" class="headerlink" title="常見問題"></a>常見問題</h2><p>以下幾個常見問題，是我在過程中反覆思考過的部分。</p><h3 id="為什麼不使用筆記軟體？"><a href="#為什麼不使用筆記軟體？" class="headerlink" title="為什麼不使用筆記軟體？"></a>為什麼不使用筆記軟體？</h3><p>雖然我是筆記與筆記軟體的重度用戶，但我認為在刷題情境下，筆記最好直接和程式碼緊密結合即可。</p><p>如果把筆記放在 Notion、Logseq 等工具中，<strong>程式碼、筆記間的對照會變得麻煩，間接影響複習意願。</strong></p><h3 id="為什麼要分成兩種筆記？"><a href="#為什麼要分成兩種筆記？" class="headerlink" title="為什麼要分成兩種筆記？"></a>為什麼要分成兩種筆記？</h3><p>因為程式碼註解主要用於記錄細節和立即的想法，而 Markdown 則整理較完整的思路與學習心得。</p><p>兩者各有<strong>擅長與不擅長</strong>之處：</p><table><thead><tr><th></th><th>程式碼註解</th><th>Markdown 筆記</th></tr></thead><tbody><tr><td>優點一</td><td>通常簡短有力，適合即時記錄</td><td>排版多元，可讀性遠高於註解</td></tr><tr><td>優點二</td><td>直接與程式碼結合</td><td>格式完整、方便編輯</td></tr><tr><td>缺點一</td><td>排版弱，不適合稍長或頻繁換行的內容</td><td>必須和程式碼兩兩對照</td></tr><tr><td>缺點二</td><td><strong>太多註解會影響程式碼閱讀</strong></td><td><strong>筆記容易長篇大論、失焦</strong></td></tr></tbody></table><p>這種分工讓筆記更有條理，也更容易維護。</p><h3 id="還能更簡單嗎？"><a href="#還能更簡單嗎？" class="headerlink" title="還能更簡單嗎？"></a>還能更簡單嗎？</h3><blockquote><p>Markdown 筆記能不能併入程式碼？比如用多行註解取代。</p></blockquote><p>可以是可以，但我認為<strong>分開的好處大於合併</strong>。</p><p>首先，程式碼應盡量保持簡潔，過多的註解會影響閱讀；其次，Markdown 更適合整理筆記，哪怕只是排版上的「<strong>換行</strong>」，也比註解方便許多。</p><p>此外，分開管理也讓我們能更靈活地調整和刪減筆記。</p><h3 id="如何確保筆記品質？"><a href="#如何確保筆記品質？" class="headerlink" title="如何確保筆記品質？"></a>如何確保筆記品質？</h3><p>做筆記時很容易想要追求完整、多多益善，這是<strong>筆記愛好者的通病</strong>，我也不例外😷</p><p>有一個簡單暴力但有效的方法：<strong>限制 Markdown 筆記的行數上限！</strong></p><p>我目前的想法是：</p><ol><li>Easy：上限 100行。</li><li>Medium：上限 200 行。</li><li>Hard：上限 300 行。（實際上我沒有打算寫 Hard 題😅）</li></ol><p>超過上限就要刪減內容！（這裡留有一個餘地：你可以一行寫長一點XD）</p><p>這些數字是否適合，要實驗一段時間後才知道。但可以確信的是：<strong>有上限絕對比沒上限好得多</strong>。</p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>本文分享了我在刷題時的筆記方法。這套方法雖然簡單，卻能幫助我們梳理學習思路，同時避免筆記變得過於冗長。</p><p>本系列一直將刷題視為一種<strong>學習方式</strong>，而不僅是通過面試的手段。</p><p>至於怎麼樣的方式適合自己，需要一定的嘗試與調整。這也是我寫這個系列的初衷——希望能讓刷題變得有趣、有多元價值。</p><p>但願我們都能在這個過程中，找到一點屬於自己的成就感。</p><h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>系列的下一篇，我會分享我如何複習這些筆記——畢竟筆記就是拿來複習的。</p><p>這部分都還在持續實踐與構思中，敬請期待。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/g9WO9S7.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;系列的前兩篇中，我們首先介紹了準備工作、學習資源和基本的刷題原則，這些內容&lt;strong&gt;特別適合初學者或希望減少刷題壓力的讀者&lt;/strong&gt;。畢竟我也不喜歡刷題😂&lt;/p&gt;
&lt;p&gt;接著，在第二篇裡，我們討論了如何使用 AI 工具（我設計的 &lt;a href=&quot;https://chatgpt.com/g/g-6731960a3a2081909fe1975e05c034c4-li-li-kou-kou&quot;&gt;GPTs&lt;/a&gt;）來提高刷題效率（或說提高「意願」），以及使用 AI 輔助刷題時的一些重點與注意事項。&lt;/p&gt;
&lt;p&gt;如果你還沒看過前兩篇，建議可以先看看，會對整個學習脈絡有更清楚的理解。&lt;/p&gt;
&lt;h3 id=&quot;系列：我的-LeetCode-刷題之道&quot;&gt;&lt;a href=&quot;#系列：我的-LeetCode-刷題之道&quot; class=&quot;headerlink&quot; title=&quot;系列：我的 LeetCode 刷題之道&quot;&gt;&lt;/a&gt;系列：我的 LeetCode 刷題之道&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.kyomind.tw/series/#%E6%88%91%E7%9A%84-LeetCode-%E5%88%B7%E9%A1%8C%E4%B9%8B%E9%81%93&quot;&gt;文章清單（連載中）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文將聚焦於刷題過程中的&lt;strong&gt;筆記&lt;/strong&gt;環節，採取簡單、實用的筆記方式，讓你的學習過程更有條理，並在複習時更加輕鬆。&lt;/p&gt;
&lt;p&gt;話不多說，讓我們開始。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/g9WO9S7.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="LeetCode" scheme="https://blog.kyomind.tw/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>《給網站工程師的網路課》心得：Web 開發者的網路學習指南</title>
    <link href="https://blog.kyomind.tw/network-101-course/"/>
    <id>https://blog.kyomind.tw/network-101-course/</id>
    <published>2024-12-21T02:30:00.000Z</published>
    <updated>2025-02-28T03:50:41.125Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/sl3ouFQ.jpeg"></p><p>上星期日，我參加了<a href="https://azole.medium.com/">小賴</a>的《給網站工程師的網路課》，獲益良多，有必要寫一篇文章分享。</p><p>但<strong>本文並不是上課筆記</strong>，而是想談談我作為一個轉職軟體工程師，學習網路知識的<strong>不同階段歷程</strong>，以及這堂課<strong>如何彌補了過去的不足</strong>。</p><p>如果你對這堂課感興趣，但不知道自己適不適合，推薦參考下面兩篇文章：</p><ul><li><a href="https://azole.medium.com/%E7%B5%A6%E7%B6%B2%E7%AB%99%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E7%B6%B2%E8%B7%AF%E8%AA%B2-21157b1d47d1">給網站工程師的網路課</a>：講者小賴對課程內容的專文介紹。</li><li><a href="https://anna-su.com/tech/internet-course-for-web-developers">給網站工程師的網路課 - 上課心得筆記</a>：實際參與學員的上課心得與筆記。</li></ul><p>看完之後，能一定程度了解這堂課的內容、定位與輪廓。</p><p>這是一堂實體課，時長為一個下午（約 4 小時），但資訊量明顯超過 4 小時能講完的內容，可說是非常充實。</p><p>如果你也是 Web 開發者，卻仍對網路感到一知半解，相信本文能帶給你一些方向。</p><span id="more"></span><hr><p>讓我們直接開始吧！</p><h2 id="Web-開發者需要了解網路嗎？"><a href="#Web-開發者需要了解網路嗎？" class="headerlink" title="Web 開發者需要了解網路嗎？"></a>Web 開發者需要了解網路嗎？</h2><p>答案自然是「Yes」——不然我就不會寫這篇文章了😂，但也<strong>沒那麼簡單</strong>。</p><p>無論前端、後端，還是全端工程師，我們的主要工作都圍繞著 Web 展開，且大部分的產出都必須透過 HTTP 來運作。</p><p>而 HTTP 建立在 TCP&#x2F;IP 協議之上，因此網路知識的重要性不言而喻。</p><p>但我們也得承認，對大多數 Web 開發者而言，<strong>網路往往不是工作中的主角。</strong></p><p>日常的功能開發，往往是以「<strong>框架</strong>」為主角，無論是前端的 Vue、React，或是我熟悉的 Django。網路常常是作為「<strong>配角</strong>」，在背後默默運作。</p><h3 id="重要的「配角」"><a href="#重要的「配角」" class="headerlink" title="重要的「配角」"></a>重要的「配角」</h3><p>但有些時候，網路問題「確實」會直接影響到你的開發效率，甚至讓你感到<strong>無力</strong>。</p><p>舉個例子，網站部署後出現發現<strong>網頁載入緩慢</strong>，這究竟是前端請求問題、伺服器端設定問題，還是網路出了問題？</p><p>又或者，你的 API 平時運作良好，但<strong>偶爾會出現 Timeout</strong>，究竟<strong>該從哪裡開始排查</strong>？</p><p>這類問題雖與功能無關，但<strong>直接影響了功能的實現</strong>，不得不處理。在缺乏基礎網路知識的情況下，往往只能靠「<strong>試誤、碰運氣</strong>」來排查問題，甚至可能因此卡關好幾天。</p><p>所以，網路雖然不屬於核心技能範疇，但同時也是避不開、需要好好了解的一部分。</p><hr><h2 id="我的網路學習三階段"><a href="#我的網路學習三階段" class="headerlink" title="我的網路學習三階段"></a>我的網路學習三階段</h2><p>說是這麼說，我對網路的學習也稱不上多認真啦🤣</p><p>在介紹這三個階段之前，還是不免俗地強調：每個人的學習路徑不盡相同，以下僅是我個人的經驗。</p><h2 id="第一階段：從-HTTP-開始"><a href="#第一階段：從-HTTP-開始" class="headerlink" title="第一階段：從 HTTP 開始"></a>第一階段：從 HTTP 開始</h2><p>幾年前，我曾在<a href="https://time.geekbang.org/">極客時間</a>購買了一堂課，叫《<a href="https://time.geekbang.org/column/intro/100029001">透視 HTTP 協議</a>》。（有興趣的話，也可透過我的<a href="https://time.geekbang.org/column/intro/100029001?code=q-hHhk4l1RmUbh/YwVDnxx78GI0QO2uJ7UJ1JqX2S8Q=">分享連結</a>購買，我會得到一點點佣金，感謝支持！）</p><p>這堂課對我了解 HTTP 知識有很大的幫助，像是請求方法、body、狀態碼、header 的作用等。深入淺出，學起來很踏實。</p><p>雖然這些知識在網路上可能都找得到，但這堂課幫你整理得更有體系，我不必自己尋尋覓覓，就能循序漸進地掌握 HTTP 中各個重要概念。</p><p>總之，我覺得這是前期對我很有幫助的教材。但它對於 HTTP 以外的內容（TCP&#x2F;IP、DNS），則著墨較少，所以只適合作為一個開端。</p><hr><h2 id="第二階段：用-ChatGPT-補一補"><a href="#第二階段：用-ChatGPT-補一補" class="headerlink" title="第二階段：用 ChatGPT 補一補"></a>第二階段：用 ChatGPT 補一補</h2><p>隨著 ChatGPT 等 AI 工具的出現，基礎知識的學習變得更方便了！</p><p>你或許聽過 <a href="https://github.com/JushBJJ/Mr.-Ranedeer-AI-Tutor">Mr. Ranedeer</a> 這個設計精巧的 <a href="https://chatgpt.com/g/g-9PKhaweyb-mr-ranedeer">GPTs</a>，號稱可以讓你自學任何主題。</p><p>雖然不一定有那麼神（而且很多知識也不是以文字呈現的），但拿來學一些<strong>軟體開發的通用知識</strong>確實挺不錯。</p><p>比如給它這樣的提示詞（prompt）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/plan 關於「從瀏覽器輸入網址到取得回應，中間發生了什麼事？」這個主題的開發者必備知識</span><br></pre></td></tr></table></figure><p>它會列出下列的學習清單（回答我有多次調整過，但格式不變，截圖僅為部分）：</p><p><img src="https://i.imgur.com/IsbOjTW.png" alt="Mr. Ranedeer"><span class="cap">Mr. Ranedeer</span></p><p>這種學習方式有幾個好處：</p><ol><li>可以<strong>快速獲得該主題的輪廓與流程。</strong></li><li>可以針對不懂的細節<strong>反覆詢問</strong>，逐步加深理解。就像我的「<a href="https://blog.kyomind.tw/gpts-for-leetcode/#%E4%B8%80%E3%80%81%E3%80%8C%E5%93%A9%E5%93%A9%E6%89%A3%E6%89%A3%E3%80%8DGPTs-%E4%BB%8B%E7%B4%B9">哩哩扣扣</a>」一樣。</li></ol><h3 id="靠-AI-自學的缺點"><a href="#靠-AI-自學的缺點" class="headerlink" title="靠 AI 自學的缺點"></a>靠 AI 自學的缺點</h3><p><strong>但缺點也很明顯：AI 不知道你「不知道什麼」。</strong></p><p>網路知識龐雜，初學者不易分辨哪些概念屬於基礎，哪些則是進階——其實自己看書也有類似困境，所以我幾乎不太想直接去啃那些大部頭的網路書籍。</p><p>更困難的是，作為初學者，我們往往不知道哪些知識<strong>對現階段的自己最重要！</strong>（這情況在學習新技術時經常發生）</p><p>AI 確實能提供答案，但它不一定知道你的<strong>學習困境</strong>所在（甚至我們自己也不清楚），更無法取代經驗豐富老師的引導。</p><p>總之，AI 在原來的基礎上，幫我補足了第一階段課程中的缺憾，但仍缺少一個完整的框架與指引。只能算是聊勝於無。</p><hr><h2 id="第三階段：上小賴的《給網站工程師的網路課》"><a href="#第三階段：上小賴的《給網站工程師的網路課》" class="headerlink" title="第三階段：上小賴的《給網站工程師的網路課》"></a>第三階段：上小賴的《給網站工程師的網路課》</h2><p>這次參加小賴的課程，讓我真正體會到什麼叫做「<strong>把零散的知識串聯起來</strong>」。</p><p>就像<a href="https://www.threads.net/@kyomind.tw/post/DDqc75PSu_2">我在 Threads 上說的</a>：「這是<strong>知識與快樂的螺旋</strong>！」</p><p>之前的學習，我本以為已經算是「相對有體系」了，但上完這堂課後，才知道自己還是太天真了😅——這很正常啦！畢竟網路世界博大精深。</p><h3 id="課程亮點"><a href="#課程亮點" class="headerlink" title="課程亮點"></a>課程亮點</h3><p>這堂課從「輸入網址、按完 Enter」後的 DNS 查詢開始，一路講到 TCP、IP 協議，並串聯起路徑上的各個環節。</p><p>用淺顯易懂的方式解釋網路運作，並輔以具體的例子、圖片；操作 <a href="https://www.wireshark.org/">Wireshark</a> 讓我對網路封包有了更多視覺上的理解。（比如看到 TCP 中的 port number 值）</p><p>光 DNS 部分，就讓我有一種打通任督二脈的感覺——雖然有學過，但發現自己的了解仍稍嫌片面。</p><p>和單純的記憶知識相比，我想其中的關鍵差別在於「<strong>經驗</strong>」。這堂課有很多小賴的實戰經驗，<strong>它們讓知識變得更加真實、栩栩如生。</strong></p><hr><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>總的來說，這是一堂讓我獲益良多的課程。</p><p>我之前所學的 HTTP 與 AI 提供的網路知識，相較之下仍像是散落的拼圖，而這次課程把這些拼圖組合起來，讓我看到<strong>一幅更清晰的全景</strong>。</p><p>這堂課是針對 <strong>Web 開發者</strong>設計，難度拿捏得宜，不會過於深奧，也不流於表面，適合想補足網路知識的工程師。</p><p>如果你是 Web 開發者，正在摸索網路相關的學習路徑，這堂課也許就是你的下一站。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/sl3ouFQ.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;上星期日，我參加了&lt;a href=&quot;https://azole.medium.com/&quot;&gt;小賴&lt;/a&gt;的《給網站工程師的網路課》，獲益良多，有必要寫一篇文章分享。&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;本文並不是上課筆記&lt;/strong&gt;，而是想談談我作為一個轉職軟體工程師，學習網路知識的&lt;strong&gt;不同階段歷程&lt;/strong&gt;，以及這堂課&lt;strong&gt;如何彌補了過去的不足&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你對這堂課感興趣，但不知道自己適不適合，推薦參考下面兩篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://azole.medium.com/%E7%B5%A6%E7%B6%B2%E7%AB%99%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E7%B6%B2%E8%B7%AF%E8%AA%B2-21157b1d47d1&quot;&gt;給網站工程師的網路課&lt;/a&gt;：講者小賴對課程內容的專文介紹。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://anna-su.com/tech/internet-course-for-web-developers&quot;&gt;給網站工程師的網路課 - 上課心得筆記&lt;/a&gt;：實際參與學員的上課心得與筆記。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看完之後，能一定程度了解這堂課的內容、定位與輪廓。&lt;/p&gt;
&lt;p&gt;這是一堂實體課，時長為一個下午（約 4 小時），但資訊量明顯超過 4 小時能講完的內容，可說是非常充實。&lt;/p&gt;
&lt;p&gt;如果你也是 Web 開發者，卻仍對網路感到一知半解，相信本文能帶給你一些方向。&lt;/p&gt;</summary>
    
    
    <content src="https://i.imgur.com/sl3ouFQ.jpeg" type="image"/>
    
    
    <category term="心得" scheme="https://blog.kyomind.tw/categories/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="軟體工程師" scheme="https://blog.kyomind.tw/tags/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB/"/>
    
    <category term="HTTP" scheme="https://blog.kyomind.tw/tags/HTTP/"/>
    
    <category term="課程心得" scheme="https://blog.kyomind.tw/tags/%E8%AA%B2%E7%A8%8B%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
</feed>
